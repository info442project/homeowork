{"ast":null,"code":"/** @module utils/PropTypes/controlled */\nimport PropTypes from 'prop-types';\n/**\n * Validates the a component is fully controlled or uncontrolled.  If the given prop is not\n * `undefined`, it will check if the `funcName` is defined and a function. A missing function\n * will generate an error similar to the built-in React controlled validation message.\n *\n * @param {String} funcName - The function name to use for additional validation.\n * @param {function} validator - The PropTypes validator to use for the given prop.\n * @return {Error} an error or null.\n */\n\nexport default function controlled(validator, funcName) {\n  var fallbackPropName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'defaultValue';\n  return function validate(props, propName, componentName, location, propFullName) {\n    var componentNameSafe = componentName || '<<anonymous>>';\n    var propFullNameSafe = propFullName || propName;\n\n    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n      args[_key - 5] = arguments[_key];\n    }\n\n    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));\n\n    if (!err && typeof props[propName] !== 'undefined' && !props.readOnly && !props.disabled) {\n      var _PropTypes$func;\n\n      var funcError = (_PropTypes$func = PropTypes.func).isRequired.apply(_PropTypes$func, [props, funcName, componentName, location, propFullName].concat(args));\n\n      if (funcError) {\n        err = new Error('You provided a `' + propFullNameSafe + '` ' + location + ' to the ' + componentNameSafe + ' without a ' + ('`' + funcName + '` handler. This will render a read only field. Set either the `' + funcName + '` ') + ('or use the `' + fallbackPropName + '` instead.'));\n      }\n    }\n\n    return err;\n  };\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/PropTypes/controlled.js"],"names":["PropTypes","controlled","validator","funcName","fallbackPropName","arguments","length","undefined","validate","props","propName","componentName","location","propFullName","componentNameSafe","propFullNameSafe","_len","args","Array","_key","err","apply","concat","readOnly","disabled","_PropTypes$func","funcError","func","isRequired","Error"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,YAAtB;AAEA;;;;;;;;;;AASA,eAAe,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,QAA/B,EAAyC;AACtD,MAAIC,gBAAgB,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,cAA3F;AAEA,SAAO,SAASG,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,aAAnC,EAAkDC,QAAlD,EAA4DC,YAA5D,EAA0E;AAC/E,QAAIC,iBAAiB,GAAGH,aAAa,IAAI,eAAzC;AACA,QAAII,gBAAgB,GAAGF,YAAY,IAAIH,QAAvC;;AAEA,SAAK,IAAIM,IAAI,GAAGX,SAAS,CAACC,MAArB,EAA6BW,IAAI,GAAGC,KAAK,CAACF,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAvB,CAAzC,EAAoEG,IAAI,GAAG,CAAhF,EAAmFA,IAAI,GAAGH,IAA1F,EAAgGG,IAAI,EAApG,EAAwG;AACtGF,MAAAA,IAAI,CAACE,IAAI,GAAG,CAAR,CAAJ,GAAiBd,SAAS,CAACc,IAAD,CAA1B;AACD;;AAED,QAAIC,GAAG,GAAGlB,SAAS,CAACmB,KAAV,CAAgBd,SAAhB,EAA2B,CAACE,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAiCC,QAAjC,EAA2CC,YAA3C,EAAyDS,MAAzD,CAAgEL,IAAhE,CAA3B,CAAV;;AACA,QAAI,CAACG,GAAD,IAAQ,OAAOX,KAAK,CAACC,QAAD,CAAZ,KAA2B,WAAnC,IAAkD,CAACD,KAAK,CAACc,QAAzD,IAAqE,CAACd,KAAK,CAACe,QAAhF,EAA0F;AACxF,UAAIC,eAAJ;;AAEA,UAAIC,SAAS,GAAG,CAACD,eAAe,GAAGzB,SAAS,CAAC2B,IAA7B,EAAmCC,UAAnC,CAA8CP,KAA9C,CAAoDI,eAApD,EAAqE,CAAChB,KAAD,EAAQN,QAAR,EAAkBQ,aAAlB,EAAiCC,QAAjC,EAA2CC,YAA3C,EAAyDS,MAAzD,CAAgEL,IAAhE,CAArE,CAAhB;;AACA,UAAIS,SAAJ,EAAe;AACbN,QAAAA,GAAG,GAAG,IAAIS,KAAJ,CAAU,qBAAqBd,gBAArB,GAAwC,IAAxC,GAA+CH,QAA/C,GAA0D,UAA1D,GAAuEE,iBAAvE,GAA2F,aAA3F,IAA4G,MAAMX,QAAN,GAAiB,iEAAjB,GAAqFA,QAArF,GAAgG,IAA5M,KAAqN,iBAAiBC,gBAAjB,GAAoC,YAAzP,CAAV,CAAN;AACD;AACF;;AAED,WAAOgB,GAAP;AACD,GAnBD;AAoBD","sourcesContent":["/** @module utils/PropTypes/controlled */\nimport PropTypes from 'prop-types';\n\n/**\n * Validates the a component is fully controlled or uncontrolled.  If the given prop is not\n * `undefined`, it will check if the `funcName` is defined and a function. A missing function\n * will generate an error similar to the built-in React controlled validation message.\n *\n * @param {String} funcName - The function name to use for additional validation.\n * @param {function} validator - The PropTypes validator to use for the given prop.\n * @return {Error} an error or null.\n */\nexport default function controlled(validator, funcName) {\n  var fallbackPropName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'defaultValue';\n\n  return function validate(props, propName, componentName, location, propFullName) {\n    var componentNameSafe = componentName || '<<anonymous>>';\n    var propFullNameSafe = propFullName || propName;\n\n    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {\n      args[_key - 5] = arguments[_key];\n    }\n\n    var err = validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));\n    if (!err && typeof props[propName] !== 'undefined' && !props.readOnly && !props.disabled) {\n      var _PropTypes$func;\n\n      var funcError = (_PropTypes$func = PropTypes.func).isRequired.apply(_PropTypes$func, [props, funcName, componentName, location, propFullName].concat(args));\n      if (funcError) {\n        err = new Error('You provided a `' + propFullNameSafe + '` ' + location + ' to the ' + componentNameSafe + ' without a ' + ('`' + funcName + '` handler. This will render a read only field. Set either the `' + funcName + '` ') + ('or use the `' + fallbackPropName + '` instead.'));\n      }\n    }\n\n    return err;\n  };\n}"]},"metadata":{},"sourceType":"module"}