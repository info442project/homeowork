{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport Portal from '../Helpers/Portal';\n\nvar Overlay = function (_PureComponent) {\n  _inherits(Overlay, _PureComponent);\n\n  function Overlay() {\n    _classCallCheck(this, Overlay);\n\n    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));\n  }\n\n  Overlay.prototype.getChildContext = function getChildContext() {\n    // Always want the overlay to render in a separate subtree until 1.1.0\n    return {\n      isInPortal: false\n    };\n  };\n\n  Overlay.prototype.render = function render() {\n    var _props = this.props,\n        active = _props.active,\n        visible = _props.visible,\n        renderNode = _props.renderNode,\n        onClick = _props.onClick,\n        style = _props.style,\n        className = _props.className;\n    return React.createElement(Portal, {\n      visible: visible,\n      renderNode: renderNode\n    }, React.createElement('div', {\n      style: style,\n      className: cn('md-overlay md-overlay--drawer md-pointer--hover', {\n        'md-overlay--active': active\n      }, className),\n      onClick: onClick\n    }));\n  };\n\n  return Overlay;\n}(PureComponent);\n\nOverlay.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  active: PropTypes.bool,\n  visible: PropTypes.bool.isRequired,\n  renderNode: PropTypes.object,\n  onClick: PropTypes.func\n};\nOverlay.childContextTypes = {\n  isInPortal: PropTypes.bool\n};\nexport default Overlay;","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/Drawers/Overlay.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","PureComponent","PropTypes","cn","Portal","Overlay","_PureComponent","apply","arguments","getChildContext","isInPortal","render","_props","props","active","visible","renderNode","onClick","style","className","createElement","propTypes","object","string","bool","isRequired","func","childContextTypes"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,0BAAT,CAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;AAAE,MAAI,CAACD,IAAL,EAAW;AAAE,UAAM,IAAIE,cAAJ,CAAmB,2DAAnB,CAAN;AAAwF;;AAAC,SAAOD,IAAI,KAAK,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAAjD,CAAJ,GAAmEA,IAAnE,GAA0ED,IAAjF;AAAwF;;AAEhP,SAASG,SAAT,CAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAE,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAAE,UAAM,IAAIP,SAAJ,CAAc,6DAA6D,OAAOO,UAAlF,CAAN;AAAsG;;AAACD,EAAAA,QAAQ,CAACE,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAcH,UAAU,IAAIA,UAAU,CAACC,SAAvC,EAAkD;AAAEG,IAAAA,WAAW,EAAE;AAAEC,MAAAA,KAAK,EAAEN,QAAT;AAAmBO,MAAAA,UAAU,EAAE,KAA/B;AAAsCC,MAAAA,QAAQ,EAAE,IAAhD;AAAsDC,MAAAA,YAAY,EAAE;AAApE;AAAf,GAAlD,CAArB;AAAqK,MAAIR,UAAJ,EAAgBE,MAAM,CAACO,cAAP,GAAwBP,MAAM,CAACO,cAAP,CAAsBV,QAAtB,EAAgCC,UAAhC,CAAxB,GAAsED,QAAQ,CAACW,SAAT,GAAqBV,UAA3F;AAAwG;;AAE9e,OAAOW,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,IAAIC,OAAO,GAAG,UAAUC,cAAV,EAA0B;AACtCnB,EAAAA,SAAS,CAACkB,OAAD,EAAUC,cAAV,CAAT;;AAEA,WAASD,OAAT,GAAmB;AACjB1B,IAAAA,eAAe,CAAC,IAAD,EAAO0B,OAAP,CAAf;;AAEA,WAAOtB,0BAA0B,CAAC,IAAD,EAAOuB,cAAc,CAACC,KAAf,CAAqB,IAArB,EAA2BC,SAA3B,CAAP,CAAjC;AACD;;AAEDH,EAAAA,OAAO,CAACf,SAAR,CAAkBmB,eAAlB,GAAoC,SAASA,eAAT,GAA2B;AAC7D;AACA,WAAO;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAP;AACD,GAHD;;AAKAL,EAAAA,OAAO,CAACf,SAAR,CAAkBqB,MAAlB,GAA2B,SAASA,MAAT,GAAkB;AAC3C,QAAIC,MAAM,GAAG,KAAKC,KAAlB;AAAA,QACIC,MAAM,GAAGF,MAAM,CAACE,MADpB;AAAA,QAEIC,OAAO,GAAGH,MAAM,CAACG,OAFrB;AAAA,QAGIC,UAAU,GAAGJ,MAAM,CAACI,UAHxB;AAAA,QAIIC,OAAO,GAAGL,MAAM,CAACK,OAJrB;AAAA,QAKIC,KAAK,GAAGN,MAAM,CAACM,KALnB;AAAA,QAMIC,SAAS,GAAGP,MAAM,CAACO,SANvB;AAQA,WAAOnB,KAAK,CAACoB,aAAN,CACLhB,MADK,EAEL;AAAEW,MAAAA,OAAO,EAAEA,OAAX;AAAoBC,MAAAA,UAAU,EAAEA;AAAhC,KAFK,EAGLhB,KAAK,CAACoB,aAAN,CAAoB,KAApB,EAA2B;AACzBF,MAAAA,KAAK,EAAEA,KADkB;AAEzBC,MAAAA,SAAS,EAAEhB,EAAE,CAAC,iDAAD,EAAoD;AAC/D,8BAAsBW;AADyC,OAApD,EAEVK,SAFU,CAFY;AAKzBF,MAAAA,OAAO,EAAEA;AALgB,KAA3B,CAHK,CAAP;AAWD,GApBD;;AAsBA,SAAOZ,OAAP;AACD,CArCa,CAqCZJ,aArCY,CAAd;;AAuCAI,OAAO,CAACgB,SAAR,GAAoB;AAClBH,EAAAA,KAAK,EAAEhB,SAAS,CAACoB,MADC;AAElBH,EAAAA,SAAS,EAAEjB,SAAS,CAACqB,MAFH;AAGlBT,EAAAA,MAAM,EAAEZ,SAAS,CAACsB,IAHA;AAIlBT,EAAAA,OAAO,EAAEb,SAAS,CAACsB,IAAV,CAAeC,UAJN;AAKlBT,EAAAA,UAAU,EAAEd,SAAS,CAACoB,MALJ;AAMlBL,EAAAA,OAAO,EAAEf,SAAS,CAACwB;AAND,CAApB;AAQArB,OAAO,CAACsB,iBAAR,GAA4B;AAC1BjB,EAAAA,UAAU,EAAER,SAAS,CAACsB;AADI,CAA5B;AAGA,eAAenB,OAAf","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport Portal from '../Helpers/Portal';\n\nvar Overlay = function (_PureComponent) {\n  _inherits(Overlay, _PureComponent);\n\n  function Overlay() {\n    _classCallCheck(this, Overlay);\n\n    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));\n  }\n\n  Overlay.prototype.getChildContext = function getChildContext() {\n    // Always want the overlay to render in a separate subtree until 1.1.0\n    return { isInPortal: false };\n  };\n\n  Overlay.prototype.render = function render() {\n    var _props = this.props,\n        active = _props.active,\n        visible = _props.visible,\n        renderNode = _props.renderNode,\n        onClick = _props.onClick,\n        style = _props.style,\n        className = _props.className;\n\n    return React.createElement(\n      Portal,\n      { visible: visible, renderNode: renderNode },\n      React.createElement('div', {\n        style: style,\n        className: cn('md-overlay md-overlay--drawer md-pointer--hover', {\n          'md-overlay--active': active\n        }, className),\n        onClick: onClick\n      })\n    );\n  };\n\n  return Overlay;\n}(PureComponent);\n\nOverlay.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  active: PropTypes.bool,\n  visible: PropTypes.bool.isRequired,\n  renderNode: PropTypes.object,\n  onClick: PropTypes.func\n};\nOverlay.childContextTypes = {\n  isInPortal: PropTypes.bool\n};\nexport default Overlay;"]},"metadata":{},"sourceType":"module"}