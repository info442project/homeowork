{"ast":null,"code":"/** @module utils/DateUtils/extractTimeParts */\nimport formatTime from './formatTime';\n/**\n * Extracts the hours, minutes, and optional time period from\n * a date time.\n *\n * @param {function} DateTimeFormat the DateTimeFormat function to use.\n * @param {string|string[]} locales the locales to use.\n * @param {Boolean} showSeconds boolean if seconds should be extracted\n * @param {Date} time the time to extract from.\n * @return {Object} an object of { hours, minutes, timePeriod }\n */\n\nexport default function extractTimeParts(DateTimeFormat, locales, showSeconds, time) {\n  var hours = void 0;\n  var minutes = void 0;\n  var seconds = void 0;\n  var minuteSeparator = void 0;\n  var secondSeparator = void 0;\n  var remaining = void 0;\n  var formatted = formatTime(DateTimeFormat, locales, showSeconds, time); // IE does not like lookaheads or splitting on [^0-9]\n  // it will include the non-printable characters..\n\n  if (showSeconds === true) {\n    var _formatted$match = formatted.match(/[0-9]+/g);\n\n    hours = _formatted$match[0];\n    minutes = _formatted$match[1];\n    seconds = _formatted$match[2];\n\n    var _formatted$match2 = formatted.match(/[ ,.:A-z]+/g);\n\n    minuteSeparator = _formatted$match2[0];\n    secondSeparator = _formatted$match2[1];\n    remaining = _formatted$match2.slice(2);\n  } else {\n    var _formatted$match3 = formatted.match(/[0-9]+/g);\n\n    hours = _formatted$match3[0];\n    minutes = _formatted$match3[1];\n\n    var _formatted$match4 = formatted.match(/[ ,.:A-z]+/g);\n\n    minuteSeparator = _formatted$match4[0];\n    remaining = _formatted$match4.slice(1);\n  }\n\n  var timePeriod = void 0;\n\n  if (remaining && remaining.length) {\n    timePeriod = remaining.join('').trim();\n  }\n\n  if (showSeconds === true) {\n    return {\n      hours: hours,\n      minutes: minuteSeparator + minutes,\n      seconds: secondSeparator + seconds,\n      timePeriod: timePeriod\n    };\n  }\n\n  return {\n    hours: hours,\n    minutes: minuteSeparator + minutes,\n    timePeriod: timePeriod\n  };\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/DateUtils/extractTimeParts.js"],"names":["formatTime","extractTimeParts","DateTimeFormat","locales","showSeconds","time","hours","minutes","seconds","minuteSeparator","secondSeparator","remaining","formatted","_formatted$match","match","_formatted$match2","slice","_formatted$match3","_formatted$match4","timePeriod","length","join","trim"],"mappings":"AAAA;AACA,OAAOA,UAAP,MAAuB,cAAvB;AAEA;;;;;;;;;;;AAUA,eAAe,SAASC,gBAAT,CAA0BC,cAA1B,EAA0CC,OAA1C,EAAmDC,WAAnD,EAAgEC,IAAhE,EAAsE;AACnF,MAAIC,KAAK,GAAG,KAAK,CAAjB;AACA,MAAIC,OAAO,GAAG,KAAK,CAAnB;AACA,MAAIC,OAAO,GAAG,KAAK,CAAnB;AACA,MAAIC,eAAe,GAAG,KAAK,CAA3B;AACA,MAAIC,eAAe,GAAG,KAAK,CAA3B;AACA,MAAIC,SAAS,GAAG,KAAK,CAArB;AACA,MAAIC,SAAS,GAAGZ,UAAU,CAACE,cAAD,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,IAAvC,CAA1B,CAPmF,CAQnF;AACA;;AAEA,MAAID,WAAW,KAAK,IAApB,EAA0B;AACxB,QAAIS,gBAAgB,GAAGD,SAAS,CAACE,KAAV,CAAgB,SAAhB,CAAvB;;AAEAR,IAAAA,KAAK,GAAGO,gBAAgB,CAAC,CAAD,CAAxB;AACAN,IAAAA,OAAO,GAAGM,gBAAgB,CAAC,CAAD,CAA1B;AACAL,IAAAA,OAAO,GAAGK,gBAAgB,CAAC,CAAD,CAA1B;;AAEA,QAAIE,iBAAiB,GAAGH,SAAS,CAACE,KAAV,CAAgB,aAAhB,CAAxB;;AAEAL,IAAAA,eAAe,GAAGM,iBAAiB,CAAC,CAAD,CAAnC;AACAL,IAAAA,eAAe,GAAGK,iBAAiB,CAAC,CAAD,CAAnC;AACAJ,IAAAA,SAAS,GAAGI,iBAAiB,CAACC,KAAlB,CAAwB,CAAxB,CAAZ;AACD,GAZD,MAYO;AACL,QAAIC,iBAAiB,GAAGL,SAAS,CAACE,KAAV,CAAgB,SAAhB,CAAxB;;AAEAR,IAAAA,KAAK,GAAGW,iBAAiB,CAAC,CAAD,CAAzB;AACAV,IAAAA,OAAO,GAAGU,iBAAiB,CAAC,CAAD,CAA3B;;AAEA,QAAIC,iBAAiB,GAAGN,SAAS,CAACE,KAAV,CAAgB,aAAhB,CAAxB;;AAEAL,IAAAA,eAAe,GAAGS,iBAAiB,CAAC,CAAD,CAAnC;AACAP,IAAAA,SAAS,GAAGO,iBAAiB,CAACF,KAAlB,CAAwB,CAAxB,CAAZ;AACD;;AAED,MAAIG,UAAU,GAAG,KAAK,CAAtB;;AACA,MAAIR,SAAS,IAAIA,SAAS,CAACS,MAA3B,EAAmC;AACjCD,IAAAA,UAAU,GAAGR,SAAS,CAACU,IAAV,CAAe,EAAf,EAAmBC,IAAnB,EAAb;AACD;;AAED,MAAIlB,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAO;AACLE,MAAAA,KAAK,EAAEA,KADF;AAELC,MAAAA,OAAO,EAAEE,eAAe,GAAGF,OAFtB;AAGLC,MAAAA,OAAO,EAAEE,eAAe,GAAGF,OAHtB;AAILW,MAAAA,UAAU,EAAEA;AAJP,KAAP;AAMD;;AAED,SAAO;AACLb,IAAAA,KAAK,EAAEA,KADF;AAELC,IAAAA,OAAO,EAAEE,eAAe,GAAGF,OAFtB;AAGLY,IAAAA,UAAU,EAAEA;AAHP,GAAP;AAKD","sourcesContent":["/** @module utils/DateUtils/extractTimeParts */\nimport formatTime from './formatTime';\n\n/**\n * Extracts the hours, minutes, and optional time period from\n * a date time.\n *\n * @param {function} DateTimeFormat the DateTimeFormat function to use.\n * @param {string|string[]} locales the locales to use.\n * @param {Boolean} showSeconds boolean if seconds should be extracted\n * @param {Date} time the time to extract from.\n * @return {Object} an object of { hours, minutes, timePeriod }\n */\nexport default function extractTimeParts(DateTimeFormat, locales, showSeconds, time) {\n  var hours = void 0;\n  var minutes = void 0;\n  var seconds = void 0;\n  var minuteSeparator = void 0;\n  var secondSeparator = void 0;\n  var remaining = void 0;\n  var formatted = formatTime(DateTimeFormat, locales, showSeconds, time);\n  // IE does not like lookaheads or splitting on [^0-9]\n  // it will include the non-printable characters..\n\n  if (showSeconds === true) {\n    var _formatted$match = formatted.match(/[0-9]+/g);\n\n    hours = _formatted$match[0];\n    minutes = _formatted$match[1];\n    seconds = _formatted$match[2];\n\n    var _formatted$match2 = formatted.match(/[ ,.:A-z]+/g);\n\n    minuteSeparator = _formatted$match2[0];\n    secondSeparator = _formatted$match2[1];\n    remaining = _formatted$match2.slice(2);\n  } else {\n    var _formatted$match3 = formatted.match(/[0-9]+/g);\n\n    hours = _formatted$match3[0];\n    minutes = _formatted$match3[1];\n\n    var _formatted$match4 = formatted.match(/[ ,.:A-z]+/g);\n\n    minuteSeparator = _formatted$match4[0];\n    remaining = _formatted$match4.slice(1);\n  }\n\n  var timePeriod = void 0;\n  if (remaining && remaining.length) {\n    timePeriod = remaining.join('').trim();\n  }\n\n  if (showSeconds === true) {\n    return {\n      hours: hours,\n      minutes: minuteSeparator + minutes,\n      seconds: secondSeparator + seconds,\n      timePeriod: timePeriod\n    };\n  }\n\n  return {\n    hours: hours,\n    minutes: minuteSeparator + minutes,\n    timePeriod: timePeriod\n  };\n}"]},"metadata":{},"sourceType":"module"}