{"ast":null,"code":"/** @module utils/NumberUtils/calcTimeFromPoint */\nfunction isPointInCircle(cx, cy, r, x, y) {\n  var distance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);\n  return distance <= Math.pow(r, 2);\n}\n\nfunction toDegrees(radians) {\n  return radians * (180 / Math.PI);\n}\n/**\n * Takes a point from a mouse or touch event and a center point of a circle to determine\n * what the new time should be.\n *\n * If the point.y < center.y, the point is in the top half of the circle.\n * If the point.x < center.x, the point is in the left half of the circle.\n *\n * @param {Object} point - The mouse or touch event's point that contains an x and y coordinate.\n * @param {Object} center - The center point for the circle that contains an x and y coordinate.\n * @param {Number} innerRadius - An inner radius for clocks that have 24 hour times. This is\n *    a circle that contains hours 12-23.\n * @param {Boolean} minutes - Boolena if the current time to be calculated is minutes instead of\n *    hours.\n * @param {Boolean} hour12 - Boolean if the clock is a 12 hour clock.\n * @return {Number} the new time.\n */\n\n\nexport default function calcTimeFromPoint(point, center, innerRadius, minutes, hour12) {\n  var x = point.x - center.x;\n  var y = point.y - center.y;\n  var degrees = toDegrees(Math.atan2(y, x));\n  var sectors = minutes ? 60 : 12;\n  var sectorSize = 360 / sectors;\n  var time = Math.round(degrees / sectorSize); // Since the css transform has 0π at π/2 place, we need to offset the\n  // time to that location.\n\n  time += minutes ? 15 : 3; // If time is still negative, it is in the top half of the circle\n\n  if (time < 0) {\n    time += sectors;\n  } // Finally, if it is a 24 hour clock, need to check if the point is actually\n  // selecting hours 13 - 24 (0).\n\n\n  if (!minutes && !hour12) {\n    var isInCircle = isPointInCircle(0, 0, innerRadius, x, y);\n\n    if (time === 0 && !isInCircle || time !== 0 && isInCircle) {\n      time += 12;\n    }\n  }\n\n  return time;\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/NumberUtils/calcTimeFromPoint.js"],"names":["isPointInCircle","cx","cy","r","x","y","distance","Math","pow","toDegrees","radians","PI","calcTimeFromPoint","point","center","innerRadius","minutes","hour12","degrees","atan2","sectors","sectorSize","time","round","isInCircle"],"mappings":"AAAA;AAEA,SAASA,eAAT,CAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,CAAjC,EAAoCC,CAApC,EAAuCC,CAAvC,EAA0C;AACxC,MAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASP,EAAE,GAAGG,CAAd,EAAiB,CAAjB,IAAsBG,IAAI,CAACC,GAAL,CAASN,EAAE,GAAGG,CAAd,EAAiB,CAAjB,CAArC;AACA,SAAOC,QAAQ,IAAIC,IAAI,CAACC,GAAL,CAASL,CAAT,EAAY,CAAZ,CAAnB;AACD;;AAED,SAASM,SAAT,CAAmBC,OAAnB,EAA4B;AAC1B,SAAOA,OAAO,IAAI,MAAMH,IAAI,CAACI,EAAf,CAAd;AACD;AAED;;;;;;;;;;;;;;;;;;AAgBA,eAAe,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,MAAlC,EAA0CC,WAA1C,EAAuDC,OAAvD,EAAgEC,MAAhE,EAAwE;AACrF,MAAIb,CAAC,GAAGS,KAAK,CAACT,CAAN,GAAUU,MAAM,CAACV,CAAzB;AACA,MAAIC,CAAC,GAAGQ,KAAK,CAACR,CAAN,GAAUS,MAAM,CAACT,CAAzB;AACA,MAAIa,OAAO,GAAGT,SAAS,CAACF,IAAI,CAACY,KAAL,CAAWd,CAAX,EAAcD,CAAd,CAAD,CAAvB;AACA,MAAIgB,OAAO,GAAGJ,OAAO,GAAG,EAAH,GAAQ,EAA7B;AACA,MAAIK,UAAU,GAAG,MAAMD,OAAvB;AACA,MAAIE,IAAI,GAAGf,IAAI,CAACgB,KAAL,CAAWL,OAAO,GAAGG,UAArB,CAAX,CANqF,CAQrF;AACA;;AACAC,EAAAA,IAAI,IAAIN,OAAO,GAAG,EAAH,GAAQ,CAAvB,CAVqF,CAYrF;;AACA,MAAIM,IAAI,GAAG,CAAX,EAAc;AACZA,IAAAA,IAAI,IAAIF,OAAR;AACD,GAfoF,CAiBrF;AACA;;;AACA,MAAI,CAACJ,OAAD,IAAY,CAACC,MAAjB,EAAyB;AACvB,QAAIO,UAAU,GAAGxB,eAAe,CAAC,CAAD,EAAI,CAAJ,EAAOe,WAAP,EAAoBX,CAApB,EAAuBC,CAAvB,CAAhC;;AAEA,QAAIiB,IAAI,KAAK,CAAT,IAAc,CAACE,UAAf,IAA6BF,IAAI,KAAK,CAAT,IAAcE,UAA/C,EAA2D;AACzDF,MAAAA,IAAI,IAAI,EAAR;AACD;AACF;;AAED,SAAOA,IAAP;AACD","sourcesContent":["/** @module utils/NumberUtils/calcTimeFromPoint */\n\nfunction isPointInCircle(cx, cy, r, x, y) {\n  var distance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);\n  return distance <= Math.pow(r, 2);\n}\n\nfunction toDegrees(radians) {\n  return radians * (180 / Math.PI);\n}\n\n/**\n * Takes a point from a mouse or touch event and a center point of a circle to determine\n * what the new time should be.\n *\n * If the point.y < center.y, the point is in the top half of the circle.\n * If the point.x < center.x, the point is in the left half of the circle.\n *\n * @param {Object} point - The mouse or touch event's point that contains an x and y coordinate.\n * @param {Object} center - The center point for the circle that contains an x and y coordinate.\n * @param {Number} innerRadius - An inner radius for clocks that have 24 hour times. This is\n *    a circle that contains hours 12-23.\n * @param {Boolean} minutes - Boolena if the current time to be calculated is minutes instead of\n *    hours.\n * @param {Boolean} hour12 - Boolean if the clock is a 12 hour clock.\n * @return {Number} the new time.\n */\nexport default function calcTimeFromPoint(point, center, innerRadius, minutes, hour12) {\n  var x = point.x - center.x;\n  var y = point.y - center.y;\n  var degrees = toDegrees(Math.atan2(y, x));\n  var sectors = minutes ? 60 : 12;\n  var sectorSize = 360 / sectors;\n  var time = Math.round(degrees / sectorSize);\n\n  // Since the css transform has 0π at π/2 place, we need to offset the\n  // time to that location.\n  time += minutes ? 15 : 3;\n\n  // If time is still negative, it is in the top half of the circle\n  if (time < 0) {\n    time += sectors;\n  }\n\n  // Finally, if it is a 24 hour clock, need to check if the point is actually\n  // selecting hours 13 - 24 (0).\n  if (!minutes && !hour12) {\n    var isInCircle = isPointInCircle(0, 0, innerRadius, x, y);\n\n    if (time === 0 && !isInCircle || time !== 0 && isInCircle) {\n      time += 12;\n    }\n  }\n\n  return time;\n}"]},"metadata":{},"sourceType":"module"}