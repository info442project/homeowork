{"ast":null,"code":"/** @module utils/EventUtils/captureNextEvent */\n\n/**\n * This function will capture the next event and stop propagation during the\n * bubbling cycle of events. This is really only useful if you want to stop\n * the default behavior of chained events.\n *\n * @param {String} type - The event type to capture.\n * @param {Object|func=} target - Either the DOM node to target, a callback function\n *      to call once the event has been captured, or undefined. If this is undefined,\n *      the event will be captured on the window.\n * @param {func=} callback - An optional callback function to call once the event\n *      has been captured.\n */\nexport default function captureNextEvent(type, target, callback) {\n  var el = typeof target !== 'function' && target ? target : window;\n  var cb = typeof target === 'function' ? target : callback;\n\n  var capture = function capture(e) {\n    e.stopPropagation();\n\n    if (cb) {\n      cb(e);\n    }\n\n    el.removeEventListener(type, capture, true);\n  };\n\n  el.addEventListener(type, capture, true);\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/EventUtils/captureNextEvent.js"],"names":["captureNextEvent","type","target","callback","el","window","cb","capture","e","stopPropagation","removeEventListener","addEventListener"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;AAYA,eAAe,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,QAAxC,EAAkD;AAC/D,MAAIC,EAAE,GAAG,OAAOF,MAAP,KAAkB,UAAlB,IAAgCA,MAAhC,GAAyCA,MAAzC,GAAkDG,MAA3D;AACA,MAAIC,EAAE,GAAG,OAAOJ,MAAP,KAAkB,UAAlB,GAA+BA,MAA/B,GAAwCC,QAAjD;;AAEA,MAAII,OAAO,GAAG,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AAChCA,IAAAA,CAAC,CAACC,eAAF;;AACA,QAAIH,EAAJ,EAAQ;AACNA,MAAAA,EAAE,CAACE,CAAD,CAAF;AACD;;AAEDJ,IAAAA,EAAE,CAACM,mBAAH,CAAuBT,IAAvB,EAA6BM,OAA7B,EAAsC,IAAtC;AACD,GAPD;;AASAH,EAAAA,EAAE,CAACO,gBAAH,CAAoBV,IAApB,EAA0BM,OAA1B,EAAmC,IAAnC;AACD","sourcesContent":["/** @module utils/EventUtils/captureNextEvent */\n\n/**\n * This function will capture the next event and stop propagation during the\n * bubbling cycle of events. This is really only useful if you want to stop\n * the default behavior of chained events.\n *\n * @param {String} type - The event type to capture.\n * @param {Object|func=} target - Either the DOM node to target, a callback function\n *      to call once the event has been captured, or undefined. If this is undefined,\n *      the event will be captured on the window.\n * @param {func=} callback - An optional callback function to call once the event\n *      has been captured.\n */\nexport default function captureNextEvent(type, target, callback) {\n  var el = typeof target !== 'function' && target ? target : window;\n  var cb = typeof target === 'function' ? target : callback;\n\n  var capture = function capture(e) {\n    e.stopPropagation();\n    if (cb) {\n      cb(e);\n    }\n\n    el.removeEventListener(type, capture, true);\n  };\n\n  el.addEventListener(type, capture, true);\n}"]},"metadata":{},"sourceType":"module"}