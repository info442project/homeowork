{"ast":null,"code":"/** @module utils/EventUtils/handleKeyboardAccessibility */\nimport { SPACE, ENTER } from '../../constants/keyCodes';\nimport closest from '../closest';\nimport isFormPartRole from '../isFormPartRole';\n/**\n * A utility function for adding keyboard accessibility to elements that are not a natively\n * clickable (div, span, etc). When the space or enter key is pressed while focusing the\n * element, different flows will happen.\n *\n * - space - The click event will be triggered and the default page scrolling behavior of the\n *      spacebar will be prevented\n * - enter - If the element has a form role ('checkbox' or 'radio'), the click event will not\n *      be triggered. Instead, it will find out if the element is inside a form. If it is, it\n *      will emulate the default behavior of attempting to submit the form. If the element does\n *      not have a form role, the click event will be triggered.\n *\n * @param {Event} e - the keydown event\n * @param {function} onClick - the on click event to be triggered if space or enter was pressed\n * @param {boolean=true} listenToEnter - boolean if the enter key should be used to trigger the\n *      the click event. Even if this is true, the click event will not be triggered if the role\n *      is for a form role.\n * @param {boolean=true} listenToSpace - boolean if the space key should be used to trigger the\n *      click event.\n * @return {Boolean} true if the enter or space keys were pressed while their listener is also active.\n */\n\nexport default function handleKeyboardAccessibility(e, onClick) {\n  var listenToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var listenToSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var key = e.which || e.keyCode;\n  var space = listenToSpace && key === SPACE;\n  var enter = key === ENTER;\n  var tagName = e.target.tagName; // it is valid to press space in text fields, contenteditable, and buttons\n\n  if (space && !tagName.match(/input|textarea|button/i) && e.target.getAttribute('contenteditable') !== 'true') {\n    // Stop page scrolling\n    e.preventDefault();\n  }\n\n  if (enter && isFormPartRole(e.target)) {\n    var form = closest(e.target, 'form');\n    var submit = form ? form.querySelector('*[type=\"submit\"]') : null;\n\n    if (submit) {\n      submit.click();\n    }\n\n    return true;\n  }\n\n  if (enter && listenToEnter || space) {\n    onClick(e);\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/EventUtils/handleKeyboardAccessibility.js"],"names":["SPACE","ENTER","closest","isFormPartRole","handleKeyboardAccessibility","e","onClick","listenToEnter","arguments","length","undefined","listenToSpace","key","which","keyCode","space","enter","tagName","target","match","getAttribute","preventDefault","form","submit","querySelector","click"],"mappings":"AAAA;AAEA,SAASA,KAAT,EAAgBC,KAAhB,QAA6B,0BAA7B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,eAAe,SAASC,2BAAT,CAAqCC,CAArC,EAAwCC,OAAxC,EAAiD;AAC9D,MAAIC,aAAa,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAxF;AACA,MAAIG,aAAa,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,IAAxF;AAEA,MAAII,GAAG,GAAGP,CAAC,CAACQ,KAAF,IAAWR,CAAC,CAACS,OAAvB;AACA,MAAIC,KAAK,GAAGJ,aAAa,IAAIC,GAAG,KAAKZ,KAArC;AACA,MAAIgB,KAAK,GAAGJ,GAAG,KAAKX,KAApB;AAEA,MAAIgB,OAAO,GAAGZ,CAAC,CAACa,MAAF,CAASD,OAAvB,CAR8D,CAS9D;;AAEA,MAAIF,KAAK,IAAI,CAACE,OAAO,CAACE,KAAR,CAAc,wBAAd,CAAV,IAAqDd,CAAC,CAACa,MAAF,CAASE,YAAT,CAAsB,iBAAtB,MAA6C,MAAtG,EAA8G;AAC5G;AACAf,IAAAA,CAAC,CAACgB,cAAF;AACD;;AAED,MAAIL,KAAK,IAAIb,cAAc,CAACE,CAAC,CAACa,MAAH,CAA3B,EAAuC;AACrC,QAAII,IAAI,GAAGpB,OAAO,CAACG,CAAC,CAACa,MAAH,EAAW,MAAX,CAAlB;AACA,QAAIK,MAAM,GAAGD,IAAI,GAAGA,IAAI,CAACE,aAAL,CAAmB,kBAAnB,CAAH,GAA4C,IAA7D;;AACA,QAAID,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAED,MAAIT,KAAK,IAAIT,aAAT,IAA0BQ,KAA9B,EAAqC;AACnCT,IAAAA,OAAO,CAACD,CAAD,CAAP;AAEA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["/** @module utils/EventUtils/handleKeyboardAccessibility */\n\nimport { SPACE, ENTER } from '../../constants/keyCodes';\nimport closest from '../closest';\nimport isFormPartRole from '../isFormPartRole';\n\n/**\n * A utility function for adding keyboard accessibility to elements that are not a natively\n * clickable (div, span, etc). When the space or enter key is pressed while focusing the\n * element, different flows will happen.\n *\n * - space - The click event will be triggered and the default page scrolling behavior of the\n *      spacebar will be prevented\n * - enter - If the element has a form role ('checkbox' or 'radio'), the click event will not\n *      be triggered. Instead, it will find out if the element is inside a form. If it is, it\n *      will emulate the default behavior of attempting to submit the form. If the element does\n *      not have a form role, the click event will be triggered.\n *\n * @param {Event} e - the keydown event\n * @param {function} onClick - the on click event to be triggered if space or enter was pressed\n * @param {boolean=true} listenToEnter - boolean if the enter key should be used to trigger the\n *      the click event. Even if this is true, the click event will not be triggered if the role\n *      is for a form role.\n * @param {boolean=true} listenToSpace - boolean if the space key should be used to trigger the\n *      click event.\n * @return {Boolean} true if the enter or space keys were pressed while their listener is also active.\n */\nexport default function handleKeyboardAccessibility(e, onClick) {\n  var listenToEnter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var listenToSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  var key = e.which || e.keyCode;\n  var space = listenToSpace && key === SPACE;\n  var enter = key === ENTER;\n\n  var tagName = e.target.tagName;\n  // it is valid to press space in text fields, contenteditable, and buttons\n\n  if (space && !tagName.match(/input|textarea|button/i) && e.target.getAttribute('contenteditable') !== 'true') {\n    // Stop page scrolling\n    e.preventDefault();\n  }\n\n  if (enter && isFormPartRole(e.target)) {\n    var form = closest(e.target, 'form');\n    var submit = form ? form.querySelector('*[type=\"submit\"]') : null;\n    if (submit) {\n      submit.click();\n    }\n\n    return true;\n  }\n\n  if (enter && listenToEnter || space) {\n    onClick(e);\n\n    return true;\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"module"}