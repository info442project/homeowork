{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport TooltipContainer from './TooltipContainer';\n/**\n * Adds a tooltip for a component/element given as the only child.\n *\n * The component should render its children, or the tooltip will not be shown.\n * Also the component should be positioned by `className` or `style`\n * (CSS property `position` should have value `relative`, `absolute` or `fixed`),\n * or the tooltip can appear incorrectly.\n * Use `setPosition={true}` to automatically add `position: 'relative'` to the `style` of the wrapped component.\n *\n * Besides of `children` and `setPosition` all props set for `Tooltipped` component are passed through\n * to `TooltipContainer` that is added as a child of the wrapped component and controls the tooltip.\n *\n * ```js\n * <Tooltipped\n *   label=\"Tooltip for text\"\n *   position=\"left\"\n *   delay={1000}\n * >\n *   <span style={{position: 'absolute', top: '10px', left: '70%'}}>\n *     Some text\n *     <div>Another line of text</div>\n *   </span>\n * </Tooltipped>\n * ```\n *\n * ```js\n * <Tooltipped\n *   setPosition={true}\n *   label=\"Avatar's tooltip\"\n *   position=\"top\"\n * >\n *   <span style={{marginLeft: '30px'}}>\n *       <Avatar random>T</Avatar>\n *   </span>\n * </Tooltipped>\n * ```\n */\n\nexport default function Tooltipped(_ref) {\n  var children = _ref.children,\n      setPosition = _ref.setPosition,\n      props = _objectWithoutProperties(_ref, ['children', 'setPosition']);\n\n  var target = React.Children.only(children);\n  var targetProps = target.props;\n\n  if (props.label) {\n    var clonedProps = targetProps;\n\n    if (setPosition) {\n      clonedProps = _extends({}, clonedProps, {\n        style: _extends({}, clonedProps.style, {\n          position: 'relative'\n        })\n      });\n    }\n\n    target = React.cloneElement(target, clonedProps, [targetProps.children, React.createElement(TooltipContainer, _extends({\n      key: 'tooltipContainer'\n    }, props))]);\n  }\n\n  return target;\n}\nTooltipped.displayName = 'Tooltipped';\nTooltipped.propTypes = {\n  /**\n   * A component/element the tooltip should be linked to.\n   */\n  children: PropTypes.element.isRequired,\n\n  /**\n   * Tooltip's content.\n   */\n  label: PropTypes.node,\n\n  /**\n   * Whether `position: relative` should be added to the `style` property of the wrapped component.\n   */\n  setPosition: PropTypes.bool\n};","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/Tooltips/Tooltipped.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","React","PropTypes","TooltipContainer","Tooltipped","_ref","children","setPosition","props","Children","only","targetProps","label","clonedProps","style","position","cloneElement","createElement","displayName","propTypes","element","isRequired","node","bool"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,SAASS,wBAAT,CAAkCC,GAAlC,EAAuCC,IAAvC,EAA6C;AAAE,MAAIX,MAAM,GAAG,EAAb;;AAAiB,OAAK,IAAIC,CAAT,IAAcS,GAAd,EAAmB;AAAE,QAAIC,IAAI,CAACC,OAAL,CAAaX,CAAb,KAAmB,CAAvB,EAA0B;AAAU,QAAI,CAACH,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCE,GAArC,EAA0CT,CAA1C,CAAL,EAAmD;AAAUD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYS,GAAG,CAACT,CAAD,CAAf;AAAqB;;AAAC,SAAOD,MAAP;AAAgB;;AAE5N,OAAOa,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,eAAe,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACvC,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;AAAA,MACIC,WAAW,GAAGF,IAAI,CAACE,WADvB;AAAA,MAEIC,KAAK,GAAGX,wBAAwB,CAACQ,IAAD,EAAO,CAAC,UAAD,EAAa,aAAb,CAAP,CAFpC;;AAIA,MAAIjB,MAAM,GAAGa,KAAK,CAACQ,QAAN,CAAeC,IAAf,CAAoBJ,QAApB,CAAb;AACA,MAAIK,WAAW,GAAGvB,MAAM,CAACoB,KAAzB;;AAEA,MAAIA,KAAK,CAACI,KAAV,EAAiB;AACf,QAAIC,WAAW,GAAGF,WAAlB;;AACA,QAAIJ,WAAJ,EAAiB;AACfM,MAAAA,WAAW,GAAG5B,QAAQ,CAAC,EAAD,EAAK4B,WAAL,EAAkB;AACtCC,QAAAA,KAAK,EAAE7B,QAAQ,CAAC,EAAD,EAAK4B,WAAW,CAACC,KAAjB,EAAwB;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAxB;AADuB,OAAlB,CAAtB;AAGD;;AAED3B,IAAAA,MAAM,GAAGa,KAAK,CAACe,YAAN,CAAmB5B,MAAnB,EAA2ByB,WAA3B,EAAwC,CAACF,WAAW,CAACL,QAAb,EAAuBL,KAAK,CAACgB,aAAN,CAAoBd,gBAApB,EAAsClB,QAAQ,CAAC;AAAEQ,MAAAA,GAAG,EAAE;AAAP,KAAD,EAA8Be,KAA9B,CAA9C,CAAvB,CAAxC,CAAT;AACD;;AAED,SAAOpB,MAAP;AACD;AAEDgB,UAAU,CAACc,WAAX,GAAyB,YAAzB;AAEAd,UAAU,CAACe,SAAX,GAAuB;AACrB;;;AAGAb,EAAAA,QAAQ,EAAEJ,SAAS,CAACkB,OAAV,CAAkBC,UAJP;;AAKrB;;;AAGAT,EAAAA,KAAK,EAAEV,SAAS,CAACoB,IARI;;AASrB;;;AAGAf,EAAAA,WAAW,EAAEL,SAAS,CAACqB;AAZF,CAAvB","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TooltipContainer from './TooltipContainer';\n\n/**\n * Adds a tooltip for a component/element given as the only child.\n *\n * The component should render its children, or the tooltip will not be shown.\n * Also the component should be positioned by `className` or `style`\n * (CSS property `position` should have value `relative`, `absolute` or `fixed`),\n * or the tooltip can appear incorrectly.\n * Use `setPosition={true}` to automatically add `position: 'relative'` to the `style` of the wrapped component.\n *\n * Besides of `children` and `setPosition` all props set for `Tooltipped` component are passed through\n * to `TooltipContainer` that is added as a child of the wrapped component and controls the tooltip.\n *\n * ```js\n * <Tooltipped\n *   label=\"Tooltip for text\"\n *   position=\"left\"\n *   delay={1000}\n * >\n *   <span style={{position: 'absolute', top: '10px', left: '70%'}}>\n *     Some text\n *     <div>Another line of text</div>\n *   </span>\n * </Tooltipped>\n * ```\n *\n * ```js\n * <Tooltipped\n *   setPosition={true}\n *   label=\"Avatar's tooltip\"\n *   position=\"top\"\n * >\n *   <span style={{marginLeft: '30px'}}>\n *       <Avatar random>T</Avatar>\n *   </span>\n * </Tooltipped>\n * ```\n */\nexport default function Tooltipped(_ref) {\n  var children = _ref.children,\n      setPosition = _ref.setPosition,\n      props = _objectWithoutProperties(_ref, ['children', 'setPosition']);\n\n  var target = React.Children.only(children);\n  var targetProps = target.props;\n\n  if (props.label) {\n    var clonedProps = targetProps;\n    if (setPosition) {\n      clonedProps = _extends({}, clonedProps, {\n        style: _extends({}, clonedProps.style, { position: 'relative' })\n      });\n    }\n\n    target = React.cloneElement(target, clonedProps, [targetProps.children, React.createElement(TooltipContainer, _extends({ key: 'tooltipContainer' }, props))]);\n  }\n\n  return target;\n}\n\nTooltipped.displayName = 'Tooltipped';\n\nTooltipped.propTypes = {\n  /**\n   * A component/element the tooltip should be linked to.\n   */\n  children: PropTypes.element.isRequired,\n  /**\n   * Tooltip's content.\n   */\n  label: PropTypes.node,\n  /**\n   * Whether `position: relative` should be added to the `style` property of the wrapped component.\n   */\n  setPosition: PropTypes.bool\n};"]},"metadata":{},"sourceType":"module"}