{"ast":null,"code":"/** @module utils/toggleScroll */\nimport getPagePosition from './Positioning/getPagePosition';\n/**\n * A utility function for toggling the overflow visibility on an element. This will either target\n * the given `selector`, or the `body` tag to set a `className`.\n *\n * If the `visible` param is `undefined`, the className will be toggled.\n * If the `visible` param is `true`, the className will be added.\n * If the `visible` param is `false`, the className will be removed.\n *\n *\n * > This depends on the `classList` attribute on elements.\n *\n * @param {bool=} visible - An optional boolean to determine how the `className` will be applied.\n * @param {string|Object=} selector - An optional query selector string to use to select an element.\n * @param {string=} className - The className to apply. Defaults to 'md-overflow-hidden'\n */\n\nexport default function toggleScroll(scrollable, selector) {\n  var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'md-no-scroll';\n  var queryable = !selector || typeof selector === 'string';\n  var el = void 0;\n\n  if (queryable) {\n    el = selector ? document.querySelector(selector) : document.querySelector('html');\n  } else {\n    el = selector;\n  }\n\n  if (!el) {\n    return;\n  }\n\n  if (typeof scrollable === 'undefined') {\n    scrollable = !el.classList.contains(className);\n  }\n\n  if (scrollable && !el.classList.contains(className)) {\n    el.style.top = '-' + (queryable ? getPagePosition('y') : el.scrollTop) + 'px';\n    el.classList.add(className);\n  } else if (!scrollable && el.classList.contains(className)) {\n    var scrollTop = Math.abs(parseInt(el.style.top, 10));\n    el.classList.remove(className);\n    el.style.top = null;\n\n    if (!selector) {\n      window.scrollTo(0, scrollTop);\n    } else {\n      el.scrollTop = scrollTop;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/toggleScroll.js"],"names":["getPagePosition","toggleScroll","scrollable","selector","className","arguments","length","undefined","queryable","el","document","querySelector","classList","contains","style","top","scrollTop","add","Math","abs","parseInt","remove","window","scrollTo"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,+BAA5B;AAEA;;;;;;;;;;;;;;;;AAeA,eAAe,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,QAAlC,EAA4C;AACzD,MAAIC,SAAS,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,cAApF;AAEA,MAAIG,SAAS,GAAG,CAACL,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAAjD;AACA,MAAIM,EAAE,GAAG,KAAK,CAAd;;AACA,MAAID,SAAJ,EAAe;AACbC,IAAAA,EAAE,GAAGN,QAAQ,GAAGO,QAAQ,CAACC,aAAT,CAAuBR,QAAvB,CAAH,GAAsCO,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAnD;AACD,GAFD,MAEO;AACLF,IAAAA,EAAE,GAAGN,QAAL;AACD;;AAED,MAAI,CAACM,EAAL,EAAS;AACP;AACD;;AAED,MAAI,OAAOP,UAAP,KAAsB,WAA1B,EAAuC;AACrCA,IAAAA,UAAU,GAAG,CAACO,EAAE,CAACG,SAAH,CAAaC,QAAb,CAAsBT,SAAtB,CAAd;AACD;;AAED,MAAIF,UAAU,IAAI,CAACO,EAAE,CAACG,SAAH,CAAaC,QAAb,CAAsBT,SAAtB,CAAnB,EAAqD;AACnDK,IAAAA,EAAE,CAACK,KAAH,CAASC,GAAT,GAAe,OAAOP,SAAS,GAAGR,eAAe,CAAC,GAAD,CAAlB,GAA0BS,EAAE,CAACO,SAA7C,IAA0D,IAAzE;AACAP,IAAAA,EAAE,CAACG,SAAH,CAAaK,GAAb,CAAiBb,SAAjB;AACD,GAHD,MAGO,IAAI,CAACF,UAAD,IAAeO,EAAE,CAACG,SAAH,CAAaC,QAAb,CAAsBT,SAAtB,CAAnB,EAAqD;AAC1D,QAAIY,SAAS,GAAGE,IAAI,CAACC,GAAL,CAASC,QAAQ,CAACX,EAAE,CAACK,KAAH,CAASC,GAAV,EAAe,EAAf,CAAjB,CAAhB;AACAN,IAAAA,EAAE,CAACG,SAAH,CAAaS,MAAb,CAAoBjB,SAApB;AACAK,IAAAA,EAAE,CAACK,KAAH,CAASC,GAAT,GAAe,IAAf;;AAEA,QAAI,CAACZ,QAAL,EAAe;AACbmB,MAAAA,MAAM,CAACC,QAAP,CAAgB,CAAhB,EAAmBP,SAAnB;AACD,KAFD,MAEO;AACLP,MAAAA,EAAE,CAACO,SAAH,GAAeA,SAAf;AACD;AACF;AACF","sourcesContent":["/** @module utils/toggleScroll */\nimport getPagePosition from './Positioning/getPagePosition';\n\n/**\n * A utility function for toggling the overflow visibility on an element. This will either target\n * the given `selector`, or the `body` tag to set a `className`.\n *\n * If the `visible` param is `undefined`, the className will be toggled.\n * If the `visible` param is `true`, the className will be added.\n * If the `visible` param is `false`, the className will be removed.\n *\n *\n * > This depends on the `classList` attribute on elements.\n *\n * @param {bool=} visible - An optional boolean to determine how the `className` will be applied.\n * @param {string|Object=} selector - An optional query selector string to use to select an element.\n * @param {string=} className - The className to apply. Defaults to 'md-overflow-hidden'\n */\nexport default function toggleScroll(scrollable, selector) {\n  var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'md-no-scroll';\n\n  var queryable = !selector || typeof selector === 'string';\n  var el = void 0;\n  if (queryable) {\n    el = selector ? document.querySelector(selector) : document.querySelector('html');\n  } else {\n    el = selector;\n  }\n\n  if (!el) {\n    return;\n  }\n\n  if (typeof scrollable === 'undefined') {\n    scrollable = !el.classList.contains(className);\n  }\n\n  if (scrollable && !el.classList.contains(className)) {\n    el.style.top = '-' + (queryable ? getPagePosition('y') : el.scrollTop) + 'px';\n    el.classList.add(className);\n  } else if (!scrollable && el.classList.contains(className)) {\n    var scrollTop = Math.abs(parseInt(el.style.top, 10));\n    el.classList.remove(className);\n    el.style.top = null;\n\n    if (!selector) {\n      window.scrollTo(0, scrollTop);\n    } else {\n      el.scrollTop = scrollTop;\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}