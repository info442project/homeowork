{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\nimport isValued from '../utils/isValued';\nimport getField from '../utils/getField';\nimport getTextWidth from '../utils/Positioning/getTextWidth';\nimport controlled from '../utils/PropTypes/controlled';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport minNumber from '../utils/PropTypes/minNumber';\nimport addSuffix from '../utils/StringUtils/addSuffix';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport FloatingLabel from './FloatingLabel';\nimport TextFieldMessage from './TextFieldMessage';\nimport PasswordButton from './PasswordButton';\nimport InputField from './InputField';\nimport TextFieldDivider from './TextFieldDivider';\nvar DEFAULT_TEXT_FIELD_SIZE = 180;\nvar WILL_RECEIVE_KEYS = ['style', 'value', 'resize'];\nvar DID_UPDATE_KEYS = ['leftIcon', 'rightIcon', 'passwordIcon', 'inlineIndicator'];\n/**\n * The `TextField` component can either be a single line `input` field or a multiline\n * `textarea` field. `FontIcon`s, messages, and password indicators can also be added\n * to this field.\n *\n * The optional mouse and touch events will be added to the entire container while the\n * text specific events will be added to the `input` or `textarea` tags.\n */\n\nvar TextField = function (_PureComponent) {\n  _inherits(TextField, _PureComponent);\n\n  function TextField(props) {\n    _classCallCheck(this, TextField);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var currentLength = _this._getLength(typeof props.value !== 'undefined' ? props.value : props.defaultValue);\n\n    _this._canvas = null;\n    var width = null;\n\n    if (typeof props.resize !== 'undefined') {\n      width = typeof props.resize.min === 'number' ? props.resize.min : DEFAULT_TEXT_FIELD_SIZE;\n    }\n\n    _this.state = {\n      active: false,\n      error: props.maxLength ? props.maxLength < currentLength : false,\n      floating: isValued(props.defaultValue) || isValued(props.value),\n      passwordVisible: props.passwordInitiallyVisible,\n      currentLength: currentLength,\n      styles: width ? _extends({\n        width: width\n      }, props.style) : props.style\n    };\n    return _this;\n  }\n\n  TextField.prototype.componentDidMount = function componentDidMount() {\n    var _props = this.props,\n        value = _props.value,\n        defaultValue = _props.defaultValue,\n        resize = _props.resize,\n        style = _props.style;\n    var v = typeof value !== 'undefined' ? value : defaultValue;\n    /* eslint-disable react/no-did-mount-set-state */\n\n    if (resize) {\n      // always want to set width on mount\n      this.setState({\n        styles: _extends({\n          width: this._calcWidth(v, this.props)\n        }, style)\n      });\n    }\n  };\n\n  TextField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    var value = nextProps.value,\n        resize = nextProps.resize,\n        style = nextProps.style;\n    var nextState = {};\n\n    if (value !== this.props.value) {\n      nextState.error = this._isErrored(nextProps);\n      nextState.floating = this._focus || isValued(value);\n      nextState.currentLength = this._getLength(value);\n    }\n\n    if (WILL_RECEIVE_KEYS.some(function (key) {\n      return _this2.props[key] !== nextProps[key];\n    })) {\n      if (!resize) {\n        nextState.styles = style;\n      } else {\n        var width = this._calcWidth(value, nextProps);\n\n        nextState.styles = _extends({\n          width: width\n        }, style);\n      }\n    }\n\n    this.setState(nextState);\n  };\n\n  TextField.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this3 = this;\n\n    var _props2 = this.props,\n        resize = _props2.resize,\n        value = _props2.value,\n        style = _props2.style;\n\n    if (resize && DID_UPDATE_KEYS.some(function (key) {\n      return _this3.props[key] !== prevProps[key];\n    })) {\n      var width = this._calcWidth(value, this.props);\n\n      this.setState({\n        styles: _extends({\n          width: width\n        }, style)\n      }); // eslint-disable-line react/no-did-update-set-state\n    }\n  };\n  /**\n   * A helper function for getting the specific `input` field or the `textarea` in the `TextField`.\n   * This is accessible if you use `refs`.\n   *\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.getField(); // `input` node\n   * ```\n   */\n\n  /**\n   * A helper function for focusing the `input` field or the `textarea` in the `TextField`.\n   * This is accessibile if you use `refs`.\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.focus();\n   * ```\n   */\n\n  /**\n   * A helper function for blurring the `input` field or the `textarea` in the `TextField`.\n   * This is accessible if you use `refs`.\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.blur();\n   * ```\n   */\n\n\n  TextField.prototype.blur = function blur() {\n    this._field.blur();\n  };\n\n  TextField.prototype._cloneIcon = function _cloneIcon(icon, active, error, disabled, stateful, block, dir) {\n    if (!icon) {\n      return icon;\n    }\n\n    try {\n      var iconEl = Children.only(icon);\n      return cloneElement(iconEl, {\n        key: iconEl.key || 'icon-' + dir,\n        disabled: stateful ? disabled : undefined,\n        primary: stateful ? !error && active : undefined,\n        error: stateful ? error : undefined,\n        className: cn('md-text-field-icon', {\n          'md-text-field-icon--positioned': !block\n        }, iconEl.props.className)\n      });\n    } catch (e) {\n      return icon;\n    }\n  };\n  /**\n   * A small utility function for calculating an inline-icon's width keeping the SVG Icons\n   * in mind and any margin that gets applied for spacing.\n   */\n\n\n  TextField.prototype.render = function render() {\n    var _state = this.state,\n        currentLength = _state.currentLength,\n        passwordVisible = _state.passwordVisible,\n        styles = _state.styles;\n\n    var _props3 = this.props,\n        id = _props3.id,\n        type = _props3.type,\n        className = _props3.className,\n        inputStyle = _props3.inputStyle,\n        inputClassName = _props3.inputClassName,\n        block = _props3.block,\n        fullWidth = _props3.fullWidth,\n        required = _props3.required,\n        customSize = _props3.customSize,\n        maxLength = _props3.maxLength,\n        errorText = _props3.errorText,\n        helpText = _props3.helpText,\n        helpOnFocus = _props3.helpOnFocus,\n        disabled = _props3.disabled,\n        leftIconStateful = _props3.leftIconStateful,\n        rightIconStateful = _props3.rightIconStateful,\n        lineDirection = _props3.lineDirection,\n        paddedBlock = _props3.paddedBlock,\n        onDoubleClick = _props3.onDoubleClick,\n        onTouchStart = _props3.onTouchStart,\n        onTouchMove = _props3.onTouchMove,\n        onTouchCancel = _props3.onTouchCancel,\n        onTouchEnd = _props3.onTouchEnd,\n        onMouseDown = _props3.onMouseDown,\n        onMouseUp = _props3.onMouseUp,\n        onMouseOver = _props3.onMouseOver,\n        onMouseLeave = _props3.onMouseLeave,\n        ink = _props3.ink,\n        inlineIndicator = _props3.inlineIndicator,\n        toolbar = _props3.toolbar,\n        propPasswordIcon = _props3.passwordIcon,\n        icon = _props3.icon,\n        passwordIconChildren = _props3.passwordIconChildren,\n        passwordIconClassName = _props3.passwordIconClassName,\n        style = _props3.style,\n        propLabel = _props3.label,\n        propPlaceholder = _props3.placeholder,\n        propError = _props3.error,\n        propActive = _props3.active,\n        propFloating = _props3.floating,\n        propLeftIcon = _props3.leftIcon,\n        propRightIcon = _props3.rightIcon,\n        onClick = _props3.onClick,\n        onChange = _props3.onChange,\n        onBlur = _props3.onBlur,\n        onFocus = _props3.onFocus,\n        resize = _props3.resize,\n        adjustMinWidth = _props3.adjustMinWidth,\n        propFloatingLabel = _props3.floatingLabel,\n        props = _objectWithoutProperties(_props3, ['id', 'type', 'className', 'inputStyle', 'inputClassName', 'block', 'fullWidth', 'required', 'customSize', 'maxLength', 'errorText', 'helpText', 'helpOnFocus', 'disabled', 'leftIconStateful', 'rightIconStateful', 'lineDirection', 'paddedBlock', 'onDoubleClick', 'onTouchStart', 'onTouchMove', 'onTouchCancel', 'onTouchEnd', 'onMouseDown', 'onMouseUp', 'onMouseOver', 'onMouseLeave', 'ink', 'inlineIndicator', 'toolbar', 'passwordIcon', 'icon', 'passwordIconChildren', 'passwordIconClassName', 'style', 'label', 'placeholder', 'error', 'active', 'floating', 'leftIcon', 'rightIcon', 'onClick', 'onChange', 'onBlur', 'onFocus', 'resize', 'adjustMinWidth', 'floatingLabel']);\n\n    var _props4 = this.props,\n        label = _props4.label,\n        placeholder = _props4.placeholder,\n        error = _props4.error,\n        active = _props4.active,\n        floating = _props4.floating,\n        leftIcon = _props4.leftIcon,\n        rightIcon = _props4.rightIcon;\n    active = active || this.state.active;\n    error = error || this.state.error;\n    floating = floating || this.state.floating;\n\n    if (required) {\n      if (label) {\n        label = addSuffix(label, '*');\n      }\n\n      if (placeholder && !label) {\n        placeholder = addSuffix(placeholder, '*');\n      }\n    }\n\n    if (label && !floating) {\n      placeholder = null;\n    }\n\n    leftIcon = this._cloneIcon(icon || leftIcon, active, error, disabled, leftIconStateful, block, 'left');\n    var passwordIcon = getDeprecatedIcon(passwordIconClassName, passwordIconChildren, propPasswordIcon);\n\n    if (passwordIcon !== null && type === 'password' && !disabled) {\n      var passwordIconProp = passwordIcon;\n      var doubleIcon = false;\n\n      if (passwordIcon.invisible && passwordIcon.visible) {\n        passwordIconProp = passwordVisible ? passwordIcon.visible : passwordIcon.invisible;\n        doubleIcon = true;\n      }\n\n      rightIcon = React.createElement(PasswordButton, {\n        key: 'password-btn',\n        onClick: this._togglePasswordField,\n        active: active,\n        doubleIcon: doubleIcon,\n        passwordVisible: passwordVisible,\n        icon: passwordIconProp,\n        block: block,\n        floating: !!label\n      });\n    } else if (inlineIndicator) {\n      var el = Children.only(inlineIndicator);\n      rightIcon = cloneElement(inlineIndicator, {\n        key: 'icon-right',\n        className: cn('md-text-field-inline-indicator', {\n          'md-text-field-inline-indicator--floating': label,\n          'md-text-field-inline-indicator--block': block\n        }, el.props.className)\n      });\n    } else {\n      rightIcon = this._cloneIcon(rightIcon, active, error, disabled, rightIconStateful, block, 'right');\n    }\n\n    var rightIconed = !!rightIcon && type !== 'password' && !inlineIndicator;\n    var floatingLabel = React.createElement(FloatingLabel, {\n      key: 'label',\n      label: label,\n      htmlFor: id,\n      active: active,\n      error: error,\n      floating: floating,\n      customSize: customSize,\n      disabled: disabled,\n      iconOffset: !!leftIcon\n    });\n    var message = React.createElement(TextFieldMessage, {\n      key: 'message',\n      active: active,\n      error: error,\n      errorText: errorText,\n      helpText: helpText,\n      helpOnFocus: helpOnFocus,\n      block: block,\n      maxLength: maxLength,\n      leftIcon: !!leftIcon,\n      rightIcon: !!rightIcon,\n      currentLength: currentLength\n    });\n    var field = React.createElement(InputField, _extends({}, props, {\n      required: required,\n      key: 'field',\n      ref: this._setField,\n      id: id,\n      type: type,\n      label: label,\n      style: inputStyle,\n      className: cn({\n        'md-text-field--toolbar': toolbar\n      }, inputClassName),\n      disabled: disabled,\n      customSize: customSize,\n      fullWidth: fullWidth,\n      passwordVisible: passwordVisible,\n      placeholder: placeholder,\n      block: block,\n      onFocus: this._handleFocus,\n      onBlur: this._handleBlur,\n      onChange: this._handleChange,\n      inlineIndicator: !!inlineIndicator\n    }));\n    var divider = void 0;\n\n    if (!block) {\n      divider = React.createElement(TextFieldDivider, {\n        key: 'text-divider',\n        active: active,\n        error: error,\n        lineDirection: lineDirection\n      });\n    }\n\n    var children = void 0;\n\n    if (leftIcon || rightIconed) {\n      children = React.createElement('div', {\n        key: 'icon-divider',\n        className: 'md-text-field-icon-container'\n      }, leftIcon, React.createElement('div', {\n        key: 'divider-container',\n        className: cn('md-text-field-divider-container', {\n          'md-text-field-divider-container--grow': fullWidth\n        })\n      }, field, divider), rightIcon);\n    } else {\n      children = [leftIcon, field, divider, rightIcon];\n    }\n\n    children = [floatingLabel, children, message];\n    var multiline = typeof props.rows !== 'undefined';\n    return React.createElement('div', {\n      style: styles,\n      className: cn('md-text-field-container', {\n        'md-inline-block': !fullWidth && !block,\n        'md-full-width': block || fullWidth,\n        'md-text-field-container--disabled': disabled,\n        'md-text-field-container--input': !multiline,\n        'md-text-field-container--input-block': block && !multiline,\n        'md-text-field-container--multiline': multiline,\n        'md-text-field-container--multiline-block': multiline && block,\n        'md-text-field-container--padded-block': block && paddedBlock\n      }, className),\n      onClick: this._handleContainerClick,\n      onDoubleClick: onDoubleClick,\n      onMouseOver: onMouseOver,\n      onMouseLeave: onMouseLeave,\n      onMouseDown: onMouseDown,\n      onMouseUp: onMouseUp,\n      onTouchStart: onTouchStart,\n      onTouchEnd: onTouchEnd,\n      onTouchCancel: onTouchCancel,\n      onTouchMove: onTouchMove,\n      ref: this._setContainer\n    }, ink, children);\n  };\n\n  _createClass(TextField, [{\n    key: 'value',\n\n    /**\n     * Gets the current value from the text field. This is used when you have an uncontrolled\n     * text field and simply need the value from a ref callback.\n     *\n     * @return {String} the text field's value\n     */\n    get: function get() {\n      return this.getField().value;\n    }\n  }]);\n\n  return TextField;\n}(PureComponent);\n\nTextField.propTypes = {\n  /**\n   * The id for a text field. This is required when using the `label` prop for accessibility,\n   * but normally a good idea to include one anyways.\n   */\n  id: isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n\n  /**\n   * An optional style to apply to the text field's container.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the text field's container.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An optional style to apply to the `input` or `textarea` tag.\n   */\n  inputStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the `input` or `textarea` tag.\n   */\n  inputClassName: PropTypes.string,\n\n  /**\n   * An optional value to apply to the text field. This will make the component\n   * controlled and require the `onChange` prop.\n   */\n  value: controlled(PropTypes.oneOfType([PropTypes.string, PropTypes.number]), 'onChange'),\n\n  /**\n   * An optional default value for the text field.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Boolean if the text field should be displayed as a `block`. This is equivalent to\n   * the `full width` text field in the Material Design specs. This view will disable\n   * floating labels and remove the text divider from the component.\n   */\n  block: PropTypes.bool,\n\n  /**\n   * Boolean if the `block` text field should include padding to the left and right of\n   * the text field.\n   */\n  paddedBlock: PropTypes.bool,\n\n  /**\n   * Boolean if the text field is currently disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An optional label to display with the text field. This will convert the text field\n   * into a floating label text field. You can make it single line by only using the\n   * `placeholder` prop.\n   */\n  label: invalidIf(PropTypes.node, 'block'),\n\n  /**\n   * An optional placeholder text to display in the text field. If there is no `label` prop,\n   * the text field will be displayed as a single line text field. If there is a `label` prop,\n   * this will only be visible when there is no value and the user focused the text field.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The type for the text field. This is one of the most import props for mobile accessibility\n   * as it will update the keyboard for the text type. This does not get applied on multiline\n   * text fields.\n   */\n  type: PropTypes.oneOf(['text', 'number', 'email', 'search', 'tel', 'url', 'password']).isRequired,\n\n  /**\n   * An optional function to call when the text field's container triggers the `click` event.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `doubleclick`\n   * event.\n   */\n  onDoubleClick: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `touchstart`\n   * event.\n   */\n  onTouchStart: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `touchmove`\n   * event.\n   */\n  onTouchMove: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `touchcancel`\n   * event.\n   */\n  onTouchCancel: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `touchend`\n   * event.\n   */\n  onTouchEnd: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `mousedown`\n   * event.\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `mouseup`\n   * event.\n   */\n  onMouseUp: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `mouseover`\n   * event.\n   */\n  onMouseOver: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `mouseleave`\n   * event.\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * An optional onChange function to call. If the `value` prop is defined, this is\n   * required.\n   *\n   * When the value changes in the text field, this will be called with the new text\n   * field's value and the change event.\n   *\n   * ```js\n   * onChange(e.target.value, e);\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field is blurred.\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field is focused.\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * An optional boolean if the `active` state of the text field can be externally\n   * modified as well. The text field is usually considered active when it gains focus.\n   *\n   * If this prop is set, it will check both the active prop and the active state to\n   * determine if one is true.\n   */\n  active: PropTypes.bool,\n\n  /**\n   * An optional boolean if the `error` state of the text field can be externally\n   * modified as well. The text field is usually considered errored when it is required\n   * and there is no value or the current length of the text field's value is greater\n   * than the `maxLength` prop.\n   *\n   * If this prop is set, it will check both the error prop and the error state to\n   * determine if one is true.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * An optional boolean if the `floating` state of the text field's floating label can be\n   * externally modified as well. The floating state is true when the text field gains focus\n   * or there is a value in the text field.\n   *\n   * If this prop is set, it will check both the floating prop and the floating state to\n   * determine if one is true.\n   */\n  floating: PropTypes.bool,\n\n  /**\n   * Boolean if the text field is required. If the user blurs the text field while there is\n   * no value and it is required, the `error` state will be set to true.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The direction that the underline should appear from.\n   */\n  lineDirection: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\n\n  /**\n   * An optional icon to place to the left of the text field.\n   */\n  leftIcon: PropTypes.element,\n\n  /**\n   * Boolean if the left icon should be stateful. This means that the icon will\n   * gain the active or error colors with the text field.\n   */\n  leftIconStateful: PropTypes.bool,\n\n  /**\n   * An optional icon to place to the right of the text field.\n   */\n  rightIcon: PropTypes.element,\n\n  /**\n   * Boolean if the right icon should be stateful. This means that the icon will\n   * gain the active or error colors with the text field.\n   */\n  rightIconStateful: PropTypes.bool,\n\n  /**\n   * The icon to use for a password text field.\n   *\n   * Alternatively, two separate elements may be used to change between\n   * them based on the value of the `passwordVisible` state variable.\n   */\n  passwordIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.shape({\n    invisible: PropTypes.element,\n    visible: PropTypes.element\n  })]),\n\n  /**\n   * Boolean if the password is initially visible.\n   */\n  passwordInitiallyVisible: PropTypes.bool,\n\n  /**\n   * Boolean if the text field should be displayed as full width.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The number of rows for the `multiline` text field. This value must be greater than\n   * or equal to 1. When this value is set, the text field will be converted to a multiline\n   * field.\n   */\n  rows: minNumber(1, false),\n\n  /**\n   * The maximum number of rows for a `multiline` text field. If this value is\n   * `undefined`, `0`, or a number less than `0`, the multiline text field will\n   * infinitely expand.\n   */\n  maxRows: PropTypes.number,\n\n  /**\n   * An optional custom size to apply to the text field. This is used along with\n   * the `$md-text-field-custom-sizes` variable. It basically applies a className of\n   * `md-text-field--NAME`.\n   */\n  customSize: PropTypes.string,\n\n  /**\n   * An optional error text to display below the text field. This will only appear when\n   * the text field has the `error` state through the `error` prop, the current length\n   * of the text field's value is greater than the `maxLength` prop, or the field is\n   * required and the user blurs the text field with no value.\n   */\n  errorText: PropTypes.node,\n\n  /**\n   * An optional help text to display below the text field. This will always be visible\n   * unless the `helpOnFocus` prop is set to true. Otherwise it will appear on focus.\n   */\n  helpText: PropTypes.node,\n\n  /**\n   * Boolean if the help text should display on focus only.\n   */\n  helpOnFocus: PropTypes.bool,\n\n  /**\n   * An optional max length for the text field. This will insert a counter underneath the\n   * text field that appears on focus.\n   */\n  maxLength: PropTypes.number,\n\n  /**\n   * The ink when there is an injectInk above the text field. Used from the SelectField.\n   *\n   * @access private\n   */\n  ink: PropTypes.node,\n\n  /**\n   * An optional element to display inside of the `TextField` to the farthest right. This will\n   * position the indicator absolutely and add some additional padding to the `TextField`.\n   */\n  inlineIndicator: PropTypes.element,\n\n  /**\n   * This prop allows the text field to resize its width to stay between the min and max sizes provided. By\n   * default, the field will expand and collapse based on the amount of text provided. The collapsing can\n   * be disabled by providing `disableShrink` to the configuration object.\n   *\n   * If the `min` prop is not provided, it will default to `180` which is about the same size as a default\n   * text field.\n   */\n  resize: PropTypes.shape({\n    min: PropTypes.number,\n    max: PropTypes.number.isRequired,\n    disableShrink: PropTypes.bool\n  }),\n\n  /**\n   * Boolean if the TextField is in a toolbar and acting as a title. This will apply additional styles to the\n   * text field to make it look like the toolbar's title.\n   */\n  toolbar: PropTypes.bool,\n  passwordIconChildren: deprecated(PropTypes.node, 'Use the `passwordIcon` prop instead'),\n  passwordIconClassName: deprecated(PropTypes.string, 'Use the `passwordIcon` prop instead'),\n  icon: deprecated(PropTypes.node, 'Use the `leftIcon` or `rightIcon` prop instead'),\n  floatingLabel: deprecated(PropTypes.bool, 'The `label` prop is now always floating. To create a non-floating text field, only use the `placeholder` prop'),\n  adjustMinWidth: deprecated(PropTypes.bool, 'Manually add a min width style instead')\n};\nTextField.defaultProps = {\n  type: 'text',\n  lineDirection: 'left',\n  passwordIcon: React.createElement(FontIcon, null, 'remove_red_eye'),\n  leftIconStateful: true,\n  rightIconStateful: true,\n  fullWidth: true\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.getField = function () {\n    return _this4._field.getField();\n  };\n\n  this.focus = function () {\n    _this4._field.focus();\n  };\n\n  this._getLength = function (v) {\n    if (isValued(v)) {\n      return String(v).length;\n    }\n\n    return 0;\n  };\n\n  this._setContainer = function (div) {\n    _this4._container = div;\n  };\n\n  this._setField = function (field) {\n    if (field !== null) {\n      _this4._field = field;\n    }\n  };\n\n  this._calcIconWidth = function (icon) {\n    var style = window.getComputedStyle(icon);\n    return icon.getBoundingClientRect().width + parseInt(style.marginLeft, 10);\n  };\n\n  this._calcWidth = function (value) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this4.props;\n    var text = value; // if it is a password, use the bullet unicode instead\n\n    if (props.type === 'password') {\n      text = Array.from(Array(value.length)).reduce(function (s) {\n        return s + '\\u2022';\n      }, '');\n    }\n\n    var field = _this4._field && _this4._field.getField();\n\n    if (!isValued(text) && field) {\n      text = field.value;\n    }\n\n    var min = getField(props.resize, {\n      min: DEFAULT_TEXT_FIELD_SIZE\n    }, 'min');\n    var width = getTextWidth(text, field);\n\n    if (width === null || !field) {\n      // some error happened, don't do other logic\n      return width || min;\n    }\n\n    var max = props.resize.max;\n\n    if (_this4._container) {\n      var indicator = _this4._container.querySelector('.md-text-field-inline-indicator');\n\n      if (indicator) {\n        width += indicator.getBoundingClientRect().width;\n      }\n\n      var iconContainer = _this4._container.querySelector('.md-text-field-icon-container');\n\n      if (iconContainer) {\n        // There is conditionally an icon before and after the text field, or only an icon before/after\n        var _iconContainer$childr = iconContainer.children,\n            first = _iconContainer$childr[0],\n            second = _iconContainer$childr[1],\n            third = _iconContainer$childr[2];\n\n        if (first.classList.contains('md-icon')) {\n          width += first.getBoundingClientRect().width;\n          width += parseInt(window.getComputedStyle(second).marginLeft, 10);\n\n          if (third) {\n            width += _this4._calcIconWidth(third);\n          }\n        } else if (second) {\n          width += _this4._calcIconWidth(second);\n        }\n      }\n    }\n\n    return Math.ceil(Math.min(max, Math.max(min, width)));\n  };\n\n  this._isErrored = function () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this4.props,\n        value = _ref.value,\n        maxLength = _ref.maxLength,\n        required = _ref.required;\n\n    var error = _this4.state.error;\n\n    var currentLength = _this4._getLength(value);\n\n    if (required && error) {\n      error = !isValued(value);\n    }\n\n    if (maxLength) {\n      error = error || currentLength > maxLength;\n    }\n\n    return error;\n  };\n\n  this._handleContainerClick = function (e) {\n    if (_this4.props.onClick) {\n      _this4.props.onClick(e);\n    }\n\n    if (!_this4.props.disabled) {\n      _this4.focus();\n    }\n  };\n\n  this._handleBlur = function (e) {\n    _this4._focus = false;\n    var _props5 = _this4.props,\n        required = _props5.required,\n        maxLength = _props5.maxLength,\n        onBlur = _props5.onBlur;\n\n    if (onBlur) {\n      onBlur(e);\n    }\n\n    var value = e.target.value;\n    var state = {\n      active: false,\n      error: required && !isValued(value) || maxLength && String(value).length > maxLength\n    };\n\n    if (!_this4.props.block) {\n      state.floating = isValued(value);\n    }\n\n    _this4.setState(state);\n  };\n\n  this._handleFocus = function (e) {\n    _this4._focus = true;\n    var _props6 = _this4.props,\n        onFocus = _props6.onFocus,\n        block = _props6.block;\n\n    if (onFocus) {\n      onFocus(e);\n    }\n\n    var state = {\n      active: true\n    };\n\n    if (!block) {\n      state.floating = true;\n    }\n\n    _this4.setState(state);\n  };\n\n  this._handleChange = function (e) {\n    var _props7 = _this4.props,\n        onChange = _props7.onChange,\n        maxLength = _props7.maxLength,\n        required = _props7.required,\n        resize = _props7.resize;\n    var value = e.target.value;\n\n    if (onChange) {\n      onChange(e.target.value, e);\n    }\n\n    var currentLength = value.length;\n    var state = void 0;\n\n    if (typeof maxLength !== 'undefined') {\n      state = {\n        currentLength: currentLength,\n        error: currentLength > maxLength\n      };\n    } else if (required && _this4.state.error) {\n      state = {\n        error: !currentLength\n      };\n    }\n\n    if (typeof _this4.props.value === 'undefined' && resize) {\n      var width = _this4._calcWidth(value);\n\n      if (!resize.disableShrink || !_this4.state.styles || width > _this4.state.styles.width) {\n        state = state || {};\n        state.styles = _extends({}, _this4.state.styles, {\n          width: width\n        });\n      }\n    }\n\n    if (state) {\n      _this4.setState(state);\n    }\n  };\n\n  this._togglePasswordField = function () {\n    _this4.setState({\n      passwordVisible: !_this4.state.passwordVisible\n    }, _this4.focus);\n  };\n};\n\nexport default TextField;","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/TextFields/TextField.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","React","PureComponent","Children","cloneElement","PropTypes","cn","deprecated","isRequiredForA11y","isValued","getField","getTextWidth","controlled","invalidIf","minNumber","addSuffix","FontIcon","getDeprecatedIcon","FloatingLabel","TextFieldMessage","PasswordButton","InputField","TextFieldDivider","DEFAULT_TEXT_FIELD_SIZE","WILL_RECEIVE_KEYS","DID_UPDATE_KEYS","TextField","_PureComponent","_this","_initialiseProps","currentLength","_getLength","defaultValue","_canvas","width","resize","min","state","active","error","maxLength","floating","passwordVisible","passwordInitiallyVisible","styles","style","componentDidMount","_props","v","setState","_calcWidth","componentWillReceiveProps","nextProps","_this2","nextState","_isErrored","_focus","some","componentDidUpdate","prevProps","_this3","_props2","blur","_field","_cloneIcon","icon","disabled","stateful","block","dir","iconEl","only","undefined","primary","className","e","render","_state","_props3","id","type","inputStyle","inputClassName","fullWidth","required","customSize","errorText","helpText","helpOnFocus","leftIconStateful","rightIconStateful","lineDirection","paddedBlock","onDoubleClick","onTouchStart","onTouchMove","onTouchCancel","onTouchEnd","onMouseDown","onMouseUp","onMouseOver","onMouseLeave","ink","inlineIndicator","toolbar","propPasswordIcon","passwordIcon","passwordIconChildren","passwordIconClassName","propLabel","label","propPlaceholder","placeholder","propError","propActive","propFloating","propLeftIcon","leftIcon","propRightIcon","rightIcon","onClick","onChange","onBlur","onFocus","adjustMinWidth","propFloatingLabel","floatingLabel","_props4","passwordIconProp","doubleIcon","invisible","visible","createElement","_togglePasswordField","el","rightIconed","htmlFor","iconOffset","message","field","ref","_setField","_handleFocus","_handleBlur","_handleChange","divider","children","multiline","rows","_handleContainerClick","_setContainer","get","propTypes","oneOfType","number","string","object","bool","node","oneOf","isRequired","func","element","shape","maxRows","max","disableShrink","defaultProps","_this4","focus","String","div","_container","_calcIconWidth","window","getComputedStyle","getBoundingClientRect","parseInt","marginLeft","text","Array","from","reduce","s","indicator","querySelector","iconContainer","_iconContainer$childr","first","second","third","classList","contains","Math","ceil","_ref","_props5","_props6","_props7"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,IAAIS,YAAY,GAAG,YAAY;AAAE,WAASC,gBAAT,CAA0BV,MAA1B,EAAkCW,KAAlC,EAAyC;AAAE,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,KAAK,CAACR,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AAAE,UAAIW,UAAU,GAAGD,KAAK,CAACV,CAAD,CAAtB;AAA2BW,MAAAA,UAAU,CAACC,UAAX,GAAwBD,UAAU,CAACC,UAAX,IAAyB,KAAjD;AAAwDD,MAAAA,UAAU,CAACE,YAAX,GAA0B,IAA1B;AAAgC,UAAI,WAAWF,UAAf,EAA2BA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AAA4BjB,MAAAA,MAAM,CAACkB,cAAP,CAAsBhB,MAAtB,EAA8BY,UAAU,CAACP,GAAzC,EAA8CO,UAA9C;AAA4D;AAAE;;AAAC,SAAO,UAAUK,WAAV,EAAuBC,UAAvB,EAAmCC,WAAnC,EAAgD;AAAE,QAAID,UAAJ,EAAgBR,gBAAgB,CAACO,WAAW,CAACX,SAAb,EAAwBY,UAAxB,CAAhB;AAAqD,QAAIC,WAAJ,EAAiBT,gBAAgB,CAACO,WAAD,EAAcE,WAAd,CAAhB;AAA4C,WAAOF,WAAP;AAAqB,GAAhN;AAAmN,CAA9hB,EAAnB;;AAEA,SAASG,wBAAT,CAAkCC,GAAlC,EAAuCC,IAAvC,EAA6C;AAAE,MAAItB,MAAM,GAAG,EAAb;;AAAiB,OAAK,IAAIC,CAAT,IAAcoB,GAAd,EAAmB;AAAE,QAAIC,IAAI,CAACC,OAAL,CAAatB,CAAb,KAAmB,CAAvB,EAA0B;AAAU,QAAI,CAACH,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCa,GAArC,EAA0CpB,CAA1C,CAAL,EAAmD;AAAUD,IAAAA,MAAM,CAACC,CAAD,CAAN,GAAYoB,GAAG,CAACpB,CAAD,CAAf;AAAqB;;AAAC,SAAOD,MAAP;AAAgB;;AAE5N,SAASwB,eAAT,CAAyBC,QAAzB,EAAmCR,WAAnC,EAAgD;AAAE,MAAI,EAAEQ,QAAQ,YAAYR,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIS,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,0BAAT,CAAoCC,IAApC,EAA0CpB,IAA1C,EAAgD;AAAE,MAAI,CAACoB,IAAL,EAAW;AAAE,UAAM,IAAIC,cAAJ,CAAmB,2DAAnB,CAAN;AAAwF;;AAAC,SAAOrB,IAAI,KAAK,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAAjD,CAAJ,GAAmEA,IAAnE,GAA0EoB,IAAjF;AAAwF;;AAEhP,SAASE,SAAT,CAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAE,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAAE,UAAM,IAAIN,SAAJ,CAAc,6DAA6D,OAAOM,UAAlF,CAAN;AAAsG;;AAACD,EAAAA,QAAQ,CAACzB,SAAT,GAAqBR,MAAM,CAACmC,MAAP,CAAcD,UAAU,IAAIA,UAAU,CAAC1B,SAAvC,EAAkD;AAAE4B,IAAAA,WAAW,EAAE;AAAEC,MAAAA,KAAK,EAAEJ,QAAT;AAAmBlB,MAAAA,UAAU,EAAE,KAA/B;AAAsCE,MAAAA,QAAQ,EAAE,IAAhD;AAAsDD,MAAAA,YAAY,EAAE;AAApE;AAAf,GAAlD,CAArB;AAAqK,MAAIkB,UAAJ,EAAgBlC,MAAM,CAACsC,cAAP,GAAwBtC,MAAM,CAACsC,cAAP,CAAsBL,QAAtB,EAAgCC,UAAhC,CAAxB,GAAsED,QAAQ,CAACM,SAAT,GAAqBL,UAA3F;AAAwG;;AAE9e,OAAOM,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,YAAzC,QAA6D,OAA7D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,UAAP,MAAuB,iCAAvB;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,SAAP,MAAsB,gCAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,IAAIC,uBAAuB,GAAG,GAA9B;AAEA,IAAIC,iBAAiB,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,QAAnB,CAAxB;AACA,IAAIC,eAAe,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,cAA1B,EAA0C,iBAA1C,CAAtB;AAEA;;;;;;;;;AASA,IAAIC,SAAS,GAAG,UAAUC,cAAV,EAA0B;AACxClC,EAAAA,SAAS,CAACiC,SAAD,EAAYC,cAAZ,CAAT;;AAEA,WAASD,SAAT,CAAmBpD,KAAnB,EAA0B;AACxBa,IAAAA,eAAe,CAAC,IAAD,EAAOuC,SAAP,CAAf;;AAEA,QAAIE,KAAK,GAAGtC,0BAA0B,CAAC,IAAD,EAAOqC,cAAc,CAACxD,IAAf,CAAoB,IAApB,EAA0BG,KAA1B,CAAP,CAAtC;;AAEAuD,IAAAA,gBAAgB,CAAC1D,IAAjB,CAAsByD,KAAtB;;AAEA,QAAIE,aAAa,GAAGF,KAAK,CAACG,UAAN,CAAiB,OAAOzD,KAAK,CAACwB,KAAb,KAAuB,WAAvB,GAAqCxB,KAAK,CAACwB,KAA3C,GAAmDxB,KAAK,CAAC0D,YAA1E,CAApB;;AAEAJ,IAAAA,KAAK,CAACK,OAAN,GAAgB,IAAhB;AACA,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,OAAO5D,KAAK,CAAC6D,MAAb,KAAwB,WAA5B,EAAyC;AACvCD,MAAAA,KAAK,GAAG,OAAO5D,KAAK,CAAC6D,MAAN,CAAaC,GAApB,KAA4B,QAA5B,GAAuC9D,KAAK,CAAC6D,MAAN,CAAaC,GAApD,GAA0Db,uBAAlE;AACD;;AAEDK,IAAAA,KAAK,CAACS,KAAN,GAAc;AACZC,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,KAAK,EAAEjE,KAAK,CAACkE,SAAN,GAAkBlE,KAAK,CAACkE,SAAN,GAAkBV,aAApC,GAAoD,KAF/C;AAGZW,MAAAA,QAAQ,EAAEhC,QAAQ,CAACnC,KAAK,CAAC0D,YAAP,CAAR,IAAgCvB,QAAQ,CAACnC,KAAK,CAACwB,KAAP,CAHtC;AAIZ4C,MAAAA,eAAe,EAAEpE,KAAK,CAACqE,wBAJX;AAKZb,MAAAA,aAAa,EAAEA,aALH;AAMZc,MAAAA,MAAM,EAAEV,KAAK,GAAG1E,QAAQ,CAAC;AAAE0E,QAAAA,KAAK,EAAEA;AAAT,OAAD,EAAmB5D,KAAK,CAACuE,KAAzB,CAAX,GAA6CvE,KAAK,CAACuE;AANpD,KAAd;AAQA,WAAOjB,KAAP;AACD;;AAEDF,EAAAA,SAAS,CAACzD,SAAV,CAAoB6E,iBAApB,GAAwC,SAASA,iBAAT,GAA6B;AACnE,QAAIC,MAAM,GAAG,KAAKzE,KAAlB;AAAA,QACIwB,KAAK,GAAGiD,MAAM,CAACjD,KADnB;AAAA,QAEIkC,YAAY,GAAGe,MAAM,CAACf,YAF1B;AAAA,QAGIG,MAAM,GAAGY,MAAM,CAACZ,MAHpB;AAAA,QAIIU,KAAK,GAAGE,MAAM,CAACF,KAJnB;AAMA,QAAIG,CAAC,GAAG,OAAOlD,KAAP,KAAiB,WAAjB,GAA+BA,KAA/B,GAAuCkC,YAA/C;AACA;;AACA,QAAIG,MAAJ,EAAY;AACV;AACA,WAAKc,QAAL,CAAc;AAAEL,QAAAA,MAAM,EAAEpF,QAAQ,CAAC;AAAE0E,UAAAA,KAAK,EAAE,KAAKgB,UAAL,CAAgBF,CAAhB,EAAmB,KAAK1E,KAAxB;AAAT,SAAD,EAA4CuE,KAA5C;AAAlB,OAAd;AACD;AACF,GAbD;;AAeAnB,EAAAA,SAAS,CAACzD,SAAV,CAAoBkF,yBAApB,GAAgD,SAASA,yBAAT,CAAmCC,SAAnC,EAA8C;AAC5F,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAIvD,KAAK,GAAGsD,SAAS,CAACtD,KAAtB;AAAA,QACIqC,MAAM,GAAGiB,SAAS,CAACjB,MADvB;AAAA,QAEIU,KAAK,GAAGO,SAAS,CAACP,KAFtB;AAIA,QAAIS,SAAS,GAAG,EAAhB;;AACA,QAAIxD,KAAK,KAAK,KAAKxB,KAAL,CAAWwB,KAAzB,EAAgC;AAC9BwD,MAAAA,SAAS,CAACf,KAAV,GAAkB,KAAKgB,UAAL,CAAgBH,SAAhB,CAAlB;AACAE,MAAAA,SAAS,CAACb,QAAV,GAAqB,KAAKe,MAAL,IAAe/C,QAAQ,CAACX,KAAD,CAA5C;AACAwD,MAAAA,SAAS,CAACxB,aAAV,GAA0B,KAAKC,UAAL,CAAgBjC,KAAhB,CAA1B;AACD;;AAED,QAAI0B,iBAAiB,CAACiC,IAAlB,CAAuB,UAAUzF,GAAV,EAAe;AACxC,aAAOqF,MAAM,CAAC/E,KAAP,CAAaN,GAAb,MAAsBoF,SAAS,CAACpF,GAAD,CAAtC;AACD,KAFG,CAAJ,EAEI;AACF,UAAI,CAACmE,MAAL,EAAa;AACXmB,QAAAA,SAAS,CAACV,MAAV,GAAmBC,KAAnB;AACD,OAFD,MAEO;AACL,YAAIX,KAAK,GAAG,KAAKgB,UAAL,CAAgBpD,KAAhB,EAAuBsD,SAAvB,CAAZ;;AACAE,QAAAA,SAAS,CAACV,MAAV,GAAmBpF,QAAQ,CAAC;AAAE0E,UAAAA,KAAK,EAAEA;AAAT,SAAD,EAAmBW,KAAnB,CAA3B;AACD;AACF;;AAED,SAAKI,QAAL,CAAcK,SAAd;AACD,GA1BD;;AA4BA5B,EAAAA,SAAS,CAACzD,SAAV,CAAoByF,kBAApB,GAAyC,SAASA,kBAAT,CAA4BC,SAA5B,EAAuC;AAC9E,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAIC,OAAO,GAAG,KAAKvF,KAAnB;AAAA,QACI6D,MAAM,GAAG0B,OAAO,CAAC1B,MADrB;AAAA,QAEIrC,KAAK,GAAG+D,OAAO,CAAC/D,KAFpB;AAAA,QAGI+C,KAAK,GAAGgB,OAAO,CAAChB,KAHpB;;AAKA,QAAIV,MAAM,IAAIV,eAAe,CAACgC,IAAhB,CAAqB,UAAUzF,GAAV,EAAe;AAChD,aAAO4F,MAAM,CAACtF,KAAP,CAAaN,GAAb,MAAsB2F,SAAS,CAAC3F,GAAD,CAAtC;AACD,KAFa,CAAd,EAEI;AACF,UAAIkE,KAAK,GAAG,KAAKgB,UAAL,CAAgBpD,KAAhB,EAAuB,KAAKxB,KAA5B,CAAZ;;AACA,WAAK2E,QAAL,CAAc;AAAEL,QAAAA,MAAM,EAAEpF,QAAQ,CAAC;AAAE0E,UAAAA,KAAK,EAAEA;AAAT,SAAD,EAAmBW,KAAnB;AAAlB,OAAd,EAFE,CAE4D;AAC/D;AACF,GAdD;AAgBA;;;;;;;;;;;;;AAcA;;;;;;;;;;;;AAaA;;;;;;;;;;;;;AAWAnB,EAAAA,SAAS,CAACzD,SAAV,CAAoB6F,IAApB,GAA2B,SAASA,IAAT,GAAgB;AACzC,SAAKC,MAAL,CAAYD,IAAZ;AACD,GAFD;;AAIApC,EAAAA,SAAS,CAACzD,SAAV,CAAoB+F,UAApB,GAAiC,SAASA,UAAT,CAAoBC,IAApB,EAA0B3B,MAA1B,EAAkCC,KAAlC,EAAyC2B,QAAzC,EAAmDC,QAAnD,EAA6DC,KAA7D,EAAoEC,GAApE,EAAyE;AACxG,QAAI,CAACJ,IAAL,EAAW;AACT,aAAOA,IAAP;AACD;;AAED,QAAI;AACF,UAAIK,MAAM,GAAGnE,QAAQ,CAACoE,IAAT,CAAcN,IAAd,CAAb;AACA,aAAO7D,YAAY,CAACkE,MAAD,EAAS;AAC1BtG,QAAAA,GAAG,EAAEsG,MAAM,CAACtG,GAAP,IAAc,UAAUqG,GADH;AAE1BH,QAAAA,QAAQ,EAAEC,QAAQ,GAAGD,QAAH,GAAcM,SAFN;AAG1BC,QAAAA,OAAO,EAAEN,QAAQ,GAAG,CAAC5B,KAAD,IAAUD,MAAb,GAAsBkC,SAHb;AAI1BjC,QAAAA,KAAK,EAAE4B,QAAQ,GAAG5B,KAAH,GAAWiC,SAJA;AAK1BE,QAAAA,SAAS,EAAEpE,EAAE,CAAC,oBAAD,EAAuB;AAClC,4CAAkC,CAAC8D;AADD,SAAvB,EAEVE,MAAM,CAAChG,KAAP,CAAaoG,SAFH;AALa,OAAT,CAAnB;AASD,KAXD,CAWE,OAAOC,CAAP,EAAU;AACV,aAAOV,IAAP;AACD;AACF,GAnBD;AAqBA;;;;;;AAMAvC,EAAAA,SAAS,CAACzD,SAAV,CAAoB2G,MAApB,GAA6B,SAASA,MAAT,GAAkB;AAC7C,QAAIC,MAAM,GAAG,KAAKxC,KAAlB;AAAA,QACIP,aAAa,GAAG+C,MAAM,CAAC/C,aAD3B;AAAA,QAEIY,eAAe,GAAGmC,MAAM,CAACnC,eAF7B;AAAA,QAGIE,MAAM,GAAGiC,MAAM,CAACjC,MAHpB;;AAKA,QAAIkC,OAAO,GAAG,KAAKxG,KAAnB;AAAA,QACIyG,EAAE,GAAGD,OAAO,CAACC,EADjB;AAAA,QAEIC,IAAI,GAAGF,OAAO,CAACE,IAFnB;AAAA,QAGIN,SAAS,GAAGI,OAAO,CAACJ,SAHxB;AAAA,QAIIO,UAAU,GAAGH,OAAO,CAACG,UAJzB;AAAA,QAKIC,cAAc,GAAGJ,OAAO,CAACI,cAL7B;AAAA,QAMId,KAAK,GAAGU,OAAO,CAACV,KANpB;AAAA,QAOIe,SAAS,GAAGL,OAAO,CAACK,SAPxB;AAAA,QAQIC,QAAQ,GAAGN,OAAO,CAACM,QARvB;AAAA,QASIC,UAAU,GAAGP,OAAO,CAACO,UATzB;AAAA,QAUI7C,SAAS,GAAGsC,OAAO,CAACtC,SAVxB;AAAA,QAWI8C,SAAS,GAAGR,OAAO,CAACQ,SAXxB;AAAA,QAYIC,QAAQ,GAAGT,OAAO,CAACS,QAZvB;AAAA,QAaIC,WAAW,GAAGV,OAAO,CAACU,WAb1B;AAAA,QAcItB,QAAQ,GAAGY,OAAO,CAACZ,QAdvB;AAAA,QAeIuB,gBAAgB,GAAGX,OAAO,CAACW,gBAf/B;AAAA,QAgBIC,iBAAiB,GAAGZ,OAAO,CAACY,iBAhBhC;AAAA,QAiBIC,aAAa,GAAGb,OAAO,CAACa,aAjB5B;AAAA,QAkBIC,WAAW,GAAGd,OAAO,CAACc,WAlB1B;AAAA,QAmBIC,aAAa,GAAGf,OAAO,CAACe,aAnB5B;AAAA,QAoBIC,YAAY,GAAGhB,OAAO,CAACgB,YApB3B;AAAA,QAqBIC,WAAW,GAAGjB,OAAO,CAACiB,WArB1B;AAAA,QAsBIC,aAAa,GAAGlB,OAAO,CAACkB,aAtB5B;AAAA,QAuBIC,UAAU,GAAGnB,OAAO,CAACmB,UAvBzB;AAAA,QAwBIC,WAAW,GAAGpB,OAAO,CAACoB,WAxB1B;AAAA,QAyBIC,SAAS,GAAGrB,OAAO,CAACqB,SAzBxB;AAAA,QA0BIC,WAAW,GAAGtB,OAAO,CAACsB,WA1B1B;AAAA,QA2BIC,YAAY,GAAGvB,OAAO,CAACuB,YA3B3B;AAAA,QA4BIC,GAAG,GAAGxB,OAAO,CAACwB,GA5BlB;AAAA,QA6BIC,eAAe,GAAGzB,OAAO,CAACyB,eA7B9B;AAAA,QA8BIC,OAAO,GAAG1B,OAAO,CAAC0B,OA9BtB;AAAA,QA+BIC,gBAAgB,GAAG3B,OAAO,CAAC4B,YA/B/B;AAAA,QAgCIzC,IAAI,GAAGa,OAAO,CAACb,IAhCnB;AAAA,QAiCI0C,oBAAoB,GAAG7B,OAAO,CAAC6B,oBAjCnC;AAAA,QAkCIC,qBAAqB,GAAG9B,OAAO,CAAC8B,qBAlCpC;AAAA,QAmCI/D,KAAK,GAAGiC,OAAO,CAACjC,KAnCpB;AAAA,QAoCIgE,SAAS,GAAG/B,OAAO,CAACgC,KApCxB;AAAA,QAqCIC,eAAe,GAAGjC,OAAO,CAACkC,WArC9B;AAAA,QAsCIC,SAAS,GAAGnC,OAAO,CAACvC,KAtCxB;AAAA,QAuCI2E,UAAU,GAAGpC,OAAO,CAACxC,MAvCzB;AAAA,QAwCI6E,YAAY,GAAGrC,OAAO,CAACrC,QAxC3B;AAAA,QAyCI2E,YAAY,GAAGtC,OAAO,CAACuC,QAzC3B;AAAA,QA0CIC,aAAa,GAAGxC,OAAO,CAACyC,SA1C5B;AAAA,QA2CIC,OAAO,GAAG1C,OAAO,CAAC0C,OA3CtB;AAAA,QA4CIC,QAAQ,GAAG3C,OAAO,CAAC2C,QA5CvB;AAAA,QA6CIC,MAAM,GAAG5C,OAAO,CAAC4C,MA7CrB;AAAA,QA8CIC,OAAO,GAAG7C,OAAO,CAAC6C,OA9CtB;AAAA,QA+CIxF,MAAM,GAAG2C,OAAO,CAAC3C,MA/CrB;AAAA,QAgDIyF,cAAc,GAAG9C,OAAO,CAAC8C,cAhD7B;AAAA,QAiDIC,iBAAiB,GAAG/C,OAAO,CAACgD,aAjDhC;AAAA,QAkDIxJ,KAAK,GAAGS,wBAAwB,CAAC+F,OAAD,EAAU,CAAC,IAAD,EAAO,MAAP,EAAe,WAAf,EAA4B,YAA5B,EAA0C,gBAA1C,EAA4D,OAA5D,EAAqE,WAArE,EAAkF,UAAlF,EAA8F,YAA9F,EAA4G,WAA5G,EAAyH,WAAzH,EAAsI,UAAtI,EAAkJ,aAAlJ,EAAiK,UAAjK,EAA6K,kBAA7K,EAAiM,mBAAjM,EAAsN,eAAtN,EAAuO,aAAvO,EAAsP,eAAtP,EAAuQ,cAAvQ,EAAuR,aAAvR,EAAsS,eAAtS,EAAuT,YAAvT,EAAqU,aAArU,EAAoV,WAApV,EAAiW,aAAjW,EAAgX,cAAhX,EAAgY,KAAhY,EAAuY,iBAAvY,EAA0Z,SAA1Z,EAAqa,cAAra,EAAqb,MAArb,EAA6b,sBAA7b,EAAqd,uBAArd,EAA8e,OAA9e,EAAuf,OAAvf,EAAggB,aAAhgB,EAA+gB,OAA/gB,EAAwhB,QAAxhB,EAAkiB,UAAliB,EAA8iB,UAA9iB,EAA0jB,WAA1jB,EAAukB,SAAvkB,EAAklB,UAAllB,EAA8lB,QAA9lB,EAAwmB,SAAxmB,EAAmnB,QAAnnB,EAA6nB,gBAA7nB,EAA+oB,eAA/oB,CAAV,CAlDpC;;AAoDA,QAAIiD,OAAO,GAAG,KAAKzJ,KAAnB;AAAA,QACIwI,KAAK,GAAGiB,OAAO,CAACjB,KADpB;AAAA,QAEIE,WAAW,GAAGe,OAAO,CAACf,WAF1B;AAAA,QAGIzE,KAAK,GAAGwF,OAAO,CAACxF,KAHpB;AAAA,QAIID,MAAM,GAAGyF,OAAO,CAACzF,MAJrB;AAAA,QAKIG,QAAQ,GAAGsF,OAAO,CAACtF,QALvB;AAAA,QAMI4E,QAAQ,GAAGU,OAAO,CAACV,QANvB;AAAA,QAOIE,SAAS,GAAGQ,OAAO,CAACR,SAPxB;AASAjF,IAAAA,MAAM,GAAGA,MAAM,IAAI,KAAKD,KAAL,CAAWC,MAA9B;AACAC,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKF,KAAL,CAAWE,KAA5B;AACAE,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKJ,KAAL,CAAWI,QAAlC;;AAEA,QAAI2C,QAAJ,EAAc;AACZ,UAAI0B,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG/F,SAAS,CAAC+F,KAAD,EAAQ,GAAR,CAAjB;AACD;;AAED,UAAIE,WAAW,IAAI,CAACF,KAApB,EAA2B;AACzBE,QAAAA,WAAW,GAAGjG,SAAS,CAACiG,WAAD,EAAc,GAAd,CAAvB;AACD;AACF;;AAED,QAAIF,KAAK,IAAI,CAACrE,QAAd,EAAwB;AACtBuE,MAAAA,WAAW,GAAG,IAAd;AACD;;AAEDK,IAAAA,QAAQ,GAAG,KAAKrD,UAAL,CAAgBC,IAAI,IAAIoD,QAAxB,EAAkC/E,MAAlC,EAA0CC,KAA1C,EAAiD2B,QAAjD,EAA2DuB,gBAA3D,EAA6ErB,KAA7E,EAAoF,MAApF,CAAX;AACA,QAAIsC,YAAY,GAAGzF,iBAAiB,CAAC2F,qBAAD,EAAwBD,oBAAxB,EAA8CF,gBAA9C,CAApC;;AACA,QAAIC,YAAY,KAAK,IAAjB,IAAyB1B,IAAI,KAAK,UAAlC,IAAgD,CAACd,QAArD,EAA+D;AAC7D,UAAI8D,gBAAgB,GAAGtB,YAAvB;AACA,UAAIuB,UAAU,GAAG,KAAjB;;AACA,UAAIvB,YAAY,CAACwB,SAAb,IAA0BxB,YAAY,CAACyB,OAA3C,EAAoD;AAClDH,QAAAA,gBAAgB,GAAGtF,eAAe,GAAGgE,YAAY,CAACyB,OAAhB,GAA0BzB,YAAY,CAACwB,SAAzE;AACAD,QAAAA,UAAU,GAAG,IAAb;AACD;;AACDV,MAAAA,SAAS,GAAGtH,KAAK,CAACmI,aAAN,CAAoBhH,cAApB,EAAoC;AAC9CpD,QAAAA,GAAG,EAAE,cADyC;AAE9CwJ,QAAAA,OAAO,EAAE,KAAKa,oBAFgC;AAG9C/F,QAAAA,MAAM,EAAEA,MAHsC;AAI9C2F,QAAAA,UAAU,EAAEA,UAJkC;AAK9CvF,QAAAA,eAAe,EAAEA,eAL6B;AAM9CuB,QAAAA,IAAI,EAAE+D,gBANwC;AAO9C5D,QAAAA,KAAK,EAAEA,KAPuC;AAQ9C3B,QAAAA,QAAQ,EAAE,CAAC,CAACqE;AARkC,OAApC,CAAZ;AAUD,KAjBD,MAiBO,IAAIP,eAAJ,EAAqB;AAC1B,UAAI+B,EAAE,GAAGnI,QAAQ,CAACoE,IAAT,CAAcgC,eAAd,CAAT;AACAgB,MAAAA,SAAS,GAAGnH,YAAY,CAACmG,eAAD,EAAkB;AACxCvI,QAAAA,GAAG,EAAE,YADmC;AAExC0G,QAAAA,SAAS,EAAEpE,EAAE,CAAC,gCAAD,EAAmC;AAC9C,sDAA4CwG,KADE;AAE9C,mDAAyC1C;AAFK,SAAnC,EAGVkE,EAAE,CAAChK,KAAH,CAASoG,SAHC;AAF2B,OAAlB,CAAxB;AAOD,KATM,MASA;AACL6C,MAAAA,SAAS,GAAG,KAAKvD,UAAL,CAAgBuD,SAAhB,EAA2BjF,MAA3B,EAAmCC,KAAnC,EAA0C2B,QAA1C,EAAoDwB,iBAApD,EAAuEtB,KAAvE,EAA8E,OAA9E,CAAZ;AACD;;AACD,QAAImE,WAAW,GAAG,CAAC,CAAChB,SAAF,IAAevC,IAAI,KAAK,UAAxB,IAAsC,CAACuB,eAAzD;AAEA,QAAIuB,aAAa,GAAG7H,KAAK,CAACmI,aAAN,CAAoBlH,aAApB,EAAmC;AACrDlD,MAAAA,GAAG,EAAE,OADgD;AAErD8I,MAAAA,KAAK,EAAEA,KAF8C;AAGrD0B,MAAAA,OAAO,EAAEzD,EAH4C;AAIrDzC,MAAAA,MAAM,EAAEA,MAJ6C;AAKrDC,MAAAA,KAAK,EAAEA,KAL8C;AAMrDE,MAAAA,QAAQ,EAAEA,QAN2C;AAOrD4C,MAAAA,UAAU,EAAEA,UAPyC;AAQrDnB,MAAAA,QAAQ,EAAEA,QAR2C;AASrDuE,MAAAA,UAAU,EAAE,CAAC,CAACpB;AATuC,KAAnC,CAApB;AAYA,QAAIqB,OAAO,GAAGzI,KAAK,CAACmI,aAAN,CAAoBjH,gBAApB,EAAsC;AAClDnD,MAAAA,GAAG,EAAE,SAD6C;AAElDsE,MAAAA,MAAM,EAAEA,MAF0C;AAGlDC,MAAAA,KAAK,EAAEA,KAH2C;AAIlD+C,MAAAA,SAAS,EAAEA,SAJuC;AAKlDC,MAAAA,QAAQ,EAAEA,QALwC;AAMlDC,MAAAA,WAAW,EAAEA,WANqC;AAOlDpB,MAAAA,KAAK,EAAEA,KAP2C;AAQlD5B,MAAAA,SAAS,EAAEA,SARuC;AASlD6E,MAAAA,QAAQ,EAAE,CAAC,CAACA,QATsC;AAUlDE,MAAAA,SAAS,EAAE,CAAC,CAACA,SAVqC;AAWlDzF,MAAAA,aAAa,EAAEA;AAXmC,KAAtC,CAAd;AAcA,QAAI6G,KAAK,GAAG1I,KAAK,CAACmI,aAAN,CAAoB/G,UAApB,EAAgC7D,QAAQ,CAAC,EAAD,EAAKc,KAAL,EAAY;AAC9D8G,MAAAA,QAAQ,EAAEA,QADoD;AAE9DpH,MAAAA,GAAG,EAAE,OAFyD;AAG9D4K,MAAAA,GAAG,EAAE,KAAKC,SAHoD;AAI9D9D,MAAAA,EAAE,EAAEA,EAJ0D;AAK9DC,MAAAA,IAAI,EAAEA,IALwD;AAM9D8B,MAAAA,KAAK,EAAEA,KANuD;AAO9DjE,MAAAA,KAAK,EAAEoC,UAPuD;AAQ9DP,MAAAA,SAAS,EAAEpE,EAAE,CAAC;AAAE,kCAA0BkG;AAA5B,OAAD,EAAwCtB,cAAxC,CARiD;AAS9DhB,MAAAA,QAAQ,EAAEA,QAToD;AAU9DmB,MAAAA,UAAU,EAAEA,UAVkD;AAW9DF,MAAAA,SAAS,EAAEA,SAXmD;AAY9DzC,MAAAA,eAAe,EAAEA,eAZ6C;AAa9DsE,MAAAA,WAAW,EAAEA,WAbiD;AAc9D5C,MAAAA,KAAK,EAAEA,KAduD;AAe9DuD,MAAAA,OAAO,EAAE,KAAKmB,YAfgD;AAgB9DpB,MAAAA,MAAM,EAAE,KAAKqB,WAhBiD;AAiB9DtB,MAAAA,QAAQ,EAAE,KAAKuB,aAjB+C;AAkB9DzC,MAAAA,eAAe,EAAE,CAAC,CAACA;AAlB2C,KAAZ,CAAxC,CAAZ;AAqBA,QAAI0C,OAAO,GAAG,KAAK,CAAnB;;AACA,QAAI,CAAC7E,KAAL,EAAY;AACV6E,MAAAA,OAAO,GAAGhJ,KAAK,CAACmI,aAAN,CAAoB9G,gBAApB,EAAsC;AAC9CtD,QAAAA,GAAG,EAAE,cADyC;AAE9CsE,QAAAA,MAAM,EAAEA,MAFsC;AAG9CC,QAAAA,KAAK,EAAEA,KAHuC;AAI9CoD,QAAAA,aAAa,EAAEA;AAJ+B,OAAtC,CAAV;AAMD;;AAED,QAAIuD,QAAQ,GAAG,KAAK,CAApB;;AACA,QAAI7B,QAAQ,IAAIkB,WAAhB,EAA6B;AAC3BW,MAAAA,QAAQ,GAAGjJ,KAAK,CAACmI,aAAN,CACT,KADS,EAET;AAAEpK,QAAAA,GAAG,EAAE,cAAP;AAAuB0G,QAAAA,SAAS,EAAE;AAAlC,OAFS,EAGT2C,QAHS,EAITpH,KAAK,CAACmI,aAAN,CACE,KADF,EAEE;AACEpK,QAAAA,GAAG,EAAE,mBADP;AAEE0G,QAAAA,SAAS,EAAEpE,EAAE,CAAC,iCAAD,EAAoC;AAC/C,mDAAyC6E;AADM,SAApC;AAFf,OAFF,EAQEwD,KARF,EASEM,OATF,CAJS,EAeT1B,SAfS,CAAX;AAiBD,KAlBD,MAkBO;AACL2B,MAAAA,QAAQ,GAAG,CAAC7B,QAAD,EAAWsB,KAAX,EAAkBM,OAAlB,EAA2B1B,SAA3B,CAAX;AACD;;AAED2B,IAAAA,QAAQ,GAAG,CAACpB,aAAD,EAAgBoB,QAAhB,EAA0BR,OAA1B,CAAX;AAEA,QAAIS,SAAS,GAAG,OAAO7K,KAAK,CAAC8K,IAAb,KAAsB,WAAtC;AACA,WAAOnJ,KAAK,CAACmI,aAAN,CACL,KADK,EAEL;AACEvF,MAAAA,KAAK,EAAED,MADT;AAEE8B,MAAAA,SAAS,EAAEpE,EAAE,CAAC,yBAAD,EAA4B;AACvC,2BAAmB,CAAC6E,SAAD,IAAc,CAACf,KADK;AAEvC,yBAAiBA,KAAK,IAAIe,SAFa;AAGvC,6CAAqCjB,QAHE;AAIvC,0CAAkC,CAACiF,SAJI;AAKvC,gDAAwC/E,KAAK,IAAI,CAAC+E,SALX;AAMvC,8CAAsCA,SANC;AAOvC,oDAA4CA,SAAS,IAAI/E,KAPlB;AAQvC,iDAAyCA,KAAK,IAAIwB;AARX,OAA5B,EASVlB,SATU,CAFf;AAYE8C,MAAAA,OAAO,EAAE,KAAK6B,qBAZhB;AAaExD,MAAAA,aAAa,EAAEA,aAbjB;AAcEO,MAAAA,WAAW,EAAEA,WAdf;AAeEC,MAAAA,YAAY,EAAEA,YAfhB;AAgBEH,MAAAA,WAAW,EAAEA,WAhBf;AAiBEC,MAAAA,SAAS,EAAEA,SAjBb;AAkBEL,MAAAA,YAAY,EAAEA,YAlBhB;AAmBEG,MAAAA,UAAU,EAAEA,UAnBd;AAoBED,MAAAA,aAAa,EAAEA,aApBjB;AAqBED,MAAAA,WAAW,EAAEA,WArBf;AAsBE6C,MAAAA,GAAG,EAAE,KAAKU;AAtBZ,KAFK,EA0BLhD,GA1BK,EA2BL4C,QA3BK,CAAP;AA6BD,GAtOD;;AAwOA9K,EAAAA,YAAY,CAACsD,SAAD,EAAY,CAAC;AACvB1D,IAAAA,GAAG,EAAE,OADkB;;AAIvB;;;;;;AAMAuL,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,aAAO,KAAK7I,QAAL,GAAgBZ,KAAvB;AACD;AAZsB,GAAD,CAAZ,CAAZ;;AAeA,SAAO4B,SAAP;AACD,CArZe,CAqZdxB,aArZc,CAAhB;;AAuZAwB,SAAS,CAAC8H,SAAV,GAAsB;AACpB;;;;AAIAzE,EAAAA,EAAE,EAAEvE,iBAAiB,CAACH,SAAS,CAACoJ,SAAV,CAAoB,CAACpJ,SAAS,CAACqJ,MAAX,EAAmBrJ,SAAS,CAACsJ,MAA7B,CAApB,CAAD,CALD;;AAOpB;;;AAGA9G,EAAAA,KAAK,EAAExC,SAAS,CAACuJ,MAVG;;AAYpB;;;AAGAlF,EAAAA,SAAS,EAAErE,SAAS,CAACsJ,MAfD;;AAiBpB;;;AAGA1E,EAAAA,UAAU,EAAE5E,SAAS,CAACuJ,MApBF;;AAsBpB;;;AAGA1E,EAAAA,cAAc,EAAE7E,SAAS,CAACsJ,MAzBN;;AA2BpB;;;;AAIA7J,EAAAA,KAAK,EAAEc,UAAU,CAACP,SAAS,CAACoJ,SAAV,CAAoB,CAACpJ,SAAS,CAACsJ,MAAX,EAAmBtJ,SAAS,CAACqJ,MAA7B,CAApB,CAAD,EAA4D,UAA5D,CA/BG;;AAiCpB;;;AAGA1H,EAAAA,YAAY,EAAE3B,SAAS,CAACoJ,SAAV,CAAoB,CAACpJ,SAAS,CAACsJ,MAAX,EAAmBtJ,SAAS,CAACqJ,MAA7B,CAApB,CApCM;;AAsCpB;;;;;AAKAtF,EAAAA,KAAK,EAAE/D,SAAS,CAACwJ,IA3CG;;AA6CpB;;;;AAIAjE,EAAAA,WAAW,EAAEvF,SAAS,CAACwJ,IAjDH;;AAmDpB;;;AAGA3F,EAAAA,QAAQ,EAAE7D,SAAS,CAACwJ,IAtDA;;AAwDpB;;;;;AAKA/C,EAAAA,KAAK,EAAEjG,SAAS,CAACR,SAAS,CAACyJ,IAAX,EAAiB,OAAjB,CA7DI;;AA+DpB;;;;;AAKA9C,EAAAA,WAAW,EAAE3G,SAAS,CAACsJ,MApEH;;AAsEpB;;;;;AAKA3E,EAAAA,IAAI,EAAE3E,SAAS,CAAC0J,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC,KAAtC,EAA6C,KAA7C,EAAoD,UAApD,CAAhB,EAAiFC,UA3EnE;;AA6EpB;;;AAGAxC,EAAAA,OAAO,EAAEnH,SAAS,CAAC4J,IAhFC;;AAkFpB;;;;AAIApE,EAAAA,aAAa,EAAExF,SAAS,CAAC4J,IAtFL;;AAwFpB;;;;AAIAnE,EAAAA,YAAY,EAAEzF,SAAS,CAAC4J,IA5FJ;;AA8FpB;;;;AAIAlE,EAAAA,WAAW,EAAE1F,SAAS,CAAC4J,IAlGH;;AAoGpB;;;;AAIAjE,EAAAA,aAAa,EAAE3F,SAAS,CAAC4J,IAxGL;;AA0GpB;;;;AAIAhE,EAAAA,UAAU,EAAE5F,SAAS,CAAC4J,IA9GF;;AAgHpB;;;;AAIA/D,EAAAA,WAAW,EAAE7F,SAAS,CAAC4J,IApHH;;AAsHpB;;;;AAIA9D,EAAAA,SAAS,EAAE9F,SAAS,CAAC4J,IA1HD;;AA4HpB;;;;AAIA7D,EAAAA,WAAW,EAAE/F,SAAS,CAAC4J,IAhIH;;AAkIpB;;;;AAIA5D,EAAAA,YAAY,EAAEhG,SAAS,CAAC4J,IAtIJ;;AAwIpB;;;;;;;;;;;AAWAxC,EAAAA,QAAQ,EAAEpH,SAAS,CAAC4J,IAnJA;;AAqJpB;;;AAGAvC,EAAAA,MAAM,EAAErH,SAAS,CAAC4J,IAxJE;;AA0JpB;;;AAGAtC,EAAAA,OAAO,EAAEtH,SAAS,CAAC4J,IA7JC;;AA+JpB;;;;;;;AAOA3H,EAAAA,MAAM,EAAEjC,SAAS,CAACwJ,IAtKE;;AAwKpB;;;;;;;;;AASAtH,EAAAA,KAAK,EAAElC,SAAS,CAACwJ,IAjLG;;AAmLpB;;;;;;;;AAQApH,EAAAA,QAAQ,EAAEpC,SAAS,CAACwJ,IA3LA;;AA6LpB;;;;AAIAzE,EAAAA,QAAQ,EAAE/E,SAAS,CAACwJ,IAjMA;;AAmMpB;;;AAGAlE,EAAAA,aAAa,EAAEtF,SAAS,CAAC0J,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAAhB,EAA6CC,UAtMxC;;AAwMpB;;;AAGA3C,EAAAA,QAAQ,EAAEhH,SAAS,CAAC6J,OA3MA;;AA6MpB;;;;AAIAzE,EAAAA,gBAAgB,EAAEpF,SAAS,CAACwJ,IAjNR;;AAmNpB;;;AAGAtC,EAAAA,SAAS,EAAElH,SAAS,CAAC6J,OAtND;;AAwNpB;;;;AAIAxE,EAAAA,iBAAiB,EAAErF,SAAS,CAACwJ,IA5NT;;AA8NpB;;;;;;AAMAnD,EAAAA,YAAY,EAAErG,SAAS,CAACoJ,SAAV,CAAoB,CAACpJ,SAAS,CAAC6J,OAAX,EAAoB7J,SAAS,CAAC8J,KAAV,CAAgB;AACpEjC,IAAAA,SAAS,EAAE7H,SAAS,CAAC6J,OAD+C;AAEpE/B,IAAAA,OAAO,EAAE9H,SAAS,CAAC6J;AAFiD,GAAhB,CAApB,CAApB,CApOM;;AAyOpB;;;AAGAvH,EAAAA,wBAAwB,EAAEtC,SAAS,CAACwJ,IA5OhB;;AA8OpB;;;AAGA1E,EAAAA,SAAS,EAAE9E,SAAS,CAACwJ,IAjPD;;AAmPpB;;;;;AAKAT,EAAAA,IAAI,EAAEtI,SAAS,CAAC,CAAD,EAAI,KAAJ,CAxPK;;AA0PpB;;;;;AAKAsJ,EAAAA,OAAO,EAAE/J,SAAS,CAACqJ,MA/PC;;AAiQpB;;;;;AAKArE,EAAAA,UAAU,EAAEhF,SAAS,CAACsJ,MAtQF;;AAwQpB;;;;;;AAMArE,EAAAA,SAAS,EAAEjF,SAAS,CAACyJ,IA9QD;;AAgRpB;;;;AAIAvE,EAAAA,QAAQ,EAAElF,SAAS,CAACyJ,IApRA;;AAsRpB;;;AAGAtE,EAAAA,WAAW,EAAEnF,SAAS,CAACwJ,IAzRH;;AA2RpB;;;;AAIArH,EAAAA,SAAS,EAAEnC,SAAS,CAACqJ,MA/RD;;AAiSpB;;;;;AAKApD,EAAAA,GAAG,EAAEjG,SAAS,CAACyJ,IAtSK;;AAwSpB;;;;AAIAvD,EAAAA,eAAe,EAAElG,SAAS,CAAC6J,OA5SP;;AA8SpB;;;;;;;;AAQA/H,EAAAA,MAAM,EAAE9B,SAAS,CAAC8J,KAAV,CAAgB;AACtB/H,IAAAA,GAAG,EAAE/B,SAAS,CAACqJ,MADO;AAEtBW,IAAAA,GAAG,EAAEhK,SAAS,CAACqJ,MAAV,CAAiBM,UAFA;AAGtBM,IAAAA,aAAa,EAAEjK,SAAS,CAACwJ;AAHH,GAAhB,CAtTY;;AA4TpB;;;;AAIArD,EAAAA,OAAO,EAAEnG,SAAS,CAACwJ,IAhUC;AAkUpBlD,EAAAA,oBAAoB,EAAEpG,UAAU,CAACF,SAAS,CAACyJ,IAAX,EAAiB,qCAAjB,CAlUZ;AAmUpBlD,EAAAA,qBAAqB,EAAErG,UAAU,CAACF,SAAS,CAACsJ,MAAX,EAAmB,qCAAnB,CAnUb;AAoUpB1F,EAAAA,IAAI,EAAE1D,UAAU,CAACF,SAAS,CAACyJ,IAAX,EAAiB,gDAAjB,CApUI;AAqUpBhC,EAAAA,aAAa,EAAEvH,UAAU,CAACF,SAAS,CAACwJ,IAAX,EAAiB,+GAAjB,CArUL;AAsUpBjC,EAAAA,cAAc,EAAErH,UAAU,CAACF,SAAS,CAACwJ,IAAX,EAAiB,wCAAjB;AAtUN,CAAtB;AAwUAnI,SAAS,CAAC6I,YAAV,GAAyB;AACvBvF,EAAAA,IAAI,EAAE,MADiB;AAEvBW,EAAAA,aAAa,EAAE,MAFQ;AAGvBe,EAAAA,YAAY,EAAEzG,KAAK,CAACmI,aAAN,CACZpH,QADY,EAEZ,IAFY,EAGZ,gBAHY,CAHS;AAQvByE,EAAAA,gBAAgB,EAAE,IARK;AASvBC,EAAAA,iBAAiB,EAAE,IATI;AAUvBP,EAAAA,SAAS,EAAE;AAVY,CAAzB;;AAaA,IAAItD,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AACjD,MAAI2I,MAAM,GAAG,IAAb;;AAEA,OAAK9J,QAAL,GAAgB,YAAY;AAC1B,WAAO8J,MAAM,CAACzG,MAAP,CAAcrD,QAAd,EAAP;AACD,GAFD;;AAIA,OAAK+J,KAAL,GAAa,YAAY;AACvBD,IAAAA,MAAM,CAACzG,MAAP,CAAc0G,KAAd;AACD,GAFD;;AAIA,OAAK1I,UAAL,GAAkB,UAAUiB,CAAV,EAAa;AAC7B,QAAIvC,QAAQ,CAACuC,CAAD,CAAZ,EAAiB;AACf,aAAO0H,MAAM,CAAC1H,CAAD,CAAN,CAAUlF,MAAjB;AACD;;AAED,WAAO,CAAP;AACD,GAND;;AAQA,OAAKwL,aAAL,GAAqB,UAAUqB,GAAV,EAAe;AAClCH,IAAAA,MAAM,CAACI,UAAP,GAAoBD,GAApB;AACD,GAFD;;AAIA,OAAK9B,SAAL,GAAiB,UAAUF,KAAV,EAAiB;AAChC,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB6B,MAAAA,MAAM,CAACzG,MAAP,GAAgB4E,KAAhB;AACD;AACF,GAJD;;AAMA,OAAKkC,cAAL,GAAsB,UAAU5G,IAAV,EAAgB;AACpC,QAAIpB,KAAK,GAAGiI,MAAM,CAACC,gBAAP,CAAwB9G,IAAxB,CAAZ;AAEA,WAAOA,IAAI,CAAC+G,qBAAL,GAA6B9I,KAA7B,GAAqC+I,QAAQ,CAACpI,KAAK,CAACqI,UAAP,EAAmB,EAAnB,CAApD;AACD,GAJD;;AAMA,OAAKhI,UAAL,GAAkB,UAAUpD,KAAV,EAAiB;AACjC,QAAIxB,KAAK,GAAGT,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiB2G,SAAzC,GAAqD3G,SAAS,CAAC,CAAD,CAA9D,GAAoE2M,MAAM,CAAClM,KAAvF;AAEA,QAAI6M,IAAI,GAAGrL,KAAX,CAHiC,CAIjC;;AACA,QAAIxB,KAAK,CAAC0G,IAAN,KAAe,UAAnB,EAA+B;AAC7BmG,MAAAA,IAAI,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACtL,KAAK,CAAChC,MAAP,CAAhB,EAAgCwN,MAAhC,CAAuC,UAAUC,CAAV,EAAa;AACzD,eAAOA,CAAC,GAAG,QAAX;AACD,OAFM,EAEJ,EAFI,CAAP;AAGD;;AAED,QAAI5C,KAAK,GAAG6B,MAAM,CAACzG,MAAP,IAAiByG,MAAM,CAACzG,MAAP,CAAcrD,QAAd,EAA7B;;AACA,QAAI,CAACD,QAAQ,CAAC0K,IAAD,CAAT,IAAmBxC,KAAvB,EAA8B;AAC5BwC,MAAAA,IAAI,GAAGxC,KAAK,CAAC7I,KAAb;AACD;;AAED,QAAIsC,GAAG,GAAG1B,QAAQ,CAACpC,KAAK,CAAC6D,MAAP,EAAe;AAAEC,MAAAA,GAAG,EAAEb;AAAP,KAAf,EAAiD,KAAjD,CAAlB;AACA,QAAIW,KAAK,GAAGvB,YAAY,CAACwK,IAAD,EAAOxC,KAAP,CAAxB;;AACA,QAAIzG,KAAK,KAAK,IAAV,IAAkB,CAACyG,KAAvB,EAA8B;AAC5B;AACA,aAAOzG,KAAK,IAAIE,GAAhB;AACD;;AAED,QAAIiI,GAAG,GAAG/L,KAAK,CAAC6D,MAAN,CAAakI,GAAvB;;AAGA,QAAIG,MAAM,CAACI,UAAX,EAAuB;AACrB,UAAIY,SAAS,GAAGhB,MAAM,CAACI,UAAP,CAAkBa,aAAlB,CAAgC,iCAAhC,CAAhB;;AACA,UAAID,SAAJ,EAAe;AACbtJ,QAAAA,KAAK,IAAIsJ,SAAS,CAACR,qBAAV,GAAkC9I,KAA3C;AACD;;AAED,UAAIwJ,aAAa,GAAGlB,MAAM,CAACI,UAAP,CAAkBa,aAAlB,CAAgC,+BAAhC,CAApB;;AACA,UAAIC,aAAJ,EAAmB;AACjB;AACA,YAAIC,qBAAqB,GAAGD,aAAa,CAACxC,QAA1C;AAAA,YACI0C,KAAK,GAAGD,qBAAqB,CAAC,CAAD,CADjC;AAAA,YAEIE,MAAM,GAAGF,qBAAqB,CAAC,CAAD,CAFlC;AAAA,YAGIG,KAAK,GAAGH,qBAAqB,CAAC,CAAD,CAHjC;;AAKA,YAAIC,KAAK,CAACG,SAAN,CAAgBC,QAAhB,CAAyB,SAAzB,CAAJ,EAAyC;AACvC9J,UAAAA,KAAK,IAAI0J,KAAK,CAACZ,qBAAN,GAA8B9I,KAAvC;AACAA,UAAAA,KAAK,IAAI+I,QAAQ,CAACH,MAAM,CAACC,gBAAP,CAAwBc,MAAxB,EAAgCX,UAAjC,EAA6C,EAA7C,CAAjB;;AAEA,cAAIY,KAAJ,EAAW;AACT5J,YAAAA,KAAK,IAAIsI,MAAM,CAACK,cAAP,CAAsBiB,KAAtB,CAAT;AACD;AACF,SAPD,MAOO,IAAID,MAAJ,EAAY;AACjB3J,UAAAA,KAAK,IAAIsI,MAAM,CAACK,cAAP,CAAsBgB,MAAtB,CAAT;AACD;AACF;AACF;;AAED,WAAOI,IAAI,CAACC,IAAL,CAAUD,IAAI,CAAC7J,GAAL,CAASiI,GAAT,EAAc4B,IAAI,CAAC5B,GAAL,CAASjI,GAAT,EAAcF,KAAd,CAAd,CAAV,CAAP;AACD,GAtDD;;AAwDA,OAAKqB,UAAL,GAAkB,YAAY;AAC5B,QAAI4I,IAAI,GAAGtO,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiB2G,SAAzC,GAAqD3G,SAAS,CAAC,CAAD,CAA9D,GAAoE2M,MAAM,CAAClM,KAAtF;AAAA,QACIwB,KAAK,GAAGqM,IAAI,CAACrM,KADjB;AAAA,QAEI0C,SAAS,GAAG2J,IAAI,CAAC3J,SAFrB;AAAA,QAGI4C,QAAQ,GAAG+G,IAAI,CAAC/G,QAHpB;;AAKA,QAAI7C,KAAK,GAAGiI,MAAM,CAACnI,KAAP,CAAaE,KAAzB;;AAEA,QAAIT,aAAa,GAAG0I,MAAM,CAACzI,UAAP,CAAkBjC,KAAlB,CAApB;;AACA,QAAIsF,QAAQ,IAAI7C,KAAhB,EAAuB;AACrBA,MAAAA,KAAK,GAAG,CAAC9B,QAAQ,CAACX,KAAD,CAAjB;AACD;;AAED,QAAI0C,SAAJ,EAAe;AACbD,MAAAA,KAAK,GAAGA,KAAK,IAAIT,aAAa,GAAGU,SAAjC;AACD;;AAED,WAAOD,KAAP;AACD,GAlBD;;AAoBA,OAAK8G,qBAAL,GAA6B,UAAU1E,CAAV,EAAa;AACxC,QAAI6F,MAAM,CAAClM,KAAP,CAAakJ,OAAjB,EAA0B;AACxBgD,MAAAA,MAAM,CAAClM,KAAP,CAAakJ,OAAb,CAAqB7C,CAArB;AACD;;AAED,QAAI,CAAC6F,MAAM,CAAClM,KAAP,CAAa4F,QAAlB,EAA4B;AAC1BsG,MAAAA,MAAM,CAACC,KAAP;AACD;AACF,GARD;;AAUA,OAAK1B,WAAL,GAAmB,UAAUpE,CAAV,EAAa;AAC9B6F,IAAAA,MAAM,CAAChH,MAAP,GAAgB,KAAhB;AACA,QAAI4I,OAAO,GAAG5B,MAAM,CAAClM,KAArB;AAAA,QACI8G,QAAQ,GAAGgH,OAAO,CAAChH,QADvB;AAAA,QAEI5C,SAAS,GAAG4J,OAAO,CAAC5J,SAFxB;AAAA,QAGIkF,MAAM,GAAG0E,OAAO,CAAC1E,MAHrB;;AAKA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAAC/C,CAAD,CAAN;AACD;;AAED,QAAI7E,KAAK,GAAG6E,CAAC,CAAChH,MAAF,CAASmC,KAArB;AAEA,QAAIuC,KAAK,GAAG;AACVC,MAAAA,MAAM,EAAE,KADE;AAEVC,MAAAA,KAAK,EAAE6C,QAAQ,IAAI,CAAC3E,QAAQ,CAACX,KAAD,CAArB,IAAgC0C,SAAS,IAAIkI,MAAM,CAAC5K,KAAD,CAAN,CAAchC,MAAd,GAAuB0E;AAFjE,KAAZ;;AAKA,QAAI,CAACgI,MAAM,CAAClM,KAAP,CAAa8F,KAAlB,EAAyB;AACvB/B,MAAAA,KAAK,CAACI,QAAN,GAAiBhC,QAAQ,CAACX,KAAD,CAAzB;AACD;;AAED0K,IAAAA,MAAM,CAACvH,QAAP,CAAgBZ,KAAhB;AACD,GAvBD;;AAyBA,OAAKyG,YAAL,GAAoB,UAAUnE,CAAV,EAAa;AAC/B6F,IAAAA,MAAM,CAAChH,MAAP,GAAgB,IAAhB;AACA,QAAI6I,OAAO,GAAG7B,MAAM,CAAClM,KAArB;AAAA,QACIqJ,OAAO,GAAG0E,OAAO,CAAC1E,OADtB;AAAA,QAEIvD,KAAK,GAAGiI,OAAO,CAACjI,KAFpB;;AAIA,QAAIuD,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAAChD,CAAD,CAAP;AACD;;AAED,QAAItC,KAAK,GAAG;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAZ;;AACA,QAAI,CAAC8B,KAAL,EAAY;AACV/B,MAAAA,KAAK,CAACI,QAAN,GAAiB,IAAjB;AACD;;AAED+H,IAAAA,MAAM,CAACvH,QAAP,CAAgBZ,KAAhB;AACD,GAhBD;;AAkBA,OAAK2G,aAAL,GAAqB,UAAUrE,CAAV,EAAa;AAChC,QAAI2H,OAAO,GAAG9B,MAAM,CAAClM,KAArB;AAAA,QACImJ,QAAQ,GAAG6E,OAAO,CAAC7E,QADvB;AAAA,QAEIjF,SAAS,GAAG8J,OAAO,CAAC9J,SAFxB;AAAA,QAGI4C,QAAQ,GAAGkH,OAAO,CAAClH,QAHvB;AAAA,QAIIjD,MAAM,GAAGmK,OAAO,CAACnK,MAJrB;AAKA,QAAIrC,KAAK,GAAG6E,CAAC,CAAChH,MAAF,CAASmC,KAArB;;AAEA,QAAI2H,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC9C,CAAC,CAAChH,MAAF,CAASmC,KAAV,EAAiB6E,CAAjB,CAAR;AACD;;AAED,QAAI7C,aAAa,GAAGhC,KAAK,CAAChC,MAA1B;AACA,QAAIuE,KAAK,GAAG,KAAK,CAAjB;;AACA,QAAI,OAAOG,SAAP,KAAqB,WAAzB,EAAsC;AACpCH,MAAAA,KAAK,GAAG;AAAEP,QAAAA,aAAa,EAAEA,aAAjB;AAAgCS,QAAAA,KAAK,EAAET,aAAa,GAAGU;AAAvD,OAAR;AACD,KAFD,MAEO,IAAI4C,QAAQ,IAAIoF,MAAM,CAACnI,KAAP,CAAaE,KAA7B,EAAoC;AACzCF,MAAAA,KAAK,GAAG;AAAEE,QAAAA,KAAK,EAAE,CAACT;AAAV,OAAR;AACD;;AAED,QAAI,OAAO0I,MAAM,CAAClM,KAAP,CAAawB,KAApB,KAA8B,WAA9B,IAA6CqC,MAAjD,EAAyD;AACvD,UAAID,KAAK,GAAGsI,MAAM,CAACtH,UAAP,CAAkBpD,KAAlB,CAAZ;;AACA,UAAI,CAACqC,MAAM,CAACmI,aAAR,IAAyB,CAACE,MAAM,CAACnI,KAAP,CAAaO,MAAvC,IAAiDV,KAAK,GAAGsI,MAAM,CAACnI,KAAP,CAAaO,MAAb,CAAoBV,KAAjF,EAAwF;AACtFG,QAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACAA,QAAAA,KAAK,CAACO,MAAN,GAAepF,QAAQ,CAAC,EAAD,EAAKgN,MAAM,CAACnI,KAAP,CAAaO,MAAlB,EAA0B;AAAEV,UAAAA,KAAK,EAAEA;AAAT,SAA1B,CAAvB;AACD;AACF;;AAED,QAAIG,KAAJ,EAAW;AACTmI,MAAAA,MAAM,CAACvH,QAAP,CAAgBZ,KAAhB;AACD;AACF,GA/BD;;AAiCA,OAAKgG,oBAAL,GAA4B,YAAY;AACtCmC,IAAAA,MAAM,CAACvH,QAAP,CAAgB;AAAEP,MAAAA,eAAe,EAAE,CAAC8H,MAAM,CAACnI,KAAP,CAAaK;AAAjC,KAAhB,EAAoE8H,MAAM,CAACC,KAA3E;AACD,GAFD;AAGD,CAxMD;;AA0MA,eAAe/I,SAAf","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { PureComponent, Children, cloneElement } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport isValued from '../utils/isValued';\nimport getField from '../utils/getField';\nimport getTextWidth from '../utils/Positioning/getTextWidth';\nimport controlled from '../utils/PropTypes/controlled';\nimport invalidIf from '../utils/PropTypes/invalidIf';\nimport minNumber from '../utils/PropTypes/minNumber';\nimport addSuffix from '../utils/StringUtils/addSuffix';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport FloatingLabel from './FloatingLabel';\nimport TextFieldMessage from './TextFieldMessage';\nimport PasswordButton from './PasswordButton';\nimport InputField from './InputField';\nimport TextFieldDivider from './TextFieldDivider';\n\nvar DEFAULT_TEXT_FIELD_SIZE = 180;\n\nvar WILL_RECEIVE_KEYS = ['style', 'value', 'resize'];\nvar DID_UPDATE_KEYS = ['leftIcon', 'rightIcon', 'passwordIcon', 'inlineIndicator'];\n\n/**\n * The `TextField` component can either be a single line `input` field or a multiline\n * `textarea` field. `FontIcon`s, messages, and password indicators can also be added\n * to this field.\n *\n * The optional mouse and touch events will be added to the entire container while the\n * text specific events will be added to the `input` or `textarea` tags.\n */\n\nvar TextField = function (_PureComponent) {\n  _inherits(TextField, _PureComponent);\n\n  function TextField(props) {\n    _classCallCheck(this, TextField);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var currentLength = _this._getLength(typeof props.value !== 'undefined' ? props.value : props.defaultValue);\n\n    _this._canvas = null;\n    var width = null;\n    if (typeof props.resize !== 'undefined') {\n      width = typeof props.resize.min === 'number' ? props.resize.min : DEFAULT_TEXT_FIELD_SIZE;\n    }\n\n    _this.state = {\n      active: false,\n      error: props.maxLength ? props.maxLength < currentLength : false,\n      floating: isValued(props.defaultValue) || isValued(props.value),\n      passwordVisible: props.passwordInitiallyVisible,\n      currentLength: currentLength,\n      styles: width ? _extends({ width: width }, props.style) : props.style\n    };\n    return _this;\n  }\n\n  TextField.prototype.componentDidMount = function componentDidMount() {\n    var _props = this.props,\n        value = _props.value,\n        defaultValue = _props.defaultValue,\n        resize = _props.resize,\n        style = _props.style;\n\n    var v = typeof value !== 'undefined' ? value : defaultValue;\n    /* eslint-disable react/no-did-mount-set-state */\n    if (resize) {\n      // always want to set width on mount\n      this.setState({ styles: _extends({ width: this._calcWidth(v, this.props) }, style) });\n    }\n  };\n\n  TextField.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    var _this2 = this;\n\n    var value = nextProps.value,\n        resize = nextProps.resize,\n        style = nextProps.style;\n\n    var nextState = {};\n    if (value !== this.props.value) {\n      nextState.error = this._isErrored(nextProps);\n      nextState.floating = this._focus || isValued(value);\n      nextState.currentLength = this._getLength(value);\n    }\n\n    if (WILL_RECEIVE_KEYS.some(function (key) {\n      return _this2.props[key] !== nextProps[key];\n    })) {\n      if (!resize) {\n        nextState.styles = style;\n      } else {\n        var width = this._calcWidth(value, nextProps);\n        nextState.styles = _extends({ width: width }, style);\n      }\n    }\n\n    this.setState(nextState);\n  };\n\n  TextField.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this3 = this;\n\n    var _props2 = this.props,\n        resize = _props2.resize,\n        value = _props2.value,\n        style = _props2.style;\n\n    if (resize && DID_UPDATE_KEYS.some(function (key) {\n      return _this3.props[key] !== prevProps[key];\n    })) {\n      var width = this._calcWidth(value, this.props);\n      this.setState({ styles: _extends({ width: width }, style) }); // eslint-disable-line react/no-did-update-set-state\n    }\n  };\n\n  /**\n   * A helper function for getting the specific `input` field or the `textarea` in the `TextField`.\n   * This is accessible if you use `refs`.\n   *\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.getField(); // `input` node\n   * ```\n   */\n\n\n  /**\n   * A helper function for focusing the `input` field or the `textarea` in the `TextField`.\n   * This is accessibile if you use `refs`.\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.focus();\n   * ```\n   */\n\n\n  /**\n   * A helper function for blurring the `input` field or the `textarea` in the `TextField`.\n   * This is accessible if you use `refs`.\n   * Example:\n   *\n   * ```js\n   * <TextField ref={field => this._field = field;} label=\"Hello\" />;\n   *\n   * this._field.blur();\n   * ```\n   */\n  TextField.prototype.blur = function blur() {\n    this._field.blur();\n  };\n\n  TextField.prototype._cloneIcon = function _cloneIcon(icon, active, error, disabled, stateful, block, dir) {\n    if (!icon) {\n      return icon;\n    }\n\n    try {\n      var iconEl = Children.only(icon);\n      return cloneElement(iconEl, {\n        key: iconEl.key || 'icon-' + dir,\n        disabled: stateful ? disabled : undefined,\n        primary: stateful ? !error && active : undefined,\n        error: stateful ? error : undefined,\n        className: cn('md-text-field-icon', {\n          'md-text-field-icon--positioned': !block\n        }, iconEl.props.className)\n      });\n    } catch (e) {\n      return icon;\n    }\n  };\n\n  /**\n   * A small utility function for calculating an inline-icon's width keeping the SVG Icons\n   * in mind and any margin that gets applied for spacing.\n   */\n\n\n  TextField.prototype.render = function render() {\n    var _state = this.state,\n        currentLength = _state.currentLength,\n        passwordVisible = _state.passwordVisible,\n        styles = _state.styles;\n\n    var _props3 = this.props,\n        id = _props3.id,\n        type = _props3.type,\n        className = _props3.className,\n        inputStyle = _props3.inputStyle,\n        inputClassName = _props3.inputClassName,\n        block = _props3.block,\n        fullWidth = _props3.fullWidth,\n        required = _props3.required,\n        customSize = _props3.customSize,\n        maxLength = _props3.maxLength,\n        errorText = _props3.errorText,\n        helpText = _props3.helpText,\n        helpOnFocus = _props3.helpOnFocus,\n        disabled = _props3.disabled,\n        leftIconStateful = _props3.leftIconStateful,\n        rightIconStateful = _props3.rightIconStateful,\n        lineDirection = _props3.lineDirection,\n        paddedBlock = _props3.paddedBlock,\n        onDoubleClick = _props3.onDoubleClick,\n        onTouchStart = _props3.onTouchStart,\n        onTouchMove = _props3.onTouchMove,\n        onTouchCancel = _props3.onTouchCancel,\n        onTouchEnd = _props3.onTouchEnd,\n        onMouseDown = _props3.onMouseDown,\n        onMouseUp = _props3.onMouseUp,\n        onMouseOver = _props3.onMouseOver,\n        onMouseLeave = _props3.onMouseLeave,\n        ink = _props3.ink,\n        inlineIndicator = _props3.inlineIndicator,\n        toolbar = _props3.toolbar,\n        propPasswordIcon = _props3.passwordIcon,\n        icon = _props3.icon,\n        passwordIconChildren = _props3.passwordIconChildren,\n        passwordIconClassName = _props3.passwordIconClassName,\n        style = _props3.style,\n        propLabel = _props3.label,\n        propPlaceholder = _props3.placeholder,\n        propError = _props3.error,\n        propActive = _props3.active,\n        propFloating = _props3.floating,\n        propLeftIcon = _props3.leftIcon,\n        propRightIcon = _props3.rightIcon,\n        onClick = _props3.onClick,\n        onChange = _props3.onChange,\n        onBlur = _props3.onBlur,\n        onFocus = _props3.onFocus,\n        resize = _props3.resize,\n        adjustMinWidth = _props3.adjustMinWidth,\n        propFloatingLabel = _props3.floatingLabel,\n        props = _objectWithoutProperties(_props3, ['id', 'type', 'className', 'inputStyle', 'inputClassName', 'block', 'fullWidth', 'required', 'customSize', 'maxLength', 'errorText', 'helpText', 'helpOnFocus', 'disabled', 'leftIconStateful', 'rightIconStateful', 'lineDirection', 'paddedBlock', 'onDoubleClick', 'onTouchStart', 'onTouchMove', 'onTouchCancel', 'onTouchEnd', 'onMouseDown', 'onMouseUp', 'onMouseOver', 'onMouseLeave', 'ink', 'inlineIndicator', 'toolbar', 'passwordIcon', 'icon', 'passwordIconChildren', 'passwordIconClassName', 'style', 'label', 'placeholder', 'error', 'active', 'floating', 'leftIcon', 'rightIcon', 'onClick', 'onChange', 'onBlur', 'onFocus', 'resize', 'adjustMinWidth', 'floatingLabel']);\n\n    var _props4 = this.props,\n        label = _props4.label,\n        placeholder = _props4.placeholder,\n        error = _props4.error,\n        active = _props4.active,\n        floating = _props4.floating,\n        leftIcon = _props4.leftIcon,\n        rightIcon = _props4.rightIcon;\n\n    active = active || this.state.active;\n    error = error || this.state.error;\n    floating = floating || this.state.floating;\n\n    if (required) {\n      if (label) {\n        label = addSuffix(label, '*');\n      }\n\n      if (placeholder && !label) {\n        placeholder = addSuffix(placeholder, '*');\n      }\n    }\n\n    if (label && !floating) {\n      placeholder = null;\n    }\n\n    leftIcon = this._cloneIcon(icon || leftIcon, active, error, disabled, leftIconStateful, block, 'left');\n    var passwordIcon = getDeprecatedIcon(passwordIconClassName, passwordIconChildren, propPasswordIcon);\n    if (passwordIcon !== null && type === 'password' && !disabled) {\n      var passwordIconProp = passwordIcon;\n      var doubleIcon = false;\n      if (passwordIcon.invisible && passwordIcon.visible) {\n        passwordIconProp = passwordVisible ? passwordIcon.visible : passwordIcon.invisible;\n        doubleIcon = true;\n      }\n      rightIcon = React.createElement(PasswordButton, {\n        key: 'password-btn',\n        onClick: this._togglePasswordField,\n        active: active,\n        doubleIcon: doubleIcon,\n        passwordVisible: passwordVisible,\n        icon: passwordIconProp,\n        block: block,\n        floating: !!label\n      });\n    } else if (inlineIndicator) {\n      var el = Children.only(inlineIndicator);\n      rightIcon = cloneElement(inlineIndicator, {\n        key: 'icon-right',\n        className: cn('md-text-field-inline-indicator', {\n          'md-text-field-inline-indicator--floating': label,\n          'md-text-field-inline-indicator--block': block\n        }, el.props.className)\n      });\n    } else {\n      rightIcon = this._cloneIcon(rightIcon, active, error, disabled, rightIconStateful, block, 'right');\n    }\n    var rightIconed = !!rightIcon && type !== 'password' && !inlineIndicator;\n\n    var floatingLabel = React.createElement(FloatingLabel, {\n      key: 'label',\n      label: label,\n      htmlFor: id,\n      active: active,\n      error: error,\n      floating: floating,\n      customSize: customSize,\n      disabled: disabled,\n      iconOffset: !!leftIcon\n    });\n\n    var message = React.createElement(TextFieldMessage, {\n      key: 'message',\n      active: active,\n      error: error,\n      errorText: errorText,\n      helpText: helpText,\n      helpOnFocus: helpOnFocus,\n      block: block,\n      maxLength: maxLength,\n      leftIcon: !!leftIcon,\n      rightIcon: !!rightIcon,\n      currentLength: currentLength\n    });\n\n    var field = React.createElement(InputField, _extends({}, props, {\n      required: required,\n      key: 'field',\n      ref: this._setField,\n      id: id,\n      type: type,\n      label: label,\n      style: inputStyle,\n      className: cn({ 'md-text-field--toolbar': toolbar }, inputClassName),\n      disabled: disabled,\n      customSize: customSize,\n      fullWidth: fullWidth,\n      passwordVisible: passwordVisible,\n      placeholder: placeholder,\n      block: block,\n      onFocus: this._handleFocus,\n      onBlur: this._handleBlur,\n      onChange: this._handleChange,\n      inlineIndicator: !!inlineIndicator\n    }));\n\n    var divider = void 0;\n    if (!block) {\n      divider = React.createElement(TextFieldDivider, {\n        key: 'text-divider',\n        active: active,\n        error: error,\n        lineDirection: lineDirection\n      });\n    }\n\n    var children = void 0;\n    if (leftIcon || rightIconed) {\n      children = React.createElement(\n        'div',\n        { key: 'icon-divider', className: 'md-text-field-icon-container' },\n        leftIcon,\n        React.createElement(\n          'div',\n          {\n            key: 'divider-container',\n            className: cn('md-text-field-divider-container', {\n              'md-text-field-divider-container--grow': fullWidth\n            })\n          },\n          field,\n          divider\n        ),\n        rightIcon\n      );\n    } else {\n      children = [leftIcon, field, divider, rightIcon];\n    }\n\n    children = [floatingLabel, children, message];\n\n    var multiline = typeof props.rows !== 'undefined';\n    return React.createElement(\n      'div',\n      {\n        style: styles,\n        className: cn('md-text-field-container', {\n          'md-inline-block': !fullWidth && !block,\n          'md-full-width': block || fullWidth,\n          'md-text-field-container--disabled': disabled,\n          'md-text-field-container--input': !multiline,\n          'md-text-field-container--input-block': block && !multiline,\n          'md-text-field-container--multiline': multiline,\n          'md-text-field-container--multiline-block': multiline && block,\n          'md-text-field-container--padded-block': block && paddedBlock\n        }, className),\n        onClick: this._handleContainerClick,\n        onDoubleClick: onDoubleClick,\n        onMouseOver: onMouseOver,\n        onMouseLeave: onMouseLeave,\n        onMouseDown: onMouseDown,\n        onMouseUp: onMouseUp,\n        onTouchStart: onTouchStart,\n        onTouchEnd: onTouchEnd,\n        onTouchCancel: onTouchCancel,\n        onTouchMove: onTouchMove,\n        ref: this._setContainer\n      },\n      ink,\n      children\n    );\n  };\n\n  _createClass(TextField, [{\n    key: 'value',\n\n\n    /**\n     * Gets the current value from the text field. This is used when you have an uncontrolled\n     * text field and simply need the value from a ref callback.\n     *\n     * @return {String} the text field's value\n     */\n    get: function get() {\n      return this.getField().value;\n    }\n  }]);\n\n  return TextField;\n}(PureComponent);\n\nTextField.propTypes = {\n  /**\n   * The id for a text field. This is required when using the `label` prop for accessibility,\n   * but normally a good idea to include one anyways.\n   */\n  id: isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n\n  /**\n   * An optional style to apply to the text field's container.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the text field's container.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An optional style to apply to the `input` or `textarea` tag.\n   */\n  inputStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the `input` or `textarea` tag.\n   */\n  inputClassName: PropTypes.string,\n\n  /**\n   * An optional value to apply to the text field. This will make the component\n   * controlled and require the `onChange` prop.\n   */\n  value: controlled(PropTypes.oneOfType([PropTypes.string, PropTypes.number]), 'onChange'),\n\n  /**\n   * An optional default value for the text field.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\n  /**\n   * Boolean if the text field should be displayed as a `block`. This is equivalent to\n   * the `full width` text field in the Material Design specs. This view will disable\n   * floating labels and remove the text divider from the component.\n   */\n  block: PropTypes.bool,\n\n  /**\n   * Boolean if the `block` text field should include padding to the left and right of\n   * the text field.\n   */\n  paddedBlock: PropTypes.bool,\n\n  /**\n   * Boolean if the text field is currently disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An optional label to display with the text field. This will convert the text field\n   * into a floating label text field. You can make it single line by only using the\n   * `placeholder` prop.\n   */\n  label: invalidIf(PropTypes.node, 'block'),\n\n  /**\n   * An optional placeholder text to display in the text field. If there is no `label` prop,\n   * the text field will be displayed as a single line text field. If there is a `label` prop,\n   * this will only be visible when there is no value and the user focused the text field.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * The type for the text field. This is one of the most import props for mobile accessibility\n   * as it will update the keyboard for the text type. This does not get applied on multiline\n   * text fields.\n   */\n  type: PropTypes.oneOf(['text', 'number', 'email', 'search', 'tel', 'url', 'password']).isRequired,\n\n  /**\n   * An optional function to call when the text field's container triggers the `click` event.\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `doubleclick`\n   * event.\n   */\n  onDoubleClick: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `touchstart`\n   * event.\n   */\n  onTouchStart: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `touchmove`\n   * event.\n   */\n  onTouchMove: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `touchcancel`\n   * event.\n   */\n  onTouchCancel: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `touchend`\n   * event.\n   */\n  onTouchEnd: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `mousedown`\n   * event.\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `mouseup`\n   * event.\n   */\n  onMouseUp: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `mouseover`\n   * event.\n   */\n  onMouseOver: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field's container triggers the `mouseleave`\n   * event.\n   */\n  onMouseLeave: PropTypes.func,\n\n  /**\n   * An optional onChange function to call. If the `value` prop is defined, this is\n   * required.\n   *\n   * When the value changes in the text field, this will be called with the new text\n   * field's value and the change event.\n   *\n   * ```js\n   * onChange(e.target.value, e);\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field is blurred.\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * An optional function to call when the text field is focused.\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * An optional boolean if the `active` state of the text field can be externally\n   * modified as well. The text field is usually considered active when it gains focus.\n   *\n   * If this prop is set, it will check both the active prop and the active state to\n   * determine if one is true.\n   */\n  active: PropTypes.bool,\n\n  /**\n   * An optional boolean if the `error` state of the text field can be externally\n   * modified as well. The text field is usually considered errored when it is required\n   * and there is no value or the current length of the text field's value is greater\n   * than the `maxLength` prop.\n   *\n   * If this prop is set, it will check both the error prop and the error state to\n   * determine if one is true.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * An optional boolean if the `floating` state of the text field's floating label can be\n   * externally modified as well. The floating state is true when the text field gains focus\n   * or there is a value in the text field.\n   *\n   * If this prop is set, it will check both the floating prop and the floating state to\n   * determine if one is true.\n   */\n  floating: PropTypes.bool,\n\n  /**\n   * Boolean if the text field is required. If the user blurs the text field while there is\n   * no value and it is required, the `error` state will be set to true.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The direction that the underline should appear from.\n   */\n  lineDirection: PropTypes.oneOf(['left', 'center', 'right']).isRequired,\n\n  /**\n   * An optional icon to place to the left of the text field.\n   */\n  leftIcon: PropTypes.element,\n\n  /**\n   * Boolean if the left icon should be stateful. This means that the icon will\n   * gain the active or error colors with the text field.\n   */\n  leftIconStateful: PropTypes.bool,\n\n  /**\n   * An optional icon to place to the right of the text field.\n   */\n  rightIcon: PropTypes.element,\n\n  /**\n   * Boolean if the right icon should be stateful. This means that the icon will\n   * gain the active or error colors with the text field.\n   */\n  rightIconStateful: PropTypes.bool,\n\n  /**\n   * The icon to use for a password text field.\n   *\n   * Alternatively, two separate elements may be used to change between\n   * them based on the value of the `passwordVisible` state variable.\n   */\n  passwordIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.shape({\n    invisible: PropTypes.element,\n    visible: PropTypes.element\n  })]),\n\n  /**\n   * Boolean if the password is initially visible.\n   */\n  passwordInitiallyVisible: PropTypes.bool,\n\n  /**\n   * Boolean if the text field should be displayed as full width.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * The number of rows for the `multiline` text field. This value must be greater than\n   * or equal to 1. When this value is set, the text field will be converted to a multiline\n   * field.\n   */\n  rows: minNumber(1, false),\n\n  /**\n   * The maximum number of rows for a `multiline` text field. If this value is\n   * `undefined`, `0`, or a number less than `0`, the multiline text field will\n   * infinitely expand.\n   */\n  maxRows: PropTypes.number,\n\n  /**\n   * An optional custom size to apply to the text field. This is used along with\n   * the `$md-text-field-custom-sizes` variable. It basically applies a className of\n   * `md-text-field--NAME`.\n   */\n  customSize: PropTypes.string,\n\n  /**\n   * An optional error text to display below the text field. This will only appear when\n   * the text field has the `error` state through the `error` prop, the current length\n   * of the text field's value is greater than the `maxLength` prop, or the field is\n   * required and the user blurs the text field with no value.\n   */\n  errorText: PropTypes.node,\n\n  /**\n   * An optional help text to display below the text field. This will always be visible\n   * unless the `helpOnFocus` prop is set to true. Otherwise it will appear on focus.\n   */\n  helpText: PropTypes.node,\n\n  /**\n   * Boolean if the help text should display on focus only.\n   */\n  helpOnFocus: PropTypes.bool,\n\n  /**\n   * An optional max length for the text field. This will insert a counter underneath the\n   * text field that appears on focus.\n   */\n  maxLength: PropTypes.number,\n\n  /**\n   * The ink when there is an injectInk above the text field. Used from the SelectField.\n   *\n   * @access private\n   */\n  ink: PropTypes.node,\n\n  /**\n   * An optional element to display inside of the `TextField` to the farthest right. This will\n   * position the indicator absolutely and add some additional padding to the `TextField`.\n   */\n  inlineIndicator: PropTypes.element,\n\n  /**\n   * This prop allows the text field to resize its width to stay between the min and max sizes provided. By\n   * default, the field will expand and collapse based on the amount of text provided. The collapsing can\n   * be disabled by providing `disableShrink` to the configuration object.\n   *\n   * If the `min` prop is not provided, it will default to `180` which is about the same size as a default\n   * text field.\n   */\n  resize: PropTypes.shape({\n    min: PropTypes.number,\n    max: PropTypes.number.isRequired,\n    disableShrink: PropTypes.bool\n  }),\n\n  /**\n   * Boolean if the TextField is in a toolbar and acting as a title. This will apply additional styles to the\n   * text field to make it look like the toolbar's title.\n   */\n  toolbar: PropTypes.bool,\n\n  passwordIconChildren: deprecated(PropTypes.node, 'Use the `passwordIcon` prop instead'),\n  passwordIconClassName: deprecated(PropTypes.string, 'Use the `passwordIcon` prop instead'),\n  icon: deprecated(PropTypes.node, 'Use the `leftIcon` or `rightIcon` prop instead'),\n  floatingLabel: deprecated(PropTypes.bool, 'The `label` prop is now always floating. To create a non-floating text field, only use the `placeholder` prop'),\n  adjustMinWidth: deprecated(PropTypes.bool, 'Manually add a min width style instead')\n};\nTextField.defaultProps = {\n  type: 'text',\n  lineDirection: 'left',\n  passwordIcon: React.createElement(\n    FontIcon,\n    null,\n    'remove_red_eye'\n  ),\n  leftIconStateful: true,\n  rightIconStateful: true,\n  fullWidth: true\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this4 = this;\n\n  this.getField = function () {\n    return _this4._field.getField();\n  };\n\n  this.focus = function () {\n    _this4._field.focus();\n  };\n\n  this._getLength = function (v) {\n    if (isValued(v)) {\n      return String(v).length;\n    }\n\n    return 0;\n  };\n\n  this._setContainer = function (div) {\n    _this4._container = div;\n  };\n\n  this._setField = function (field) {\n    if (field !== null) {\n      _this4._field = field;\n    }\n  };\n\n  this._calcIconWidth = function (icon) {\n    var style = window.getComputedStyle(icon);\n\n    return icon.getBoundingClientRect().width + parseInt(style.marginLeft, 10);\n  };\n\n  this._calcWidth = function (value) {\n    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this4.props;\n\n    var text = value;\n    // if it is a password, use the bullet unicode instead\n    if (props.type === 'password') {\n      text = Array.from(Array(value.length)).reduce(function (s) {\n        return s + '\\u2022';\n      }, '');\n    }\n\n    var field = _this4._field && _this4._field.getField();\n    if (!isValued(text) && field) {\n      text = field.value;\n    }\n\n    var min = getField(props.resize, { min: DEFAULT_TEXT_FIELD_SIZE }, 'min');\n    var width = getTextWidth(text, field);\n    if (width === null || !field) {\n      // some error happened, don't do other logic\n      return width || min;\n    }\n\n    var max = props.resize.max;\n\n\n    if (_this4._container) {\n      var indicator = _this4._container.querySelector('.md-text-field-inline-indicator');\n      if (indicator) {\n        width += indicator.getBoundingClientRect().width;\n      }\n\n      var iconContainer = _this4._container.querySelector('.md-text-field-icon-container');\n      if (iconContainer) {\n        // There is conditionally an icon before and after the text field, or only an icon before/after\n        var _iconContainer$childr = iconContainer.children,\n            first = _iconContainer$childr[0],\n            second = _iconContainer$childr[1],\n            third = _iconContainer$childr[2];\n\n        if (first.classList.contains('md-icon')) {\n          width += first.getBoundingClientRect().width;\n          width += parseInt(window.getComputedStyle(second).marginLeft, 10);\n\n          if (third) {\n            width += _this4._calcIconWidth(third);\n          }\n        } else if (second) {\n          width += _this4._calcIconWidth(second);\n        }\n      }\n    }\n\n    return Math.ceil(Math.min(max, Math.max(min, width)));\n  };\n\n  this._isErrored = function () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this4.props,\n        value = _ref.value,\n        maxLength = _ref.maxLength,\n        required = _ref.required;\n\n    var error = _this4.state.error;\n\n    var currentLength = _this4._getLength(value);\n    if (required && error) {\n      error = !isValued(value);\n    }\n\n    if (maxLength) {\n      error = error || currentLength > maxLength;\n    }\n\n    return error;\n  };\n\n  this._handleContainerClick = function (e) {\n    if (_this4.props.onClick) {\n      _this4.props.onClick(e);\n    }\n\n    if (!_this4.props.disabled) {\n      _this4.focus();\n    }\n  };\n\n  this._handleBlur = function (e) {\n    _this4._focus = false;\n    var _props5 = _this4.props,\n        required = _props5.required,\n        maxLength = _props5.maxLength,\n        onBlur = _props5.onBlur;\n\n    if (onBlur) {\n      onBlur(e);\n    }\n\n    var value = e.target.value;\n\n    var state = {\n      active: false,\n      error: required && !isValued(value) || maxLength && String(value).length > maxLength\n    };\n\n    if (!_this4.props.block) {\n      state.floating = isValued(value);\n    }\n\n    _this4.setState(state);\n  };\n\n  this._handleFocus = function (e) {\n    _this4._focus = true;\n    var _props6 = _this4.props,\n        onFocus = _props6.onFocus,\n        block = _props6.block;\n\n    if (onFocus) {\n      onFocus(e);\n    }\n\n    var state = { active: true };\n    if (!block) {\n      state.floating = true;\n    }\n\n    _this4.setState(state);\n  };\n\n  this._handleChange = function (e) {\n    var _props7 = _this4.props,\n        onChange = _props7.onChange,\n        maxLength = _props7.maxLength,\n        required = _props7.required,\n        resize = _props7.resize;\n    var value = e.target.value;\n\n    if (onChange) {\n      onChange(e.target.value, e);\n    }\n\n    var currentLength = value.length;\n    var state = void 0;\n    if (typeof maxLength !== 'undefined') {\n      state = { currentLength: currentLength, error: currentLength > maxLength };\n    } else if (required && _this4.state.error) {\n      state = { error: !currentLength };\n    }\n\n    if (typeof _this4.props.value === 'undefined' && resize) {\n      var width = _this4._calcWidth(value);\n      if (!resize.disableShrink || !_this4.state.styles || width > _this4.state.styles.width) {\n        state = state || {};\n        state.styles = _extends({}, _this4.state.styles, { width: width });\n      }\n    }\n\n    if (state) {\n      _this4.setState(state);\n    }\n  };\n\n  this._togglePasswordField = function () {\n    _this4.setState({ passwordVisible: !_this4.state.passwordVisible }, _this4.focus);\n  };\n};\n\nexport default TextField;"]},"metadata":{},"sourceType":"module"}