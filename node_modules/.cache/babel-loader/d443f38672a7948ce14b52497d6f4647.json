{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/** @module utils/bem */\n\n\nimport cn from 'classnames';\n/**\n * A utility function to apply BEM class names to an element.\n *\n * ### Examples:\n * ```js\n * bem('class') === 'class'\n * bem('block', 'element') === 'block__element'\n * bem('block', 'element', 'sub-element') === 'block__element__sub-element'\n * bem('block', { 'mod-1': true, 'mod-2': false }) === 'block block--mod-1'\n * bem('block', 'element', { 'mod-1': false, 'mod-2': true }) === 'block__element block__element--mod-2'\n * bem('block', 'element', {\n *   'mod-1': false,\n *   'mod-2': true,\n * }, 'other', 'class-names') === 'block__element block__element--mod-2 other class-names'\n * ```\n *\n * @param {...String} blocks - 1 to many blocks to use. These names will be joined\n *    with underscores.\n * @param {Object=} modifiers - Any conditional modifiers to apply to the blocks. Each\n *    key in this object will be applied as a `--suffix` to the blocks ONLY when\n *    their value is true-ish.\n * @param {...String} others - Any additional class names to apply.\n * @return {String} the bem-formatted className string.\n */\n\nexport default function bem() {\n  var base = [];\n  var modifiers = null;\n  var remaining = -1;\n\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  args.some(function (arg, i) {\n    if (arg) {\n      var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);\n\n      if (type === 'number' || type === 'string') {\n        base.push(arg);\n      } else if (type === 'object') {\n        modifiers = arg;\n        remaining = i + 1;\n      }\n    }\n\n    return modifiers;\n  });\n  var element = base.join('__');\n\n  if (modifiers) {\n    modifiers = Object.keys(modifiers).reduce(function (obj, key) {\n      obj[element + '--' + key] = modifiers[key];\n      return obj;\n    }, {});\n  }\n\n  var classes = remaining > -1 ? args.slice(remaining) : null;\n  return cn(element, modifiers, classes).trim();\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/bem.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","cn","bem","base","modifiers","remaining","_len","arguments","length","args","Array","_key","some","arg","i","type","push","element","join","Object","keys","reduce","key","classes","slice","trim"],"mappings":"AAAA,IAAIA,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA3D,GAAsE,UAAUC,GAAV,EAAe;AAAE,SAAO,OAAOA,GAAd;AAAoB,CAA3G,GAA8G,UAAUA,GAAV,EAAe;AAAE,SAAOA,GAAG,IAAI,OAAOF,MAAP,KAAkB,UAAzB,IAAuCE,GAAG,CAACC,WAAJ,KAAoBH,MAA3D,IAAqEE,GAAG,KAAKF,MAAM,CAACI,SAApF,GAAgG,QAAhG,GAA2G,OAAOF,GAAzH;AAA+H,CAA5Q;AAEA;;;AACA,OAAOG,EAAP,MAAe,YAAf;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,eAAe,SAASC,GAAT,GAAe;AAC5B,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,SAAS,GAAG,CAAC,CAAjB;;AAEA,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACJ,IAAD,CAAzC,EAAiDK,IAAI,GAAG,CAA7D,EAAgEA,IAAI,GAAGL,IAAvE,EAA6EK,IAAI,EAAjF,EAAqF;AACnFF,IAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAEDF,EAAAA,IAAI,CAACG,IAAL,CAAU,UAAUC,GAAV,EAAeC,CAAf,EAAkB;AAC1B,QAAID,GAAJ,EAAS;AACP,UAAIE,IAAI,GAAG,OAAOF,GAAP,KAAe,WAAf,GAA6B,WAA7B,GAA2ClB,OAAO,CAACkB,GAAD,CAA7D;;AACA,UAAIE,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,QAAlC,EAA4C;AAC1CZ,QAAAA,IAAI,CAACa,IAAL,CAAUH,GAAV;AACD,OAFD,MAEO,IAAIE,IAAI,KAAK,QAAb,EAAuB;AAC5BX,QAAAA,SAAS,GAAGS,GAAZ;AACAR,QAAAA,SAAS,GAAGS,CAAC,GAAG,CAAhB;AACD;AACF;;AACD,WAAOV,SAAP;AACD,GAXD;AAaA,MAAIa,OAAO,GAAGd,IAAI,CAACe,IAAL,CAAU,IAAV,CAAd;;AACA,MAAId,SAAJ,EAAe;AACbA,IAAAA,SAAS,GAAGe,MAAM,CAACC,IAAP,CAAYhB,SAAZ,EAAuBiB,MAAvB,CAA8B,UAAUvB,GAAV,EAAewB,GAAf,EAAoB;AAC5DxB,MAAAA,GAAG,CAACmB,OAAO,GAAG,IAAV,GAAiBK,GAAlB,CAAH,GAA4BlB,SAAS,CAACkB,GAAD,CAArC;AACA,aAAOxB,GAAP;AACD,KAHW,EAGT,EAHS,CAAZ;AAID;;AACD,MAAIyB,OAAO,GAAGlB,SAAS,GAAG,CAAC,CAAb,GAAiBI,IAAI,CAACe,KAAL,CAAWnB,SAAX,CAAjB,GAAyC,IAAvD;AACA,SAAOJ,EAAE,CAACgB,OAAD,EAAUb,SAAV,EAAqBmB,OAArB,CAAF,CAAgCE,IAAhC,EAAP;AACD","sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** @module utils/bem */\nimport cn from 'classnames';\n\n/**\n * A utility function to apply BEM class names to an element.\n *\n * ### Examples:\n * ```js\n * bem('class') === 'class'\n * bem('block', 'element') === 'block__element'\n * bem('block', 'element', 'sub-element') === 'block__element__sub-element'\n * bem('block', { 'mod-1': true, 'mod-2': false }) === 'block block--mod-1'\n * bem('block', 'element', { 'mod-1': false, 'mod-2': true }) === 'block__element block__element--mod-2'\n * bem('block', 'element', {\n *   'mod-1': false,\n *   'mod-2': true,\n * }, 'other', 'class-names') === 'block__element block__element--mod-2 other class-names'\n * ```\n *\n * @param {...String} blocks - 1 to many blocks to use. These names will be joined\n *    with underscores.\n * @param {Object=} modifiers - Any conditional modifiers to apply to the blocks. Each\n *    key in this object will be applied as a `--suffix` to the blocks ONLY when\n *    their value is true-ish.\n * @param {...String} others - Any additional class names to apply.\n * @return {String} the bem-formatted className string.\n */\nexport default function bem() {\n  var base = [];\n  var modifiers = null;\n  var remaining = -1;\n\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  args.some(function (arg, i) {\n    if (arg) {\n      var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);\n      if (type === 'number' || type === 'string') {\n        base.push(arg);\n      } else if (type === 'object') {\n        modifiers = arg;\n        remaining = i + 1;\n      }\n    }\n    return modifiers;\n  });\n\n  var element = base.join('__');\n  if (modifiers) {\n    modifiers = Object.keys(modifiers).reduce(function (obj, key) {\n      obj[element + '--' + key] = modifiers[key];\n      return obj;\n    }, {});\n  }\n  var classes = remaining > -1 ? args.slice(remaining) : null;\n  return cn(element, modifiers, classes).trim();\n}"]},"metadata":{},"sourceType":"module"}