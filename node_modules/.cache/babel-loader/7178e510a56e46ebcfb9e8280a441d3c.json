{"ast":null,"code":"/** @module utils/Positioning/getTextWidth */\nvar cachedCanvas = void 0;\n/**\n * A utility function to measure the width (in px) of any text. It will require a canvas\n * and an element to use to determine the current fonts to apply since different fonts will\n * have different widths.\n *\n * This isn't fully accurate since some browsers handle the calculations a bit differently so\n * they are off by a 0-3px\n *\n * @param {String} text - The text to measure the width\n * @param {HTMLElement} el - The element to use to determine the current font for the text.\n * @param {HTMLElement=} canvas - An optional canvas to use for doing the calculations. If this\n *    is omitted, it will just use the locally created canvas to do the calculations.\n * @return {number} this will either return null if there is a problem calculating the width or\n *    the length (in px) of the text.\n */\n\nexport default function getTextWidth(text, el, canvas) {\n  if (!el) {\n    return null;\n  }\n\n  if (!canvas) {\n    if (!cachedCanvas) {\n      cachedCanvas = document.createElement('canvas');\n    }\n\n    canvas = cachedCanvas;\n  }\n\n  var context = canvas.getContext('2d');\n\n  if (!context) {\n    // context doesn't exist in testing without complicated mocks\n    return null;\n  }\n\n  var styles = window.getComputedStyle(el);\n  var font = styles.font; // Some browsers do not actually supply the font style since they are on an older version of CSSProperties,\n  // so the font string needs to be made manually.\n\n  if (!font) {\n    // font-style font-variant font-weight font-size/line-height font-family\n    var sizing = styles.fontSize + ' / ' + styles.lineHeight + ' ' + styles.fontFamily;\n    font = styles.fontStyle + ' ' + styles.fontVariant + ' ' + styles.fontWeight + ' ' + sizing;\n  }\n\n  context.font = font;\n  return context.measureText(text).width;\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/Positioning/getTextWidth.js"],"names":["cachedCanvas","getTextWidth","text","el","canvas","document","createElement","context","getContext","styles","window","getComputedStyle","font","sizing","fontSize","lineHeight","fontFamily","fontStyle","fontVariant","fontWeight","measureText","width"],"mappings":"AAAA;AAEA,IAAIA,YAAY,GAAG,KAAK,CAAxB;AAEA;;;;;;;;;;;;;;;;AAeA,eAAe,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,EAA5B,EAAgCC,MAAhC,EAAwC;AACrD,MAAI,CAACD,EAAL,EAAS;AACP,WAAO,IAAP;AACD;;AAED,MAAI,CAACC,MAAL,EAAa;AACX,QAAI,CAACJ,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAGK,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACD;;AAEDF,IAAAA,MAAM,GAAGJ,YAAT;AACD;;AAED,MAAIO,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd;;AACA,MAAI,CAACD,OAAL,EAAc;AACZ;AACA,WAAO,IAAP;AACD;;AAED,MAAIE,MAAM,GAAGC,MAAM,CAACC,gBAAP,CAAwBR,EAAxB,CAAb;AACA,MAAIS,IAAI,GAAGH,MAAM,CAACG,IAAlB,CApBqD,CAqBrD;AACA;;AACA,MAAI,CAACA,IAAL,EAAW;AACT;AACA,QAAIC,MAAM,GAAGJ,MAAM,CAACK,QAAP,GAAkB,KAAlB,GAA0BL,MAAM,CAACM,UAAjC,GAA8C,GAA9C,GAAoDN,MAAM,CAACO,UAAxE;AACAJ,IAAAA,IAAI,GAAGH,MAAM,CAACQ,SAAP,GAAmB,GAAnB,GAAyBR,MAAM,CAACS,WAAhC,GAA8C,GAA9C,GAAoDT,MAAM,CAACU,UAA3D,GAAwE,GAAxE,GAA8EN,MAArF;AACD;;AAEDN,EAAAA,OAAO,CAACK,IAAR,GAAeA,IAAf;AACA,SAAOL,OAAO,CAACa,WAAR,CAAoBlB,IAApB,EAA0BmB,KAAjC;AACD","sourcesContent":["/** @module utils/Positioning/getTextWidth */\n\nvar cachedCanvas = void 0;\n\n/**\n * A utility function to measure the width (in px) of any text. It will require a canvas\n * and an element to use to determine the current fonts to apply since different fonts will\n * have different widths.\n *\n * This isn't fully accurate since some browsers handle the calculations a bit differently so\n * they are off by a 0-3px\n *\n * @param {String} text - The text to measure the width\n * @param {HTMLElement} el - The element to use to determine the current font for the text.\n * @param {HTMLElement=} canvas - An optional canvas to use for doing the calculations. If this\n *    is omitted, it will just use the locally created canvas to do the calculations.\n * @return {number} this will either return null if there is a problem calculating the width or\n *    the length (in px) of the text.\n */\nexport default function getTextWidth(text, el, canvas) {\n  if (!el) {\n    return null;\n  }\n\n  if (!canvas) {\n    if (!cachedCanvas) {\n      cachedCanvas = document.createElement('canvas');\n    }\n\n    canvas = cachedCanvas;\n  }\n\n  var context = canvas.getContext('2d');\n  if (!context) {\n    // context doesn't exist in testing without complicated mocks\n    return null;\n  }\n\n  var styles = window.getComputedStyle(el);\n  var font = styles.font;\n  // Some browsers do not actually supply the font style since they are on an older version of CSSProperties,\n  // so the font string needs to be made manually.\n  if (!font) {\n    // font-style font-variant font-weight font-size/line-height font-family\n    var sizing = styles.fontSize + ' / ' + styles.lineHeight + ' ' + styles.fontFamily;\n    font = styles.fontStyle + ' ' + styles.fontVariant + ' ' + styles.fontWeight + ' ' + sizing;\n  }\n\n  context.font = font;\n  return context.measureText(text).width;\n}"]},"metadata":{},"sourceType":"module"}