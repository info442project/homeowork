{"ast":null,"code":"import isValidDate from './isValidDate';\n/**\n * Takes in a date and returns a new date at the specified day of week.\n *\n * Examples:\n * // to Sunday\n * - toDayOfWeek(new Date(2018, 0, 1), 0) == new Date(2017, 11, 31)\n *\n * // to Monday\n * - toDayOfWeek(new Date(2018, 0, 1), 1) == new Date(2018, 0, 1)\n *\n * @param {Date} date - The date to convert to a day of week\n * @param {number=0} dow - The day of the week to convert to\n * @return {Date} the new date set at the day of week or null if the\n *    date is invalid or false-ish.\n */\n\nexport default function toDayOfWeek(date) {\n  var dow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (!isValidDate(date)) {\n    return null;\n  }\n\n  var d = new Date(date);\n  var day = date.getDay();\n  var diff = d.getDate() - day + dow;\n  return new Date(d.setDate(diff));\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/dates/toDayOfWeek.js"],"names":["isValidDate","toDayOfWeek","date","dow","arguments","length","undefined","d","Date","day","getDay","diff","getDate","setDate"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AAEA;;;;;;;;;;;;;;;;AAeA,eAAe,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACxC,MAAIC,GAAG,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,CAA9E;;AAEA,MAAI,CAACJ,WAAW,CAACE,IAAD,CAAhB,EAAwB;AACtB,WAAO,IAAP;AACD;;AAED,MAAIK,CAAC,GAAG,IAAIC,IAAJ,CAASN,IAAT,CAAR;AACA,MAAIO,GAAG,GAAGP,IAAI,CAACQ,MAAL,EAAV;AACA,MAAIC,IAAI,GAAGJ,CAAC,CAACK,OAAF,KAAcH,GAAd,GAAoBN,GAA/B;AACA,SAAO,IAAIK,IAAJ,CAASD,CAAC,CAACM,OAAF,CAAUF,IAAV,CAAT,CAAP;AACD","sourcesContent":["import isValidDate from './isValidDate';\n\n/**\n * Takes in a date and returns a new date at the specified day of week.\n *\n * Examples:\n * // to Sunday\n * - toDayOfWeek(new Date(2018, 0, 1), 0) == new Date(2017, 11, 31)\n *\n * // to Monday\n * - toDayOfWeek(new Date(2018, 0, 1), 1) == new Date(2018, 0, 1)\n *\n * @param {Date} date - The date to convert to a day of week\n * @param {number=0} dow - The day of the week to convert to\n * @return {Date} the new date set at the day of week or null if the\n *    date is invalid or false-ish.\n */\nexport default function toDayOfWeek(date) {\n  var dow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (!isValidDate(date)) {\n    return null;\n  }\n\n  var d = new Date(date);\n  var day = date.getDay();\n  var diff = d.getDate() - day + dow;\n  return new Date(d.setDate(diff));\n}"]},"metadata":{},"sourceType":"module"}