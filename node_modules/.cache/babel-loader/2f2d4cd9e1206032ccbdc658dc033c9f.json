{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/** @module utils/caseInsensitiveFilter */\n\n\nimport React from 'react';\n/**\n * This function does a simple ignore case search of some `filterText` for every\n * item in a `haystack`. It will only include items that are:\n *  - not null or undefined\n *  - valid React Components\n *  - a number or string that contains each letter/number in exact order ignoring case\n *  - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.\n *\n * Example:\n *\n * ```js\n * const haystack = ['Apple', 'Banana', 'Orange'];\n * caseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];\n * caseInsensitiveFilter(haystack, 'ae') // []\n * ```\n *\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search\n * @param {string} filterText - the filter text to use.\n * @param {string=} dataLabel - the data label to use if the element is an object.\n *\n * @return {Array.<string|number|Object|function>} a filtered list.\n */\n\nexport default function caseInsensitiveFilter(haystack, filterText, dataLabel) {\n  var needle = filterText.toLowerCase();\n  return haystack.filter(function (hay) {\n    if (hay === null || typeof hay === 'undefined') {\n      return false;\n    } else if (React.isValidElement(hay)) {\n      return true;\n    }\n\n    var value = void 0;\n\n    switch (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) {\n      case 'string':\n      case 'number':\n        value = hay.toString();\n        break;\n\n      default:\n        value = hay[dataLabel];\n    }\n\n    return value && value.toLowerCase().indexOf(needle) !== -1;\n  });\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/caseInsensitiveFilter.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","React","caseInsensitiveFilter","haystack","filterText","dataLabel","needle","toLowerCase","filter","hay","isValidElement","value","toString","indexOf"],"mappings":"AAAA,IAAIA,OAAO,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA3D,GAAsE,UAAUC,GAAV,EAAe;AAAE,SAAO,OAAOA,GAAd;AAAoB,CAA3G,GAA8G,UAAUA,GAAV,EAAe;AAAE,SAAOA,GAAG,IAAI,OAAOF,MAAP,KAAkB,UAAzB,IAAuCE,GAAG,CAACC,WAAJ,KAAoBH,MAA3D,IAAqEE,GAAG,KAAKF,MAAM,CAACI,SAApF,GAAgG,QAAhG,GAA2G,OAAOF,GAAzH;AAA+H,CAA5Q;AAEA;;;AACA,OAAOG,KAAP,MAAkB,OAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,eAAe,SAASC,qBAAT,CAA+BC,QAA/B,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgE;AAC7E,MAAIC,MAAM,GAAGF,UAAU,CAACG,WAAX,EAAb;AAEA,SAAOJ,QAAQ,CAACK,MAAT,CAAgB,UAAUC,GAAV,EAAe;AACpC,QAAIA,GAAG,KAAK,IAAR,IAAgB,OAAOA,GAAP,KAAe,WAAnC,EAAgD;AAC9C,aAAO,KAAP;AACD,KAFD,MAEO,IAAIR,KAAK,CAACS,cAAN,CAAqBD,GAArB,CAAJ,EAA+B;AACpC,aAAO,IAAP;AACD;;AAED,QAAIE,KAAK,GAAG,KAAK,CAAjB;;AACA,YAAQ,OAAOF,GAAP,KAAe,WAAf,GAA6B,WAA7B,GAA2Cd,OAAO,CAACc,GAAD,CAA1D;AACE,WAAK,QAAL;AACA,WAAK,QAAL;AACEE,QAAAA,KAAK,GAAGF,GAAG,CAACG,QAAJ,EAAR;AACA;;AACF;AACED,QAAAA,KAAK,GAAGF,GAAG,CAACJ,SAAD,CAAX;AANJ;;AASA,WAAOM,KAAK,IAAIA,KAAK,CAACJ,WAAN,GAAoBM,OAApB,CAA4BP,MAA5B,MAAwC,CAAC,CAAzD;AACD,GAlBM,CAAP;AAmBD","sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** @module utils/caseInsensitiveFilter */\nimport React from 'react';\n\n/**\n * This function does a simple ignore case search of some `filterText` for every\n * item in a `haystack`. It will only include items that are:\n *  - not null or undefined\n *  - valid React Components\n *  - a number or string that contains each letter/number in exact order ignoring case\n *  - an object's `dataLabel` value that contains each letter/number in exact order ignoring case.\n *\n * Example:\n *\n * ```js\n * const haystack = ['Apple', 'Banana', 'Orange'];\n * caseInsensitiveFilter(haystack, 'An') // ['Banana', 'Orange'];\n * caseInsensitiveFilter(haystack, 'ae') // []\n * ```\n *\n * @param {Array.<string|number|Object|function>} haystack - the haystack to search\n * @param {string} filterText - the filter text to use.\n * @param {string=} dataLabel - the data label to use if the element is an object.\n *\n * @return {Array.<string|number|Object|function>} a filtered list.\n */\nexport default function caseInsensitiveFilter(haystack, filterText, dataLabel) {\n  var needle = filterText.toLowerCase();\n\n  return haystack.filter(function (hay) {\n    if (hay === null || typeof hay === 'undefined') {\n      return false;\n    } else if (React.isValidElement(hay)) {\n      return true;\n    }\n\n    var value = void 0;\n    switch (typeof hay === 'undefined' ? 'undefined' : _typeof(hay)) {\n      case 'string':\n      case 'number':\n        value = hay.toString();\n        break;\n      default:\n        value = hay[dataLabel];\n    }\n\n    return value && value.toLowerCase().indexOf(needle) !== -1;\n  });\n}"]},"metadata":{},"sourceType":"module"}