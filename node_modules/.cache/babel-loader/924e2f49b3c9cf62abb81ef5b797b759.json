{"ast":null,"code":"import isValidDate from './isValidDate';\nimport getDaysInMonth from './getDaysInMonth';\n/**\n * Adds the specified number of months to a provided date. If the date\n * is null, an invalid formatted date, or not a Date instance, null\n * will be returned instead.\n *\n * When a new month is returned, it will make sure that the date matches\n * the date in the old month if possible, if the new month does not have\n * include the new date, the `newMonthDate` will be used instead.\n *\n * @param {Date} date - The date to update\n * @param {number} amount - The number of months to add. This can be positive\n *    or negative.\n * @param {number=1} newMonthDate - An optional date to set in the new month\n *    if the new month does not have the old date.\n * @return {Date} a new date with the number of days added or null.\n */\n\nexport default function addMonth(date, amount, newMonthDate) {\n  if (!isValidDate(date)) {\n    return null;\n  } else if (amount === 0) {\n    return new Date(date);\n  }\n\n  if (!newMonthDate) {\n    // 0 is invalid for this case\n    newMonthDate = date.getDate();\n  }\n\n  var d = new Date(date);\n  d.setDate(1); // reset to first day to prevent month overflows\n\n  d.setMonth(d.getMonth() + amount);\n\n  if (newMonthDate !== 1 && newMonthDate <= getDaysInMonth(d)) {\n    // set the date back to the correct day if it still exists within the month\n    d.setDate(newMonthDate);\n  }\n\n  return d;\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/dates/addMonth.js"],"names":["isValidDate","getDaysInMonth","addMonth","date","amount","newMonthDate","Date","getDate","d","setDate","setMonth","getMonth"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA;;;;;;;;;;;;;;;;;AAgBA,eAAe,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgCC,YAAhC,EAA8C;AAC3D,MAAI,CAACL,WAAW,CAACG,IAAD,CAAhB,EAAwB;AACtB,WAAO,IAAP;AACD,GAFD,MAEO,IAAIC,MAAM,KAAK,CAAf,EAAkB;AACvB,WAAO,IAAIE,IAAJ,CAASH,IAAT,CAAP;AACD;;AAED,MAAI,CAACE,YAAL,EAAmB;AACjB;AACAA,IAAAA,YAAY,GAAGF,IAAI,CAACI,OAAL,EAAf;AACD;;AAED,MAAIC,CAAC,GAAG,IAAIF,IAAJ,CAASH,IAAT,CAAR;AACAK,EAAAA,CAAC,CAACC,OAAF,CAAU,CAAV,EAb2D,CAa7C;;AACdD,EAAAA,CAAC,CAACE,QAAF,CAAWF,CAAC,CAACG,QAAF,KAAeP,MAA1B;;AAEA,MAAIC,YAAY,KAAK,CAAjB,IAAsBA,YAAY,IAAIJ,cAAc,CAACO,CAAD,CAAxD,EAA6D;AAC3D;AACAA,IAAAA,CAAC,CAACC,OAAF,CAAUJ,YAAV;AACD;;AAED,SAAOG,CAAP;AACD","sourcesContent":["import isValidDate from './isValidDate';\nimport getDaysInMonth from './getDaysInMonth';\n\n/**\n * Adds the specified number of months to a provided date. If the date\n * is null, an invalid formatted date, or not a Date instance, null\n * will be returned instead.\n *\n * When a new month is returned, it will make sure that the date matches\n * the date in the old month if possible, if the new month does not have\n * include the new date, the `newMonthDate` will be used instead.\n *\n * @param {Date} date - The date to update\n * @param {number} amount - The number of months to add. This can be positive\n *    or negative.\n * @param {number=1} newMonthDate - An optional date to set in the new month\n *    if the new month does not have the old date.\n * @return {Date} a new date with the number of days added or null.\n */\nexport default function addMonth(date, amount, newMonthDate) {\n  if (!isValidDate(date)) {\n    return null;\n  } else if (amount === 0) {\n    return new Date(date);\n  }\n\n  if (!newMonthDate) {\n    // 0 is invalid for this case\n    newMonthDate = date.getDate();\n  }\n\n  var d = new Date(date);\n  d.setDate(1); // reset to first day to prevent month overflows\n  d.setMonth(d.getMonth() + amount);\n\n  if (newMonthDate !== 1 && newMonthDate <= getDaysInMonth(d)) {\n    // set the date back to the correct day if it still exists within the month\n    d.setDate(newMonthDate);\n  }\n\n  return d;\n}"]},"metadata":{},"sourceType":"module"}