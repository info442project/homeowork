{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { UP, DOWN, LEFT, RIGHT } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport minMaxLoop from '../utils/NumberUtils/minMaxLoop';\nimport controlled from '../utils/PropTypes/controlled';\nimport SelectionControl from './SelectionControl';\n/**\n * A custom PropTypes validator to make sure that each `control` in the `controls` prop\n * contains the given `propName`, or the `SelectionControlGroup` has defined that prop.\n */\n\nfunction requiredByAllControls(validator) {\n  return function validate(props, propName, component) {\n    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      others[_key - 3] = arguments[_key];\n    }\n\n    var err = validator.apply(undefined, [props, propName, component].concat(others));\n\n    if (!err && typeof props[propName] === 'undefined') {\n      var invalids = props.controls.filter(function (c) {\n        return !c[propName];\n      }).map(function (_, i) {\n        return i;\n      });\n\n      if (invalids.length) {\n        var invalidPrefix = invalids.length === props.controls.length ? 'All `controls`' : 'The `controls` at indexes `' + invalids.join('`, `') + '`';\n        var invalidMsg = invalidPrefix + ' are missing the `' + propName + '` prop.';\n        err = new Error('The `' + propName + '` prop is required to make `' + component + '` accessible for users of ' + ('assistive technologies such as screen readers. Either add the `' + propName + '` to the `' + component + '` ') + ('or add the `' + propName + '` to each `control` in the `controls` prop. ' + invalidMsg));\n      }\n    }\n\n    return err;\n  };\n}\n/**\n * The `SelectionControlGroup` component is used to simplify the generation of a list\n * of `SelectionControl`. Any common props are extracted to this component and passed\n * to the `SelectionControl`.\n */\n\n\nvar SelectionControlGroup = function (_PureComponent) {\n  _inherits(SelectionControlGroup, _PureComponent);\n\n  function SelectionControlGroup(props) {\n    _classCallCheck(this, SelectionControlGroup);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n\n    _this._setGroup = function (group) {\n      _this._group = group;\n    };\n\n    _this._handleChange = function (e) {\n      var value = e.target.value;\n\n      if (_this.props.type === 'checkbox') {\n        var checked = e.target.checked;\n        var currentValue = getField(_this.props, _this.state, 'value');\n\n        var existsIndex = _this._isChecked(currentValue, value, 'checkbox');\n\n        if (!existsIndex && checked) {\n          value = '' + (currentValue ? currentValue + ',' : '') + value;\n        } else if (existsIndex > -1 && !checked) {\n          value = currentValue.replace(new RegExp(value + ',|,' + value + '|^' + value + '$'), '');\n        } else {\n          value = currentValue;\n        }\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(value, e);\n      }\n\n      if (typeof _this.props.value === 'undefined') {\n        _this.setState({\n          value: value\n        });\n      }\n    };\n\n    _this._handleKeyDown = function (e) {\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(e);\n      }\n\n      var key = e.which || e.keyCode;\n      var dec = key === UP || key === LEFT;\n      var inc = key === DOWN || key === RIGHT;\n\n      if (!_this._group || !dec && !inc) {\n        return;\n      }\n\n      e.preventDefault();\n\n      var radios = _this._group.querySelectorAll('*[role=\"radio\"]');\n\n      _this._activeIndex = minMaxLoop(_this._activeIndex, 0, radios.length - 1, inc);\n\n      radios[_this._activeIndex].focus();\n\n      var value = _this.props.controls[_this._activeIndex].value;\n\n      if (getField(_this.props, _this.state, 'value') !== value) {\n        if (_this.props.onChange) {\n          _this.props.onChange(value, e);\n        }\n\n        if (typeof _this.props.value === 'undefined') {\n          _this.setState({\n            value: value\n          });\n        }\n      }\n    };\n\n    var radio = props.type === 'radio';\n    _this.state = {};\n\n    if (typeof props.value === 'undefined') {\n      var value = props.defaultValue;\n\n      if (typeof value === 'undefined') {\n        value = radio ? props.controls[0].value : '';\n      }\n\n      _this.state.value = value;\n    }\n\n    var groupValue = getField(props, _this.state, 'value');\n    _this._activeIndex = -1;\n    props.controls.some(function (_ref, i) {\n      var value = _ref.value;\n\n      if (value === groupValue) {\n        _this._activeIndex = i;\n      }\n\n      return _this._activeIndex > -1;\n    });\n    return _this;\n  }\n\n  SelectionControlGroup.prototype._isChecked = function _isChecked(value, controlValue, type) {\n    return type === 'radio' ? value === controlValue : value.split(',').indexOf(controlValue) !== -1;\n  };\n\n  SelectionControlGroup.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        id = _props.id,\n        name = _props.name,\n        type = _props.type,\n        label = _props.label,\n        labelClassName = _props.labelClassName,\n        className = _props.className,\n        controlStyle = _props.controlStyle,\n        controlClassName = _props.controlClassName,\n        Component = _props.component,\n        LabelComponent = _props.labelComponent,\n        inline = _props.inline,\n        disabled = _props.disabled,\n        checkedRadioIcon = _props.checkedRadioIcon,\n        uncheckedRadioIcon = _props.uncheckedRadioIcon,\n        checkedCheckboxIcon = _props.checkedCheckboxIcon,\n        uncheckedCheckboxIcon = _props.uncheckedCheckboxIcon,\n        ControlComponent = _props.controlComponent,\n        propValue = _props.value,\n        propControls = _props.controls,\n        defaultValue = _props.defaultValue,\n        props = _objectWithoutProperties(_props, ['id', 'name', 'type', 'label', 'labelClassName', 'className', 'controlStyle', 'controlClassName', 'component', 'labelComponent', 'inline', 'disabled', 'checkedRadioIcon', 'uncheckedRadioIcon', 'checkedCheckboxIcon', 'uncheckedCheckboxIcon', 'controlComponent', 'value', 'controls', 'defaultValue']);\n\n    var value = getField(this.props, this.state, 'value');\n    var radio = type === 'radio';\n    var controls = this.props.controls.map(function (control, i) {\n      var style = control.style;\n\n      if (controlStyle) {\n        style = style ? _extends({}, controlStyle, style) : controlStyle;\n      }\n\n      var checked = _this2._isChecked(value, control.value, type);\n\n      var controlProps = _extends({\n        id: '' + id + i,\n        key: 'control' + i,\n        name: '' + name + (type === 'checkbox' ? '[]' : ''),\n        type: type,\n        inline: inline,\n        disabled: disabled,\n        checked: checked,\n        tabIndex: !radio || checked || i === 0 && _this2._activeIndex === -1 ? undefined : -1,\n        checkedRadioIcon: checkedRadioIcon,\n        uncheckedRadioIcon: uncheckedRadioIcon,\n        checkedCheckboxIcon: checkedCheckboxIcon,\n        uncheckedCheckboxIcon: uncheckedCheckboxIcon,\n        'aria-describedby': id + '-group-label'\n      }, control, {\n        style: style,\n        className: cn(controlClassName, control.className)\n      });\n\n      return React.createElement(ControlComponent, controlProps);\n    });\n    var ariaLabel = void 0;\n\n    if (label) {\n      ariaLabel = React.createElement(LabelComponent, {\n        className: labelClassName,\n        id: id + '-group-label'\n      }, label);\n    }\n\n    return React.createElement(Component, _extends({}, props, {\n      ref: this._setGroup,\n      className: cn('md-selection-control-group', className),\n      onChange: this._handleChange,\n      onKeyDown: radio ? this._handleKeyDown : null\n    }), ariaLabel, controls);\n  };\n\n  return SelectionControlGroup;\n}(PureComponent);\n\nSelectionControlGroup.propTypes = {\n  /**\n   * An optional style to apply to the container.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the container.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An optional style to apply to every `SelectionControl`. This will be merged with any `style`\n   * that a `control` might have.\n   */\n  controlStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to every `SelectionControl`. This will be merged with any\n   * `className` that a `control` might have.\n   */\n  controlClassName: PropTypes.string,\n\n  /**\n   * An optional base id to apply to each `SelectionControl`. When this is included, the id for\n   * each control will start with this and end with their current index. If this is omitted,\n   * each `control` in the `controls` prop *must* have an `id` prop. This is required for\n   * accessibility.\n   */\n  id: requiredByAllControls(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n\n  /**\n   * The type to apply to each `SelectionControl` in the group. Only `checkbox` and `radio` is\n   * valid for a grouping.\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired,\n\n  /**\n   * The component to render the `SelectionControlGroup` in. This can only be a valid dom element\n   * since it relies on the ref callback to add keyboard accessibility.\n   */\n  component: PropTypes.string.isRequired,\n\n  /**\n   * An optional label to display above the group of `SelectionControl`s.\n   */\n  label: PropTypes.node,\n\n  /**\n   * An optional className to apply to the node surrounding the `label` prop.\n   */\n  labelClassName: PropTypes.string,\n\n  /**\n   * The component to render each item in the `controls` list as. By default, this will be the\n   * `SelectionControl` component but you can change this to any React component that accepts\n   * the selection control props. It is currently provided:\n   *\n   * ```js\n   * const controlProps = {\n   *   id: `${id}${i}`,\n   *   key: `control${i}`,\n   *   name: `${name}${type === 'checkbox' ? '[]' : ''}`,\n   *   type,\n   *   inline,\n   *   disabled,\n   *   checked,\n   *   tabIndex: !radio || checked || (i === 0 && this._activeIndex === -1) ? undefined : -1,\n   *   checkedRadioIcon,\n   *   uncheckedRadioIcon,\n   *   checkedCheckboxIcon,\n   *   uncheckedCheckboxIcon,\n   *   ...control,\n   *   style,\n   *   className: cn(controlClassName, control.className),\n   * };\n   * ```\n   */\n  controlComponent: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]).isRequired,\n\n  /**\n   * The component to render the optional `label` in.\n   */\n  labelComponent: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]).isRequired,\n\n  /**\n   * An optional function to call when any `SelectionControl`'s `checked` state is changed\n   * in the group. If the `type` of the group is `radio`, the `value` of the `checked` radio\n   * will be given in the callback. If the `type` of the group is `checkbox`, a comma-delimited\n   * string of all `checked` checkboxes values will be given.\n   *\n   * ```js\n   * // checkbox\n   * onChange('Alpha,Omega', changeEvent);\n   *\n   * // radio\n   * onChange('Omega', changeEvent);\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * A name to use for each `SelectionControl` in the group. If the `type` of the group is\n   * `checkbox`, the name will be updated to be an array name so that using\n   * `document.querySelector('input[name=\"yourName[]\"].value` will give the comma-delimited\n   * string of checked checkboxes.\n   *\n   * It is either required to have this prop set or every `control` in the `controls` prop to\n   * have the `name` prop.\n   */\n  name: requiredByAllControls(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n\n  /**\n   * The default value for the `SelectionControlGroup`. This can either be a single value\n   * or a comma-delimited string of checkbox values. When the `type` of the group is `radio`\n   * and the group is uncontrolled, it is recommended to set this prop. Otherwise the first\n   * value of the `controls` prop will be used as the default value.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n\n  /**\n   * An optional value to use for the `SelectionControlGroup`. This will make the component\n   * controlled and require the `onChange` prop to be defined. Like the `defaultValue`, this\n   * can either be a single value or a comma-delimited list of checkbox values.\n   */\n  value: controlled(PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]), 'onChange'),\n\n  /**\n   * A list of objects to create the `SelectionControl` components. The shape of the object\n   * is the `propTypes` of the `SelectionControl` component, except that `value` prop is\n   * now required.\n   *\n   * The `SelectionControl` will inherit any inheritable props from the `SelectionControlGroup`.\n   */\n  controls: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    label: PropTypes.node.isRequired,\n    value: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]).isRequired\n  })).isRequired,\n\n  /**\n   * Boolean if the `SelectionControl` should be displayed inline.\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * Boolean if all the selection controls in the group are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An optional function to call when the keydown event is triggered.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * An icon to use for a checked `radio` control. This will be applied to each\n   * control that has a `type=\"radio\"` in the `controls` list. This is just a simpler\n   * way of applying the custom icons for each radio in the list.\n   *\n   * This will default to the `checkedRadioIcon` on the `SelectionControl`.\n   *\n   * @see {@link #controls}\n   * @see {@link #uncheckedRadioIcon}\n   * @see {@link SelectionControls/SelectionControls#checkedRadioIcon}\n   * @see {@link SelectionControls/SelectionControls#uncheckedRadioIcon}\n   */\n  checkedRadioIcon: PropTypes.node,\n\n  /**\n   * An icon to use for an unchecked `radio` control. This will be applied to each\n   * control that has a `type=\"radio\"` in the `controls` list. This is just a simpler\n   * way of applying the custom icons for each radio in the list.\n   *\n   * This will default to the `uncheckedRadioIcon` on the `SelectionControl`.\n   *\n   * @see {@link #controls}\n   * @see {@link #checkedRadioIcon}\n   * @see {@link SelectionControls/SelectionControls#checkedRadioIcon}\n   * @see {@link SelectionControls/SelectionControls#uncheckedRadioIcon}\n   */\n  uncheckedRadioIcon: PropTypes.node,\n\n  /**\n   * An icon to use for a checked `checkbox` control. This will be applied to each\n   * control that has a `type=\"checkbox\"` in the `controls` list. This is just a simpler\n   * way of applying the custom icons for each checkbox in the list.\n   *\n   * This will default to the `checkedCheckboxIcon` on the `SelectionControl`.\n   *\n   * @see {@link #controls}\n   * @see {@link #uncheckedCheckboxIcon}\n   * @see {@link SelectionControls/SelectionControls#checkedCheckboxIcon}\n   * @see {@link SelectionControls/SelectionControls#uncheckedCheckboxIcon}\n   */\n  checkedCheckboxIcon: PropTypes.node,\n\n  /**\n   * An icon to use for an unchecked `checkbox` control. This will be applied to each\n   * control that has a `type=\"checkbox\"` in the `controls` list. This is just a simpler\n   * way of applying the custom icons for each checkbox in the list.\n   *\n   * This will default to the `uncheckedCheckboxIcon` on the `SelectionControl`.\n   *\n   * @see {@link #controls}\n   * @see {@link #checkedCheckboxIcon}\n   * @see {@link SelectionControls/SelectionControls#checkedCheckboxIcon}\n   * @see {@link SelectionControls/SelectionControls#uncheckedCheckboxIcon}\n   */\n  uncheckedCheckboxIcon: PropTypes.node\n};\nSelectionControlGroup.defaultProps = {\n  component: 'fieldset',\n  labelComponent: 'legend',\n  labelClassName: 'md-subheading-1',\n  controlComponent: SelectionControl\n};\nexport default SelectionControlGroup;","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/SelectionControls/SelectionControlGroup.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","PureComponent","PropTypes","cn","UP","DOWN","LEFT","RIGHT","getField","minMaxLoop","controlled","SelectionControl","requiredByAllControls","validator","validate","props","propName","component","_len","others","Array","_key","err","apply","undefined","concat","invalids","controls","filter","c","map","_","invalidPrefix","join","invalidMsg","Error","SelectionControlGroup","_PureComponent","_this","_setGroup","group","_group","_handleChange","e","type","checked","currentValue","state","existsIndex","_isChecked","replace","RegExp","onChange","setState","_handleKeyDown","onKeyDown","which","keyCode","dec","inc","preventDefault","radios","querySelectorAll","_activeIndex","focus","radio","defaultValue","groupValue","some","_ref","controlValue","split","render","_this2","_props","id","name","label","labelClassName","className","controlStyle","controlClassName","Component","LabelComponent","labelComponent","inline","disabled","checkedRadioIcon","uncheckedRadioIcon","checkedCheckboxIcon","uncheckedCheckboxIcon","ControlComponent","controlComponent","propValue","propControls","control","style","controlProps","tabIndex","createElement","ariaLabel","ref","propTypes","object","string","oneOfType","number","oneOf","isRequired","node","func","bool","arrayOf","shape","defaultProps"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport { UP, DOWN, LEFT, RIGHT } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport minMaxLoop from '../utils/NumberUtils/minMaxLoop';\nimport controlled from '../utils/PropTypes/controlled';\nimport SelectionControl from './SelectionControl';\n\n/**\n * A custom PropTypes validator to make sure that each `control` in the `controls` prop\n * contains the given `propName`, or the `SelectionControlGroup` has defined that prop.\n */\nfunction requiredByAllControls(validator) {\n  return function validate(props, propName, component) {\n    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      others[_key - 3] = arguments[_key];\n    }\n\n    var err = validator.apply(undefined, [props, propName, component].concat(others));\n\n    if (!err && typeof props[propName] === 'undefined') {\n      var invalids = props.controls.filter(function (c) {\n        return !c[propName];\n      }).map(function (_, i) {\n        return i;\n      });\n      if (invalids.length) {\n        var invalidPrefix = invalids.length === props.controls.length ? 'All `controls`' : 'The `controls` at indexes `' + invalids.join('`, `') + '`';\n        var invalidMsg = invalidPrefix + ' are missing the `' + propName + '` prop.';\n\n        err = new Error('The `' + propName + '` prop is required to make `' + component + '` accessible for users of ' + ('assistive technologies such as screen readers. Either add the `' + propName + '` to the `' + component + '` ') + ('or add the `' + propName + '` to each `control` in the `controls` prop. ' + invalidMsg));\n      }\n    }\n\n    return err;\n  };\n}\n\n/**\n * The `SelectionControlGroup` component is used to simplify the generation of a list\n * of `SelectionControl`. Any common props are extracted to this component and passed\n * to the `SelectionControl`.\n */\n\nvar SelectionControlGroup = function (_PureComponent) {\n  _inherits(SelectionControlGroup, _PureComponent);\n\n  function SelectionControlGroup(props) {\n    _classCallCheck(this, SelectionControlGroup);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n\n    _this._setGroup = function (group) {\n      _this._group = group;\n    };\n\n    _this._handleChange = function (e) {\n      var value = e.target.value;\n      if (_this.props.type === 'checkbox') {\n        var checked = e.target.checked;\n\n        var currentValue = getField(_this.props, _this.state, 'value');\n        var existsIndex = _this._isChecked(currentValue, value, 'checkbox');\n        if (!existsIndex && checked) {\n          value = '' + (currentValue ? currentValue + ',' : '') + value;\n        } else if (existsIndex > -1 && !checked) {\n          value = currentValue.replace(new RegExp(value + ',|,' + value + '|^' + value + '$'), '');\n        } else {\n          value = currentValue;\n        }\n      }\n\n      if (_this.props.onChange) {\n        _this.props.onChange(value, e);\n      }\n\n      if (typeof _this.props.value === 'undefined') {\n        _this.setState({ value: value });\n      }\n    };\n\n    _this._handleKeyDown = function (e) {\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(e);\n      }\n\n      var key = e.which || e.keyCode;\n      var dec = key === UP || key === LEFT;\n      var inc = key === DOWN || key === RIGHT;\n      if (!_this._group || !dec && !inc) {\n        return;\n      }\n\n      e.preventDefault();\n      var radios = _this._group.querySelectorAll('*[role=\"radio\"]');\n      _this._activeIndex = minMaxLoop(_this._activeIndex, 0, radios.length - 1, inc);\n      radios[_this._activeIndex].focus();\n      var value = _this.props.controls[_this._activeIndex].value;\n\n      if (getField(_this.props, _this.state, 'value') !== value) {\n        if (_this.props.onChange) {\n          _this.props.onChange(value, e);\n        }\n\n        if (typeof _this.props.value === 'undefined') {\n          _this.setState({ value: value });\n        }\n      }\n    };\n\n    var radio = props.type === 'radio';\n    _this.state = {};\n\n    if (typeof props.value === 'undefined') {\n      var value = props.defaultValue;\n\n      if (typeof value === 'undefined') {\n        value = radio ? props.controls[0].value : '';\n      }\n\n      _this.state.value = value;\n    }\n\n    var groupValue = getField(props, _this.state, 'value');\n    _this._activeIndex = -1;\n    props.controls.some(function (_ref, i) {\n      var value = _ref.value;\n\n      if (value === groupValue) {\n        _this._activeIndex = i;\n      }\n\n      return _this._activeIndex > -1;\n    });\n    return _this;\n  }\n\n  SelectionControlGroup.prototype._isChecked = function _isChecked(value, controlValue, type) {\n    return type === 'radio' ? value === controlValue : value.split(',').indexOf(controlValue) !== -1;\n  };\n\n  SelectionControlGroup.prototype.render = function render() {\n    var _this2 = this;\n\n    var _props = this.props,\n        id = _props.id,\n        name = _props.name,\n        type = _props.type,\n        label = _props.label,\n        labelClassName = _props.labelClassName,\n        className = _props.className,\n        controlStyle = _props.controlStyle,\n        controlClassName = _props.controlClassName,\n        Component = _props.component,\n        LabelComponent = _props.labelComponent,\n        inline = _props.inline,\n        disabled = _props.disabled,\n        checkedRadioIcon = _props.checkedRadioIcon,\n        uncheckedRadioIcon = _props.uncheckedRadioIcon,\n        checkedCheckboxIcon = _props.checkedCheckboxIcon,\n        uncheckedCheckboxIcon = _props.uncheckedCheckboxIcon,\n        ControlComponent = _props.controlComponent,\n        propValue = _props.value,\n        propControls = _props.controls,\n        defaultValue = _props.defaultValue,\n        props = _objectWithoutProperties(_props, ['id', 'name', 'type', 'label', 'labelClassName', 'className', 'controlStyle', 'controlClassName', 'component', 'labelComponent', 'inline', 'disabled', 'checkedRadioIcon', 'uncheckedRadioIcon', 'checkedCheckboxIcon', 'uncheckedCheckboxIcon', 'controlComponent', 'value', 'controls', 'defaultValue']);\n\n    var value = getField(this.props, this.state, 'value');\n    var radio = type === 'radio';\n\n    var controls = this.props.controls.map(function (control, i) {\n      var style = control.style;\n      if (controlStyle) {\n        style = style ? _extends({}, controlStyle, style) : controlStyle;\n      }\n\n      var checked = _this2._isChecked(value, control.value, type);\n      var controlProps = _extends({\n        id: '' + id + i,\n        key: 'control' + i,\n        name: '' + name + (type === 'checkbox' ? '[]' : ''),\n        type: type,\n        inline: inline,\n        disabled: disabled,\n        checked: checked,\n        tabIndex: !radio || checked || i === 0 && _this2._activeIndex === -1 ? undefined : -1,\n        checkedRadioIcon: checkedRadioIcon,\n        uncheckedRadioIcon: uncheckedRadioIcon,\n        checkedCheckboxIcon: checkedCheckboxIcon,\n        uncheckedCheckboxIcon: uncheckedCheckboxIcon,\n        'aria-describedby': id + '-group-label'\n      }, control, {\n        style: style,\n        className: cn(controlClassName, control.className)\n      });\n\n      return React.createElement(ControlComponent, controlProps);\n    });\n\n    var ariaLabel = void 0;\n    if (label) {\n      ariaLabel = React.createElement(\n        LabelComponent,\n        { className: labelClassName, id: id + '-group-label' },\n        label\n      );\n    }\n\n    return React.createElement(\n      Component,\n      _extends({}, props, {\n        ref: this._setGroup,\n        className: cn('md-selection-control-group', className),\n        onChange: this._handleChange,\n        onKeyDown: radio ? this._handleKeyDown : null\n      }),\n      ariaLabel,\n      controls\n    );\n  };\n\n  return SelectionControlGroup;\n}(PureComponent);\n\nSelectionControlGroup.propTypes = {\n  /**\n   * An optional style to apply to the container.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the container.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An optional style to apply to every `SelectionControl`. This will be merged with any `style`\n   * that a `control` might have.\n   */\n  controlStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to every `SelectionControl`. This will be merged with any\n   * `className` that a `control` might have.\n   */\n  controlClassName: PropTypes.string,\n\n  /**\n   * An optional base id to apply to each `SelectionControl`. When this is included, the id for\n   * each control will start with this and end with their current index. If this is omitted,\n   * each `control` in the `controls` prop *must* have an `id` prop. This is required for\n   * accessibility.\n   */\n  id: requiredByAllControls(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n\n  /**\n   * The type to apply to each `SelectionControl` in the group. Only `checkbox` and `radio` is\n   * valid for a grouping.\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio']).isRequired,\n\n  /**\n   * The component to render the `SelectionControlGroup` in. This can only be a valid dom element\n   * since it relies on the ref callback to add keyboard accessibility.\n   */\n  component: PropTypes.string.isRequired,\n\n  /**\n   * An optional label to display above the group of `SelectionControl`s.\n   */\n  label: PropTypes.node,\n\n  /**\n   * An optional className to apply to the node surrounding the `label` prop.\n   */\n  labelClassName: PropTypes.string,\n\n  /**\n   * The component to render each item in the `controls` list as. By default, this will be the\n   * `SelectionControl` component but you can change this to any React component that accepts\n   * the selection control props. It is currently provided:\n   *\n   * ```js\n   * const controlProps = {\n   *   id: `${id}${i}`,\n   *   key: `control${i}`,\n   *   name: `${name}${type === 'checkbox' ? '[]' : ''}`,\n   *   type,\n   *   inline,\n   *   disabled,\n   *   checked,\n   *   tabIndex: !radio || checked || (i === 0 && this._activeIndex === -1) ? undefined : -1,\n   *   checkedRadioIcon,\n   *   uncheckedRadioIcon,\n   *   checkedCheckboxIcon,\n   *   uncheckedCheckboxIcon,\n   *   ...control,\n   *   style,\n   *   className: cn(controlClassName, control.className),\n   * };\n   * ```\n   */\n  controlComponent: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]).isRequired,\n\n  /**\n   * The component to render the optional `label` in.\n   */\n  labelComponent: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]).isRequired,\n\n  /**\n   * An optional function to call when any `SelectionControl`'s `checked` state is changed\n   * in the group. If the `type` of the group is `radio`, the `value` of the `checked` radio\n   * will be given in the callback. If the `type` of the group is `checkbox`, a comma-delimited\n   * string of all `checked` checkboxes values will be given.\n   *\n   * ```js\n   * // checkbox\n   * onChange('Alpha,Omega', changeEvent);\n   *\n   * // radio\n   * onChange('Omega', changeEvent);\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * A name to use for each `SelectionControl` in the group. If the `type` of the group is\n   * `checkbox`, the name will be updated to be an array name so that using\n   * `document.querySelector('input[name=\"yourName[]\"].value` will give the comma-delimited\n   * string of checked checkboxes.\n   *\n   * It is either required to have this prop set or every `control` in the `controls` prop to\n   * have the `name` prop.\n   */\n  name: requiredByAllControls(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),\n\n  /**\n   * The default value for the `SelectionControlGroup`. This can either be a single value\n   * or a comma-delimited string of checkbox values. When the `type` of the group is `radio`\n   * and the group is uncontrolled, it is recommended to set this prop. Otherwise the first\n   * value of the `controls` prop will be used as the default value.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n\n  /**\n   * An optional value to use for the `SelectionControlGroup`. This will make the component\n   * controlled and require the `onChange` prop to be defined. Like the `defaultValue`, this\n   * can either be a single value or a comma-delimited list of checkbox values.\n   */\n  value: controlled(PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]), 'onChange'),\n\n  /**\n   * A list of objects to create the `SelectionControl` components. The shape of the object\n   * is the `propTypes` of the `SelectionControl` component, except that `value` prop is\n   * now required.\n   *\n   * The `SelectionControl` will inherit any inheritable props from the `SelectionControlGroup`.\n   */\n  controls: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    label: PropTypes.node.isRequired,\n    value: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]).isRequired\n  })).isRequired,\n\n  /**\n   * Boolean if the `SelectionControl` should be displayed inline.\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * Boolean if all the selection controls in the group are disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * An optional function to call when the keydown event is triggered.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * An icon to use for a checked `radio` control. This will be applied to each\n   * control that has a `type=\"radio\"` in the `controls` list. This is just a simpler\n   * way of applying the custom icons for each radio in the list.\n   *\n   * This will default to the `checkedRadioIcon` on the `SelectionControl`.\n   *\n   * @see {@link #controls}\n   * @see {@link #uncheckedRadioIcon}\n   * @see {@link SelectionControls/SelectionControls#checkedRadioIcon}\n   * @see {@link SelectionControls/SelectionControls#uncheckedRadioIcon}\n   */\n  checkedRadioIcon: PropTypes.node,\n\n  /**\n   * An icon to use for an unchecked `radio` control. This will be applied to each\n   * control that has a `type=\"radio\"` in the `controls` list. This is just a simpler\n   * way of applying the custom icons for each radio in the list.\n   *\n   * This will default to the `uncheckedRadioIcon` on the `SelectionControl`.\n   *\n   * @see {@link #controls}\n   * @see {@link #checkedRadioIcon}\n   * @see {@link SelectionControls/SelectionControls#checkedRadioIcon}\n   * @see {@link SelectionControls/SelectionControls#uncheckedRadioIcon}\n   */\n  uncheckedRadioIcon: PropTypes.node,\n\n  /**\n   * An icon to use for a checked `checkbox` control. This will be applied to each\n   * control that has a `type=\"checkbox\"` in the `controls` list. This is just a simpler\n   * way of applying the custom icons for each checkbox in the list.\n   *\n   * This will default to the `checkedCheckboxIcon` on the `SelectionControl`.\n   *\n   * @see {@link #controls}\n   * @see {@link #uncheckedCheckboxIcon}\n   * @see {@link SelectionControls/SelectionControls#checkedCheckboxIcon}\n   * @see {@link SelectionControls/SelectionControls#uncheckedCheckboxIcon}\n   */\n  checkedCheckboxIcon: PropTypes.node,\n\n  /**\n   * An icon to use for an unchecked `checkbox` control. This will be applied to each\n   * control that has a `type=\"checkbox\"` in the `controls` list. This is just a simpler\n   * way of applying the custom icons for each checkbox in the list.\n   *\n   * This will default to the `uncheckedCheckboxIcon` on the `SelectionControl`.\n   *\n   * @see {@link #controls}\n   * @see {@link #checkedCheckboxIcon}\n   * @see {@link SelectionControls/SelectionControls#checkedCheckboxIcon}\n   * @see {@link SelectionControls/SelectionControls#uncheckedCheckboxIcon}\n   */\n  uncheckedCheckboxIcon: PropTypes.node\n};\nSelectionControlGroup.defaultProps = {\n  component: 'fieldset',\n  labelComponent: 'legend',\n  labelClassName: 'md-subheading-1',\n  controlComponent: SelectionControl\n};\nexport default SelectionControlGroup;"]},"metadata":{},"sourceType":"module"}