{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n}; // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\n\nvar supportsPassive = void 0;\n\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      supportsPassive = true;\n    }\n  });\n  window.addEventListener('test', null, opts);\n} catch (e) {\n  supportsPassive = false;\n}\n/**\n * A helper function for manually setting touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {boolean} add - Boolean if the event listener should be added or removed.\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\n\n\nexport function setTouchEvent(add, el, eventType, callback, options) {\n  return el[(add ? 'add' : 'remove') + 'EventListener']('touch' + eventType, callback, supportsPassive ? _extends({\n    passive: true\n  }, options) : false);\n}\n/**\n * A helper function for manually adding touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\n\nexport function addTouchEvent(el, type, callback, options) {\n  return setTouchEvent(true, el, type, callback, options);\n}\n/**\n * A helper function for manually removing touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\n\nexport function removeTouchEvent(el, type, callback, options) {\n  return setTouchEvent(false, el, type, callback, options);\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/EventUtils/touches.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","supportsPassive","opts","defineProperty","get","window","addEventListener","e","setTouchEvent","add","el","eventType","callback","options","passive","addTouchEvent","type","removeTouchEvent"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ,C,CAEA;;;AACA,IAAIS,eAAe,GAAG,KAAK,CAA3B;;AACA,IAAI;AACF,MAAIC,IAAI,GAAGZ,MAAM,CAACa,cAAP,CAAsB,EAAtB,EAA0B,SAA1B,EAAqC;AAC9CC,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClBH,MAAAA,eAAe,GAAG,IAAlB;AACD;AAH6C,GAArC,CAAX;AAKAI,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,IAAhC,EAAsCJ,IAAtC;AACD,CAPD,CAOE,OAAOK,CAAP,EAAU;AACVN,EAAAA,eAAe,GAAG,KAAlB;AACD;AAED;;;;;;;;;;;;AAUA,OAAO,SAASO,aAAT,CAAuBC,GAAvB,EAA4BC,EAA5B,EAAgCC,SAAhC,EAA2CC,QAA3C,EAAqDC,OAArD,EAA8D;AACnE,SAAOH,EAAE,CAAC,CAACD,GAAG,GAAG,KAAH,GAAW,QAAf,IAA2B,eAA5B,CAAF,CAA+C,UAAUE,SAAzD,EAAoEC,QAApE,EAA8EX,eAAe,GAAGZ,QAAQ,CAAC;AAAEyB,IAAAA,OAAO,EAAE;AAAX,GAAD,EAAoBD,OAApB,CAAX,GAA0C,KAAvI,CAAP;AACD;AAED;;;;;;;;;;AASA,OAAO,SAASE,aAAT,CAAuBL,EAAvB,EAA2BM,IAA3B,EAAiCJ,QAAjC,EAA2CC,OAA3C,EAAoD;AACzD,SAAOL,aAAa,CAAC,IAAD,EAAOE,EAAP,EAAWM,IAAX,EAAiBJ,QAAjB,EAA2BC,OAA3B,CAApB;AACD;AAED;;;;;;;;;;AASA,OAAO,SAASI,gBAAT,CAA0BP,EAA1B,EAA8BM,IAA9B,EAAoCJ,QAApC,EAA8CC,OAA9C,EAAuD;AAC5D,SAAOL,aAAa,CAAC,KAAD,EAAQE,EAAR,EAAYM,IAAZ,EAAkBJ,QAAlB,EAA4BC,OAA5B,CAApB;AACD","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n// https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\nvar supportsPassive = void 0;\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      supportsPassive = true;\n    }\n  });\n  window.addEventListener('test', null, opts);\n} catch (e) {\n  supportsPassive = false;\n}\n\n/**\n * A helper function for manually setting touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {boolean} add - Boolean if the event listener should be added or removed.\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\nexport function setTouchEvent(add, el, eventType, callback, options) {\n  return el[(add ? 'add' : 'remove') + 'EventListener']('touch' + eventType, callback, supportsPassive ? _extends({ passive: true }, options) : false);\n}\n\n/**\n * A helper function for manually adding touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\nexport function addTouchEvent(el, type, callback, options) {\n  return setTouchEvent(true, el, type, callback, options);\n}\n\n/**\n * A helper function for manually removing touch events on elements with the passive\n * option (when it is supported).\n *\n * @param {HTMLElement} el - The element to add the listener to.\n * @param {String} type - the event type to set. This should be 'start', 'move', or 'end'\n * @param {function} callback - The event listener callback function.\n * @param {Object=} options - any additional options to apply.\n */\nexport function removeTouchEvent(el, type, callback, options) {\n  return setTouchEvent(false, el, type, callback, options);\n}"]},"metadata":{},"sourceType":"module"}