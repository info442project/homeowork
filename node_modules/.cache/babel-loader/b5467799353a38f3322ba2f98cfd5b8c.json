{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport getField from '../utils/getField';\nimport themeColors from '../utils/themeColors';\nimport getCollapserStyles from '../utils/getCollapserStyles';\nimport controlled from '../utils/PropTypes/controlled';\nimport Paper from '../Papers/Paper';\nimport AccessibleFakeButton from '../Helpers/AccessibleFakeButton';\nimport Collapse from '../Helpers/Collapse';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport PanelContent from './PanelContent';\nvar LABEL_FONT_SIZE = 15;\nvar LINE_HEIGHT = 1.42857;\nvar SINGLE_LINE_HEIGHT = LABEL_FONT_SIZE * LINE_HEIGHT;\n/**\n * The `ExpansionPanel` component needs to be used with the `ExpansionList`\n * component. The only reason is that the `ExpansionPanel` should really\n * be rendered as a table, but it was a bit hard to have a single component\n * dynamically rendering another row when expanded. It couldn't be in the\n * same row since the expanded content might not have the same columns.\n */\n\nvar ExpansionPanel = function (_PureComponent) {\n  _inherits(ExpansionPanel, _PureComponent);\n\n  function ExpansionPanel(props, context) {\n    _classCallCheck(this, ExpansionPanel);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));\n\n    _this._determineIfTwoLine = function () {\n      var twoLine = false;\n      Array.prototype.slice.call(findDOMNode(_this).querySelectorAll('.md-panel-column')).some(function (el) {\n        return twoLine = el.offsetHeight > SINGLE_LINE_HEIGHT;\n      });\n\n      _this.setState({\n        twoLine: twoLine\n      });\n    };\n\n    _this._handleClick = function () {\n      var expanded = !_this._isExpanded(_this.props, _this.state);\n\n      if (_this.props.onExpandToggle) {\n        _this.props.onExpandToggle(expanded);\n      }\n\n      if (typeof _this.props.expanded === 'undefined') {\n        _this.setState({\n          expanded: expanded\n        });\n      }\n    };\n\n    _this._handleSave = function (e) {\n      var _this$props = _this.props,\n          onSave = _this$props.onSave,\n          onExpandToggle = _this$props.onExpandToggle,\n          closeOnSave = _this$props.closeOnSave;\n\n      if (onSave) {\n        onSave(e);\n      }\n\n      if (closeOnSave) {\n        if (onExpandToggle) {\n          onExpandToggle(false);\n        }\n\n        if (typeof _this.props.expanded === 'undefined') {\n          _this.setState({\n            expanded: false\n          });\n        }\n      }\n    };\n\n    _this._handleCancel = function (e) {\n      var _this$props2 = _this.props,\n          onCancel = _this$props2.onCancel,\n          onExpandToggle = _this$props2.onExpandToggle,\n          closeOnCancel = _this$props2.closeOnCancel;\n\n      if (onCancel) {\n        onCancel(e);\n      }\n\n      if (closeOnCancel) {\n        if (onExpandToggle) {\n          onExpandToggle(false);\n        }\n\n        if (typeof _this.props.expanded === 'undefined') {\n          _this.setState({\n            expanded: false\n          });\n        }\n      }\n    };\n\n    _this.state = {\n      received: false,\n      twoLine: false\n    };\n\n    if (typeof props.expanded === 'undefined') {\n      _this.state.expanded = props.defaultExpanded;\n    }\n\n    return _this;\n  }\n\n  ExpansionPanel.prototype.componentDidMount = function componentDidMount() {\n    this._determineIfTwoLine();\n  };\n\n  ExpansionPanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (process.env.NODE_ENV === 'development' && !this.state.received) {\n      if (nextProps.columnWidths.length === 0) {\n        // Hopefully a nice warning about fixing the missing props injected from ExpansionList\n\n        /* eslint-disable no-console */\n        console.error('The `ExpansionPanel` component expects the `columnWidths` prop to be injected from the ' + '`ExpansionList` component. It could be missing because:' + '\\n - you have a wrapper component with extra functionality' + '\\n - the `ExpansionPanel` is not a direct child of the `ExpansionList` component' + '\\n\\nYou can fix this by making sure to pass `this.props.focused` and `this.props.columnWidths` ' + 'within your wrapper component and making the `ExpansionPanel` a direct child of `ExpansionList`.');\n      }\n\n      this.setState({\n        received: true\n      });\n    }\n  };\n\n  ExpansionPanel.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.label === prevProps.label && this.props.secondaryLabel === prevProps.secondaryLabel) {\n      return;\n    }\n\n    this._determineIfTwoLine();\n  };\n\n  ExpansionPanel.prototype._isExpanded = function _isExpanded(props, state) {\n    return typeof props.expanded === 'undefined' ? state.expanded : props.expanded;\n  };\n\n  ExpansionPanel.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        label = _props.label,\n        secondaryLabel = _props.secondaryLabel,\n        expandedSecondaryLabel = _props.expandedSecondaryLabel,\n        children = _props.children,\n        focused = _props.focused,\n        columnWidths = _props.columnWidths,\n        saveType = _props.saveType,\n        saveLabel = _props.saveLabel,\n        savePrimary = _props.savePrimary,\n        saveSecondary = _props.saveSecondary,\n        saveProps = _props.saveProps,\n        cancelType = _props.cancelType,\n        cancelLabel = _props.cancelLabel,\n        cancelPrimary = _props.cancelPrimary,\n        cancelSecondary = _props.cancelSecondary,\n        cancelProps = _props.cancelProps,\n        headerStyle = _props.headerStyle,\n        headerClassName = _props.headerClassName,\n        contentStyle = _props.contentStyle,\n        contentClassName = _props.contentClassName,\n        tabIndex = _props.tabIndex,\n        overflown = _props.overflown,\n        footer = _props.footer,\n        footerChildren = _props.footerChildren,\n        footerStyle = _props.footerStyle,\n        footerClassName = _props.footerClassName,\n        expandIconChildren = _props.expandIconChildren,\n        expandIconClassName = _props.expandIconClassName,\n        propAnimateContent = _props.animateContent,\n        propExpanded = _props.expanded,\n        propExpanderIcon = _props.expanderIcon,\n        defaultExpanded = _props.defaultExpanded,\n        closeOnSave = _props.closeOnSave,\n        closeOnCancel = _props.closeOnCancel,\n        onSave = _props.onSave,\n        onCancel = _props.onCancel,\n        onExpandToggle = _props.onExpandToggle,\n        props = _objectWithoutProperties(_props, ['className', 'label', 'secondaryLabel', 'expandedSecondaryLabel', 'children', 'focused', 'columnWidths', 'saveType', 'saveLabel', 'savePrimary', 'saveSecondary', 'saveProps', 'cancelType', 'cancelLabel', 'cancelPrimary', 'cancelSecondary', 'cancelProps', 'headerStyle', 'headerClassName', 'contentStyle', 'contentClassName', 'tabIndex', 'overflown', 'footer', 'footerChildren', 'footerStyle', 'footerClassName', 'expandIconChildren', 'expandIconClassName', 'animateContent', 'expanded', 'expanderIcon', 'defaultExpanded', 'closeOnSave', 'closeOnCancel', 'onSave', 'onCancel', 'onExpandToggle']);\n\n    var twoLine = this.state.twoLine;\n\n    var expanded = this._isExpanded(this.props, this.state);\n\n    var animateContent = getField(this.props, this.context, 'animateContent');\n    var columns = Children.map(expanded && expandedSecondaryLabel || secondaryLabel, function (panelLabel, i) {\n      var _ref;\n\n      return React.createElement('div', {\n        style: (_ref = {}, _ref['' + (overflown ? 'width' : 'minWidth')] = columnWidths[i + 1], _ref),\n        className: cn('md-panel-column', {\n          'md-panel-column--overflown': overflown\n        }, themeColors({\n          text: true\n        }))\n      }, panelLabel);\n    });\n\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n\n    columns.unshift(React.createElement('div', {\n      key: 'main-label',\n      style: {\n        minWidth: columnWidths[0]\n      },\n      className: cn('md-panel-column', themeColors({\n        text: true\n      }))\n    }, label));\n    var expanderIcon = getDeprecatedIcon(expandIconClassName, expandIconChildren, this.props.expanderIcon);\n    expanderIcon = React.Children.only(expanderIcon);\n    expanderIcon = React.cloneElement(expanderIcon, {\n      className: getCollapserStyles({\n        flipped: expanded\n      }, 'md-expansion-panel__collapser md-cell--right', expanderIcon.props.className)\n    });\n    return React.createElement(Paper, _extends({}, props, {\n      className: cn('md-expansion-panel', {\n        'md-expansion-panel--expanded': expanded\n      }, className),\n      'aria-expanded': expanded\n    }), React.createElement(AccessibleFakeButton, {\n      onClick: this._handleClick,\n      style: headerStyle,\n      className: cn('md-panel-header', {\n        'md-panel-header--expanded': expanded || twoLine,\n        'md-panel-header--focused': focused\n      }, headerClassName),\n      tabIndex: tabIndex\n    }, columns, expanderIcon), React.createElement(Collapse, {\n      collapsed: !expanded,\n      animate: animateContent\n    }, React.createElement(PanelContent, {\n      style: contentStyle,\n      className: contentClassName,\n      footerStyle: footerStyle,\n      footerClassName: footerClassName,\n      onSave: this._handleSave,\n      onCancel: this._handleCancel,\n      saveType: saveType,\n      saveLabel: saveLabel,\n      savePrimary: savePrimary,\n      saveSecondary: saveSecondary,\n      saveProps: saveProps,\n      cancelType: cancelType,\n      cancelLabel: cancelLabel,\n      cancelPrimary: cancelPrimary,\n      cancelSecondary: cancelSecondary,\n      cancelProps: cancelProps,\n      footer: footer,\n      footerChildren: footerChildren\n    }, children)));\n  };\n\n  return ExpansionPanel;\n}(PureComponent);\n\nExpansionPanel.propTypes = {\n  /**\n   * An optional style to apply to the panel.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the panel.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An options style to apply to the panel's header content. This is the\n   * section that toggles the children to be visible and label columns.\n   */\n  headerStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the panel's header content. This is the\n   * section that toggles the children to be visible and label columns.\n   */\n  headerClassName: PropTypes.string,\n\n  /**\n   * An optional style to apply to the element surrounding the children when expanded.\n   */\n  contentStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the element surrounding the children when expanded.\n   */\n  contentClassName: PropTypes.string,\n\n  /**\n   * An optional style to apply to the footer when the `footer` prop is `undefined`.\n   *\n   * @see {@link #footer}\n   */\n  footerStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the footer when the `footer` prop is `undefined`.\n   *\n   * @see {@link #footer}\n   */\n  footerClassName: PropTypes.string,\n\n  /**\n   * The main label to display in the unexpanded panel.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Any additional columns to display after the main label. If this is a `list`\n   * instead of a singular item, they will each be formatted as a column.\n   */\n  secondaryLabel: PropTypes.node,\n\n  /**\n   * Any additional columns to display after the main label when the panel is\n   * expanded. If this is omitted, the default `secondaryLabel` will be displayed\n   * instead.\n   */\n  expandedSecondaryLabel: PropTypes.node,\n\n  /**\n   * The component to render the panel as.\n   */\n  component: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]).isRequired,\n\n  /**\n   * The content to display once the panel is toggled open.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A boolean if the panel is currently expanded. This will force the component\n   * to be controlled and require's the `onExpandToggle` function to be defined.\n   */\n  expanded: controlled(PropTypes.bool, 'onExpandToggle', 'defaultExpanded'),\n\n  /**\n   * Boolean if an uncontrolled panel should be expanded by default.\n   */\n  defaultExpanded: PropTypes.bool.isRequired,\n\n  /**\n   * The icon to display for expanding the expansion panel.\n   */\n  expanderIcon: PropTypes.element,\n\n  /**\n   * Boolean if the `ExpansionPanel` is currently tab focused. This is injected\n   * and managed by the `ExpansionList` component. Do not set yourself.\n   */\n  focused: PropTypes.bool.isRequired,\n\n  /**\n   * A list of min-widths to apply to each column in the panel header. This is injected\n   * and managed by the `ExpansionList` component. Do not set yourself.\n   */\n  columnWidths: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n  /**\n   * Boolean if the panel has too much content so that it overflowns. This is injected\n   * and managed by the `ExpansionList` component. Do not set yourself.\n   *\n   * When this is active, it will truncate all columns except for the main label and the\n   * toggle icon.\n   */\n  overflown: PropTypes.bool,\n\n  /**\n   * A function to call when the expansion panel's expanded state is toggled.\n   * The callback for this function will include the new expanded state.\n   *\n   * `onExpandToggle(expanded)`\n   */\n  onExpandToggle: PropTypes.func,\n\n  /**\n   * An optional function to call when the Save button is clicked on the expanded panel.\n   */\n  onSave: PropTypes.func,\n\n  /**\n   * An optional function to call when the Cancel button is clicked on the expanded panel.\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Boolean if the panel should close when the Save button is clicked.\n   */\n  closeOnSave: PropTypes.bool,\n\n  /**\n   * Boolean if the panel should close when the Cancel button is clicked.\n   */\n  closeOnCancel: PropTypes.bool,\n\n  /**\n   * An optional button type to apply to the Save button. This will get\n   * passed to the `FlatButton`.\n   */\n  saveType: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n  /**\n   * The label for the Save button.\n   */\n  saveLabel: PropTypes.node.isRequired,\n\n  /**\n   * Boolean if the Save button should be styled with the primary color.\n   */\n  savePrimary: PropTypes.bool,\n\n  /**\n   * Boolean if the Save button should be styled with the secondary color,\n   */\n  saveSecondary: PropTypes.bool,\n\n  /**\n   * Any additional props to provide/override for the save button in the\n   * footer of the panel.\n   */\n  saveProps: PropTypes.object,\n\n  /**\n   * An optional button type to apply to the Cancel button. This will get\n   * passed to the `FlatButton`.\n   */\n  cancelType: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n  /**\n   * The label for the Cancel button.\n   */\n  cancelLabel: PropTypes.node.isRequired,\n\n  /**\n   * Boolean if the Cancel button should be styled with the primary color,\n   */\n  cancelPrimary: PropTypes.bool,\n\n  /**\n   * Boolean if the Cancel button should be styled with the secondary color,\n   */\n  cancelSecondary: PropTypes.bool,\n\n  /**\n   * Any additional props to provide/override for the cancel button in the\n   * footer of the panel.\n   */\n  cancelProps: PropTypes.object,\n\n  /**\n   * The tab index for the panel's header. This allows keyboard navigation.\n   */\n  tabIndex: PropTypes.number.isRequired,\n\n  /**\n   * Boolean if the panel's content should animate when the content's visibility changes. This\n   * can also be toggled from the `ExpansionList` component if all `ExpansionPanel` in the list\n   * should not animate. This only affects the height transition.\n   *\n   * > The default value is really `true` since it gets passed down to the `Collapse` component.\n   */\n  animateContent: PropTypes.bool,\n\n  /**\n   * This prop controls the footer for the expansion panel. If this prop is `undefined`, it will\n   * go with the default behavior of generating the save and cancel buttons with the save and cancel\n   * props.\n   *\n   * If this value is `null`, there will be no footer created.\n   *\n   * Finally, if this prop is defined as any renderable item, it will be displayed in place of the\n   * footer.\n   *\n   * @see {@link #footerChildren}\n   */\n  footer: PropTypes.node,\n\n  /**\n   * Any additional children that should be displayed in the footer of the panel. These children\n   * will be placed after the action buttons.\n   */\n  footerChildren: PropTypes.node,\n  expandIconChildren: deprecated(PropTypes.node, 'Use the `expanderIcon` instead'),\n  expandIconClassName: deprecated(PropTypes.string, 'Use the `expanderIcon` instead')\n};\nExpansionPanel.defaultProps = {\n  defaultExpanded: false,\n  expanderIcon: React.createElement(FontIcon, null, 'keyboard_arrow_down'),\n  component: 'li',\n  saveLabel: 'Save',\n  cancelLabel: 'Cancel',\n  savePrimary: true,\n  tabIndex: 0,\n  closeOnSave: true,\n  closeOnCancel: true,\n  focused: false,\n  columnWidths: []\n};\nExpansionPanel.contextTypes = {\n  animateContent: PropTypes.bool\n};\nexport default ExpansionPanel;","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/ExpansionPanels/ExpansionPanel.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","PureComponent","Children","PropTypes","findDOMNode","cn","deprecated","getField","themeColors","getCollapserStyles","controlled","Paper","AccessibleFakeButton","Collapse","FontIcon","getDeprecatedIcon","PanelContent","LABEL_FONT_SIZE","LINE_HEIGHT","SINGLE_LINE_HEIGHT","ExpansionPanel","_PureComponent","props","context","_this","_determineIfTwoLine","twoLine","Array","slice","querySelectorAll","some","el","offsetHeight","setState","_handleClick","expanded","_isExpanded","state","onExpandToggle","_handleSave","e","_this$props","onSave","closeOnSave","_handleCancel","_this$props2","onCancel","closeOnCancel","received","defaultExpanded","componentDidMount","componentWillReceiveProps","nextProps","process","env","NODE_ENV","columnWidths","console","error","componentDidUpdate","prevProps","label","secondaryLabel","render","_props","className","expandedSecondaryLabel","children","focused","saveType","saveLabel","savePrimary","saveSecondary","saveProps","cancelType","cancelLabel","cancelPrimary","cancelSecondary","cancelProps","headerStyle","headerClassName","contentStyle","contentClassName","tabIndex","overflown","footer","footerChildren","footerStyle","footerClassName","expandIconChildren","expandIconClassName","propAnimateContent","animateContent","propExpanded","propExpanderIcon","expanderIcon","columns","map","panelLabel","_ref","createElement","style","text","isArray","unshift","minWidth","only","cloneElement","flipped","onClick","collapsed","animate","propTypes","object","string","node","isRequired","component","oneOfType","func","bool","element","arrayOf","number","oneOf","defaultProps","contextTypes"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { PureComponent, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport getField from '../utils/getField';\nimport themeColors from '../utils/themeColors';\nimport getCollapserStyles from '../utils/getCollapserStyles';\nimport controlled from '../utils/PropTypes/controlled';\nimport Paper from '../Papers/Paper';\nimport AccessibleFakeButton from '../Helpers/AccessibleFakeButton';\nimport Collapse from '../Helpers/Collapse';\nimport FontIcon from '../FontIcons/FontIcon';\nimport getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';\nimport PanelContent from './PanelContent';\n\nvar LABEL_FONT_SIZE = 15;\nvar LINE_HEIGHT = 1.42857;\nvar SINGLE_LINE_HEIGHT = LABEL_FONT_SIZE * LINE_HEIGHT;\n\n/**\n * The `ExpansionPanel` component needs to be used with the `ExpansionList`\n * component. The only reason is that the `ExpansionPanel` should really\n * be rendered as a table, but it was a bit hard to have a single component\n * dynamically rendering another row when expanded. It couldn't be in the\n * same row since the expanded content might not have the same columns.\n */\n\nvar ExpansionPanel = function (_PureComponent) {\n  _inherits(ExpansionPanel, _PureComponent);\n\n  function ExpansionPanel(props, context) {\n    _classCallCheck(this, ExpansionPanel);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props, context));\n\n    _this._determineIfTwoLine = function () {\n      var twoLine = false;\n      Array.prototype.slice.call(findDOMNode(_this).querySelectorAll('.md-panel-column')).some(function (el) {\n        return twoLine = el.offsetHeight > SINGLE_LINE_HEIGHT;\n      });\n\n      _this.setState({ twoLine: twoLine });\n    };\n\n    _this._handleClick = function () {\n      var expanded = !_this._isExpanded(_this.props, _this.state);\n      if (_this.props.onExpandToggle) {\n        _this.props.onExpandToggle(expanded);\n      }\n\n      if (typeof _this.props.expanded === 'undefined') {\n        _this.setState({ expanded: expanded });\n      }\n    };\n\n    _this._handleSave = function (e) {\n      var _this$props = _this.props,\n          onSave = _this$props.onSave,\n          onExpandToggle = _this$props.onExpandToggle,\n          closeOnSave = _this$props.closeOnSave;\n\n      if (onSave) {\n        onSave(e);\n      }\n\n      if (closeOnSave) {\n        if (onExpandToggle) {\n          onExpandToggle(false);\n        }\n\n        if (typeof _this.props.expanded === 'undefined') {\n          _this.setState({ expanded: false });\n        }\n      }\n    };\n\n    _this._handleCancel = function (e) {\n      var _this$props2 = _this.props,\n          onCancel = _this$props2.onCancel,\n          onExpandToggle = _this$props2.onExpandToggle,\n          closeOnCancel = _this$props2.closeOnCancel;\n\n      if (onCancel) {\n        onCancel(e);\n      }\n\n      if (closeOnCancel) {\n        if (onExpandToggle) {\n          onExpandToggle(false);\n        }\n\n        if (typeof _this.props.expanded === 'undefined') {\n          _this.setState({ expanded: false });\n        }\n      }\n    };\n\n    _this.state = {\n      received: false,\n      twoLine: false\n    };\n\n    if (typeof props.expanded === 'undefined') {\n      _this.state.expanded = props.defaultExpanded;\n    }\n    return _this;\n  }\n\n  ExpansionPanel.prototype.componentDidMount = function componentDidMount() {\n    this._determineIfTwoLine();\n  };\n\n  ExpansionPanel.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    if (process.env.NODE_ENV === 'development' && !this.state.received) {\n      if (nextProps.columnWidths.length === 0) {\n        // Hopefully a nice warning about fixing the missing props injected from ExpansionList\n        /* eslint-disable no-console */\n        console.error('The `ExpansionPanel` component expects the `columnWidths` prop to be injected from the ' + '`ExpansionList` component. It could be missing because:' + '\\n - you have a wrapper component with extra functionality' + '\\n - the `ExpansionPanel` is not a direct child of the `ExpansionList` component' + '\\n\\nYou can fix this by making sure to pass `this.props.focused` and `this.props.columnWidths` ' + 'within your wrapper component and making the `ExpansionPanel` a direct child of `ExpansionList`.');\n      }\n\n      this.setState({ received: true });\n    }\n  };\n\n  ExpansionPanel.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.label === prevProps.label && this.props.secondaryLabel === prevProps.secondaryLabel) {\n      return;\n    }\n\n    this._determineIfTwoLine();\n  };\n\n  ExpansionPanel.prototype._isExpanded = function _isExpanded(props, state) {\n    return typeof props.expanded === 'undefined' ? state.expanded : props.expanded;\n  };\n\n  ExpansionPanel.prototype.render = function render() {\n    var _props = this.props,\n        className = _props.className,\n        label = _props.label,\n        secondaryLabel = _props.secondaryLabel,\n        expandedSecondaryLabel = _props.expandedSecondaryLabel,\n        children = _props.children,\n        focused = _props.focused,\n        columnWidths = _props.columnWidths,\n        saveType = _props.saveType,\n        saveLabel = _props.saveLabel,\n        savePrimary = _props.savePrimary,\n        saveSecondary = _props.saveSecondary,\n        saveProps = _props.saveProps,\n        cancelType = _props.cancelType,\n        cancelLabel = _props.cancelLabel,\n        cancelPrimary = _props.cancelPrimary,\n        cancelSecondary = _props.cancelSecondary,\n        cancelProps = _props.cancelProps,\n        headerStyle = _props.headerStyle,\n        headerClassName = _props.headerClassName,\n        contentStyle = _props.contentStyle,\n        contentClassName = _props.contentClassName,\n        tabIndex = _props.tabIndex,\n        overflown = _props.overflown,\n        footer = _props.footer,\n        footerChildren = _props.footerChildren,\n        footerStyle = _props.footerStyle,\n        footerClassName = _props.footerClassName,\n        expandIconChildren = _props.expandIconChildren,\n        expandIconClassName = _props.expandIconClassName,\n        propAnimateContent = _props.animateContent,\n        propExpanded = _props.expanded,\n        propExpanderIcon = _props.expanderIcon,\n        defaultExpanded = _props.defaultExpanded,\n        closeOnSave = _props.closeOnSave,\n        closeOnCancel = _props.closeOnCancel,\n        onSave = _props.onSave,\n        onCancel = _props.onCancel,\n        onExpandToggle = _props.onExpandToggle,\n        props = _objectWithoutProperties(_props, ['className', 'label', 'secondaryLabel', 'expandedSecondaryLabel', 'children', 'focused', 'columnWidths', 'saveType', 'saveLabel', 'savePrimary', 'saveSecondary', 'saveProps', 'cancelType', 'cancelLabel', 'cancelPrimary', 'cancelSecondary', 'cancelProps', 'headerStyle', 'headerClassName', 'contentStyle', 'contentClassName', 'tabIndex', 'overflown', 'footer', 'footerChildren', 'footerStyle', 'footerClassName', 'expandIconChildren', 'expandIconClassName', 'animateContent', 'expanded', 'expanderIcon', 'defaultExpanded', 'closeOnSave', 'closeOnCancel', 'onSave', 'onCancel', 'onExpandToggle']);\n\n    var twoLine = this.state.twoLine;\n\n    var expanded = this._isExpanded(this.props, this.state);\n    var animateContent = getField(this.props, this.context, 'animateContent');\n\n    var columns = Children.map(expanded && expandedSecondaryLabel || secondaryLabel, function (panelLabel, i) {\n      var _ref;\n\n      return React.createElement(\n        'div',\n        {\n          style: (_ref = {}, _ref['' + (overflown ? 'width' : 'minWidth')] = columnWidths[i + 1], _ref),\n          className: cn('md-panel-column', {\n            'md-panel-column--overflown': overflown\n          }, themeColors({ text: true }))\n        },\n        panelLabel\n      );\n    });\n\n    if (!Array.isArray(columns)) {\n      columns = [columns];\n    }\n\n    columns.unshift(React.createElement(\n      'div',\n      {\n        key: 'main-label',\n        style: { minWidth: columnWidths[0] },\n        className: cn('md-panel-column', themeColors({ text: true }))\n      },\n      label\n    ));\n\n    var expanderIcon = getDeprecatedIcon(expandIconClassName, expandIconChildren, this.props.expanderIcon);\n    expanderIcon = React.Children.only(expanderIcon);\n    expanderIcon = React.cloneElement(expanderIcon, {\n      className: getCollapserStyles({\n        flipped: expanded\n      }, 'md-expansion-panel__collapser md-cell--right', expanderIcon.props.className)\n    });\n\n    return React.createElement(\n      Paper,\n      _extends({}, props, {\n        className: cn('md-expansion-panel', {\n          'md-expansion-panel--expanded': expanded\n        }, className),\n        'aria-expanded': expanded\n      }),\n      React.createElement(\n        AccessibleFakeButton,\n        {\n          onClick: this._handleClick,\n          style: headerStyle,\n          className: cn('md-panel-header', {\n            'md-panel-header--expanded': expanded || twoLine,\n            'md-panel-header--focused': focused\n          }, headerClassName),\n          tabIndex: tabIndex\n        },\n        columns,\n        expanderIcon\n      ),\n      React.createElement(\n        Collapse,\n        { collapsed: !expanded, animate: animateContent },\n        React.createElement(\n          PanelContent,\n          {\n            style: contentStyle,\n            className: contentClassName,\n            footerStyle: footerStyle,\n            footerClassName: footerClassName,\n            onSave: this._handleSave,\n            onCancel: this._handleCancel,\n            saveType: saveType,\n            saveLabel: saveLabel,\n            savePrimary: savePrimary,\n            saveSecondary: saveSecondary,\n            saveProps: saveProps,\n            cancelType: cancelType,\n            cancelLabel: cancelLabel,\n            cancelPrimary: cancelPrimary,\n            cancelSecondary: cancelSecondary,\n            cancelProps: cancelProps,\n            footer: footer,\n            footerChildren: footerChildren\n          },\n          children\n        )\n      )\n    );\n  };\n\n  return ExpansionPanel;\n}(PureComponent);\n\nExpansionPanel.propTypes = {\n  /**\n   * An optional style to apply to the panel.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the panel.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An options style to apply to the panel's header content. This is the\n   * section that toggles the children to be visible and label columns.\n   */\n  headerStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the panel's header content. This is the\n   * section that toggles the children to be visible and label columns.\n   */\n  headerClassName: PropTypes.string,\n\n  /**\n   * An optional style to apply to the element surrounding the children when expanded.\n   */\n  contentStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the element surrounding the children when expanded.\n   */\n  contentClassName: PropTypes.string,\n\n  /**\n   * An optional style to apply to the footer when the `footer` prop is `undefined`.\n   *\n   * @see {@link #footer}\n   */\n  footerStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the footer when the `footer` prop is `undefined`.\n   *\n   * @see {@link #footer}\n   */\n  footerClassName: PropTypes.string,\n\n  /**\n   * The main label to display in the unexpanded panel.\n   */\n  label: PropTypes.node.isRequired,\n\n  /**\n   * Any additional columns to display after the main label. If this is a `list`\n   * instead of a singular item, they will each be formatted as a column.\n   */\n  secondaryLabel: PropTypes.node,\n\n  /**\n   * Any additional columns to display after the main label when the panel is\n   * expanded. If this is omitted, the default `secondaryLabel` will be displayed\n   * instead.\n   */\n  expandedSecondaryLabel: PropTypes.node,\n\n  /**\n   * The component to render the panel as.\n   */\n  component: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]).isRequired,\n\n  /**\n   * The content to display once the panel is toggled open.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A boolean if the panel is currently expanded. This will force the component\n   * to be controlled and require's the `onExpandToggle` function to be defined.\n   */\n  expanded: controlled(PropTypes.bool, 'onExpandToggle', 'defaultExpanded'),\n\n  /**\n   * Boolean if an uncontrolled panel should be expanded by default.\n   */\n  defaultExpanded: PropTypes.bool.isRequired,\n\n  /**\n   * The icon to display for expanding the expansion panel.\n   */\n  expanderIcon: PropTypes.element,\n\n  /**\n   * Boolean if the `ExpansionPanel` is currently tab focused. This is injected\n   * and managed by the `ExpansionList` component. Do not set yourself.\n   */\n  focused: PropTypes.bool.isRequired,\n\n  /**\n   * A list of min-widths to apply to each column in the panel header. This is injected\n   * and managed by the `ExpansionList` component. Do not set yourself.\n   */\n  columnWidths: PropTypes.arrayOf(PropTypes.number).isRequired,\n\n  /**\n   * Boolean if the panel has too much content so that it overflowns. This is injected\n   * and managed by the `ExpansionList` component. Do not set yourself.\n   *\n   * When this is active, it will truncate all columns except for the main label and the\n   * toggle icon.\n   */\n  overflown: PropTypes.bool,\n\n  /**\n   * A function to call when the expansion panel's expanded state is toggled.\n   * The callback for this function will include the new expanded state.\n   *\n   * `onExpandToggle(expanded)`\n   */\n  onExpandToggle: PropTypes.func,\n\n  /**\n   * An optional function to call when the Save button is clicked on the expanded panel.\n   */\n  onSave: PropTypes.func,\n\n  /**\n   * An optional function to call when the Cancel button is clicked on the expanded panel.\n   */\n  onCancel: PropTypes.func,\n\n  /**\n   * Boolean if the panel should close when the Save button is clicked.\n   */\n  closeOnSave: PropTypes.bool,\n\n  /**\n   * Boolean if the panel should close when the Cancel button is clicked.\n   */\n  closeOnCancel: PropTypes.bool,\n\n  /**\n   * An optional button type to apply to the Save button. This will get\n   * passed to the `FlatButton`.\n   */\n  saveType: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n  /**\n   * The label for the Save button.\n   */\n  saveLabel: PropTypes.node.isRequired,\n\n  /**\n   * Boolean if the Save button should be styled with the primary color.\n   */\n  savePrimary: PropTypes.bool,\n\n  /**\n   * Boolean if the Save button should be styled with the secondary color,\n   */\n  saveSecondary: PropTypes.bool,\n\n  /**\n   * Any additional props to provide/override for the save button in the\n   * footer of the panel.\n   */\n  saveProps: PropTypes.object,\n\n  /**\n   * An optional button type to apply to the Cancel button. This will get\n   * passed to the `FlatButton`.\n   */\n  cancelType: PropTypes.oneOf(['button', 'submit', 'reset']),\n\n  /**\n   * The label for the Cancel button.\n   */\n  cancelLabel: PropTypes.node.isRequired,\n\n  /**\n   * Boolean if the Cancel button should be styled with the primary color,\n   */\n  cancelPrimary: PropTypes.bool,\n\n  /**\n   * Boolean if the Cancel button should be styled with the secondary color,\n   */\n  cancelSecondary: PropTypes.bool,\n\n  /**\n   * Any additional props to provide/override for the cancel button in the\n   * footer of the panel.\n   */\n  cancelProps: PropTypes.object,\n\n  /**\n   * The tab index for the panel's header. This allows keyboard navigation.\n   */\n  tabIndex: PropTypes.number.isRequired,\n\n  /**\n   * Boolean if the panel's content should animate when the content's visibility changes. This\n   * can also be toggled from the `ExpansionList` component if all `ExpansionPanel` in the list\n   * should not animate. This only affects the height transition.\n   *\n   * > The default value is really `true` since it gets passed down to the `Collapse` component.\n   */\n  animateContent: PropTypes.bool,\n\n  /**\n   * This prop controls the footer for the expansion panel. If this prop is `undefined`, it will\n   * go with the default behavior of generating the save and cancel buttons with the save and cancel\n   * props.\n   *\n   * If this value is `null`, there will be no footer created.\n   *\n   * Finally, if this prop is defined as any renderable item, it will be displayed in place of the\n   * footer.\n   *\n   * @see {@link #footerChildren}\n   */\n  footer: PropTypes.node,\n\n  /**\n   * Any additional children that should be displayed in the footer of the panel. These children\n   * will be placed after the action buttons.\n   */\n  footerChildren: PropTypes.node,\n  expandIconChildren: deprecated(PropTypes.node, 'Use the `expanderIcon` instead'),\n  expandIconClassName: deprecated(PropTypes.string, 'Use the `expanderIcon` instead')\n};\nExpansionPanel.defaultProps = {\n  defaultExpanded: false,\n  expanderIcon: React.createElement(\n    FontIcon,\n    null,\n    'keyboard_arrow_down'\n  ),\n  component: 'li',\n  saveLabel: 'Save',\n  cancelLabel: 'Cancel',\n  savePrimary: true,\n  tabIndex: 0,\n  closeOnSave: true,\n  closeOnCancel: true,\n  focused: false,\n  columnWidths: []\n};\nExpansionPanel.contextTypes = {\n  animateContent: PropTypes.bool\n};\nexport default ExpansionPanel;"]},"metadata":{},"sourceType":"module"}