{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport TimePeriods from './TimePeriods';\nimport PickerControl from './PickerControl';\n/**\n * The `TimePickerHeader` component is used for rendering the\n * current time for the `TimePicker` as well as switching between\n * the different views for the time picker.\n */\n\nvar TimePickerHeader = function (_PureComponent) {\n  _inherits(TimePickerHeader, _PureComponent);\n\n  function TimePickerHeader() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TimePickerHeader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._setHour = function () {\n      _this.props.setTimeMode('hour');\n    }, _this._setMinute = function () {\n      _this.props.setTimeMode('minute');\n    }, _this._setSecond = function () {\n      _this.props.setTimeMode('second');\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  TimePickerHeader.prototype.render = function render() {\n    var _props = this.props,\n        timeMode = _props.timeMode,\n        hours = _props.hours,\n        minutes = _props.minutes,\n        seconds = _props.seconds,\n        timePeriod = _props.timePeriod,\n        setTempTime = _props.setTempTime,\n        tempTime = _props.tempTime,\n        showSeconds = _props.showSeconds;\n    var timePeriods = void 0;\n\n    if (timePeriod) {\n      timePeriods = React.createElement(TimePeriods, {\n        tempTime: tempTime,\n        setTempTime: setTempTime,\n        timePeriod: timePeriod\n      });\n    }\n\n    var secondsControl = showSeconds === true ? React.createElement(PickerControl, {\n      onClick: this._setSecond,\n      active: timeMode === 'second'\n    }, React.createElement('h4', {\n      className: 'md-display-3'\n    }, seconds)) : null;\n    return React.createElement('header', {\n      className: 'md-picker-header md-text-right'\n    }, React.createElement(PickerControl, {\n      onClick: this._setHour,\n      active: timeMode === 'hour'\n    }, React.createElement('h4', {\n      className: 'md-display-3'\n    }, hours)), React.createElement(PickerControl, {\n      onClick: this._setMinute,\n      active: timeMode === 'minute'\n    }, React.createElement('h4', {\n      className: 'md-display-3'\n    }, minutes)), secondsControl, timePeriods);\n  };\n\n  return TimePickerHeader;\n}(PureComponent);\n\nTimePickerHeader.propTypes = {\n  /**\n   * The current time of the time picker.\n   */\n  tempTime: PropTypes.instanceOf(Date).isRequired,\n\n  /**\n   * The current time type that is being changed.\n   */\n  timeMode: PropTypes.oneOf(['hour', 'minute', 'second']).isRequired,\n\n  /**\n   * A function to update the time mode.\n   */\n  setTimeMode: PropTypes.func.isRequired,\n\n  /**\n   * A function to update the time for the time picker.\n   */\n  setTempTime: PropTypes.func.isRequired,\n\n  /**\n   * A formatted hours string for the user's locale. This\n   * would be '3' for en-US if the time was '3:15'\n   */\n  hours: PropTypes.string.isRequired,\n\n  /**\n   * A formatted minutes string for the user's locale.\n   * This would be ':15' for en-US if the time was '3:15'.\n   */\n  minutes: PropTypes.string.isRequired,\n\n  /**\n   * A formatted seconds string for the user's locale.\n   * This would be ':00' for en-US if the time was '3:15:00'.\n   */\n  seconds: PropTypes.string,\n\n  /**\n   * An optional time period to use for locales that use\n   * 12 hour clocks and AM/PM.\n   */\n  timePeriod: PropTypes.string,\n\n  /**\n   * A boolean that if true, seconds are displayed\n   */\n  showSeconds: PropTypes.bool\n};\nexport default TimePickerHeader;","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/Pickers/TimePickerHeader.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","PureComponent","PropTypes","TimePeriods","PickerControl","TimePickerHeader","_PureComponent","_temp","_this","_ret","_len","arguments","length","args","Array","_key","apply","concat","_setHour","props","setTimeMode","_setMinute","_setSecond","render","_props","timeMode","hours","minutes","seconds","timePeriod","setTempTime","tempTime","showSeconds","timePeriods","createElement","secondsControl","onClick","active","className","propTypes","instanceOf","Date","isRequired","oneOf","func","string","bool"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport TimePeriods from './TimePeriods';\nimport PickerControl from './PickerControl';\n\n/**\n * The `TimePickerHeader` component is used for rendering the\n * current time for the `TimePicker` as well as switching between\n * the different views for the time picker.\n */\n\nvar TimePickerHeader = function (_PureComponent) {\n  _inherits(TimePickerHeader, _PureComponent);\n\n  function TimePickerHeader() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, TimePickerHeader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._setHour = function () {\n      _this.props.setTimeMode('hour');\n    }, _this._setMinute = function () {\n      _this.props.setTimeMode('minute');\n    }, _this._setSecond = function () {\n      _this.props.setTimeMode('second');\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  TimePickerHeader.prototype.render = function render() {\n    var _props = this.props,\n        timeMode = _props.timeMode,\n        hours = _props.hours,\n        minutes = _props.minutes,\n        seconds = _props.seconds,\n        timePeriod = _props.timePeriod,\n        setTempTime = _props.setTempTime,\n        tempTime = _props.tempTime,\n        showSeconds = _props.showSeconds;\n\n    var timePeriods = void 0;\n    if (timePeriod) {\n      timePeriods = React.createElement(TimePeriods, { tempTime: tempTime, setTempTime: setTempTime, timePeriod: timePeriod });\n    }\n\n    var secondsControl = showSeconds === true ? React.createElement(\n      PickerControl,\n      { onClick: this._setSecond, active: timeMode === 'second' },\n      React.createElement(\n        'h4',\n        { className: 'md-display-3' },\n        seconds\n      )\n    ) : null;\n\n    return React.createElement(\n      'header',\n      { className: 'md-picker-header md-text-right' },\n      React.createElement(\n        PickerControl,\n        { onClick: this._setHour, active: timeMode === 'hour' },\n        React.createElement(\n          'h4',\n          { className: 'md-display-3' },\n          hours\n        )\n      ),\n      React.createElement(\n        PickerControl,\n        { onClick: this._setMinute, active: timeMode === 'minute' },\n        React.createElement(\n          'h4',\n          { className: 'md-display-3' },\n          minutes\n        )\n      ),\n      secondsControl,\n      timePeriods\n    );\n  };\n\n  return TimePickerHeader;\n}(PureComponent);\n\nTimePickerHeader.propTypes = {\n  /**\n   * The current time of the time picker.\n   */\n  tempTime: PropTypes.instanceOf(Date).isRequired,\n\n  /**\n   * The current time type that is being changed.\n   */\n  timeMode: PropTypes.oneOf(['hour', 'minute', 'second']).isRequired,\n\n  /**\n   * A function to update the time mode.\n   */\n  setTimeMode: PropTypes.func.isRequired,\n\n  /**\n   * A function to update the time for the time picker.\n   */\n  setTempTime: PropTypes.func.isRequired,\n\n  /**\n   * A formatted hours string for the user's locale. This\n   * would be '3' for en-US if the time was '3:15'\n   */\n  hours: PropTypes.string.isRequired,\n\n  /**\n   * A formatted minutes string for the user's locale.\n   * This would be ':15' for en-US if the time was '3:15'.\n   */\n  minutes: PropTypes.string.isRequired,\n\n  /**\n   * A formatted seconds string for the user's locale.\n   * This would be ':00' for en-US if the time was '3:15:00'.\n   */\n  seconds: PropTypes.string,\n\n  /**\n   * An optional time period to use for locales that use\n   * 12 hour clocks and AM/PM.\n   */\n  timePeriod: PropTypes.string,\n\n  /**\n   * A boolean that if true, seconds are displayed\n   */\n  showSeconds: PropTypes.bool\n};\nexport default TimePickerHeader;"]},"metadata":{},"sourceType":"module"}