{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport FileInput from './FileInput';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport omit from '../utils/omit';\n/**\n * The `FileUpload` component is used to upload files locally This is a wrapper of the `FileInput` component\n * with some additional functionality so any props that are undocumented on `FileUpload` but are present\n * on `FileInput` are correctly provided. If you want to upload files to a server, use\n * [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n * by attaching the `File`.\n *\n * Quick example:\n *\n * ```js\n * function upload(file) {\n *   fetch('/api/images', {\n *     method: 'POST',\n *     body: new FormData().append('file', file),\n *   });\n * }\n * ```\n *\n * An upload can be aborted by calling the `abort(file || fileName)` function. If\n * the file or fileName are omitted, it will *attempt* to abort the current\n * file that is uploading. Unreliable for multi-select.\n *\n * ```js\n * <FileUpload ref=\"upload\" />\n * <Button raised onClick={() => this.refs.upload.abort()} label=\"Abort! Abort!\" />\n * ```\n */\n\nvar FileUpload = function (_PureComponent) {\n  _inherits(FileUpload, _PureComponent);\n\n  function FileUpload() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FileUpload);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {}, _this.abort = function (file) {\n      var fileName = file;\n\n      if (!file) {\n        // Attempt to remove first file added...\n        fileName = Object.keys(_this.state)[0];\n      } else if (typeof file.name === 'string') {\n        fileName = file.name;\n      }\n\n      var reader = _this.state[fileName];\n\n      if (reader) {\n        reader.abort();\n        findDOMNode(_this).querySelector('.md-file-input').value = '';\n\n        _this.setState(omit(_this.state, [fileName]));\n      }\n    }, _this._uploadFile = function (file) {\n      var _this$props = _this.props,\n          onAbort = _this$props.onAbort,\n          onError = _this$props.onError,\n          onLoad = _this$props.onLoad,\n          onLoadStart = _this$props.onLoadStart,\n          onLoadEnd = _this$props.onLoadEnd,\n          onProgress = _this$props.onProgress,\n          readAs = _this$props.readAs;\n      var name = file.name,\n          type = file.type;\n      var fr = new FileReader();\n\n      if (onError) {\n        fr.onerror = function (e) {\n          onError(file, e.target.error, e);\n        };\n      }\n\n      if (onAbort) {\n        fr.onabort = function (e) {\n          onAbort(file, e);\n        };\n      }\n\n      if (onLoadStart) {\n        fr.onloadstart = function (e) {\n          onLoadStart(file, e);\n        };\n      }\n\n      if (onLoadEnd) {\n        fr.onloadend = function (e) {\n          onLoadEnd(file, e);\n        };\n      }\n\n      fr.onload = function (e) {\n        if (onLoad) {\n          onLoad(file, e.target.result, e);\n        }\n\n        _this.setState(omit(_this.state, [name]));\n      };\n\n      if (onProgress) {\n        fr.onprogress = function (e) {\n          if (e.lengthComputable) {\n            onProgress(file, e.loaded / e.total * 100, e);\n          }\n        };\n      }\n\n      if (readAs) {\n        if (typeof readAs === 'function') {\n          readAs(type, file, fr);\n        } else {\n          fr['readAs' + readAs](file);\n        }\n      } else if (type.match(/image|video|audio|application\\/pdf/) || name.match(/\\.mkv$/)) {\n        fr.readAsDataURL(file);\n      } else if (type.match(/application\\/json/)) {\n        fr.readAsText(file);\n      } else if (type.match(/application|model|multipart/) || name.match(/(w|e)ar$/)) {\n        fr.readAsArrayBuffer(file);\n      } else {\n        fr.readAsText(file);\n      }\n\n      return fr;\n    }, _this._handleUpload = function (fileList, e) {\n      if (_this.props.onChange) {\n        _this.props.onChange(fileList, e);\n      }\n\n      if (!fileList) {\n        return;\n      }\n\n      var _this$props2 = _this.props,\n          maxSize = _this$props2.maxSize,\n          onSizeError = _this$props2.onSizeError;\n      var files = Array.isArray(fileList) ? fileList : [fileList];\n      var errorFiles = [];\n\n      if (maxSize) {\n        errorFiles = files.filter(function (file) {\n          return file.size > maxSize;\n        });\n        files = files.filter(function (file) {\n          return file.size <= maxSize;\n        });\n      }\n\n      if (errorFiles.length) {\n        onSizeError(errorFiles);\n      }\n\n      if (!files.length) {\n        return;\n      }\n\n      var nextState = {};\n      files.forEach(function (file) {\n        var fileReader = _this._uploadFile(file);\n\n        nextState[file.name] = fileReader;\n      });\n\n      _this.setState(nextState);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n  /**\n   * Attempts to abort the upload of a file. This function takes an optional `file` or `fileName`\n   * as it's parameter. If the parameter is omitted, it attempts to abort the first file that was\n   * added. If the `onAbort` function was given, it will be called as well.\n   *\n   * @param {Object|string} file - The file or the file name to use to find the\n   *     correct `FileReader`.\n   */\n\n\n  FileUpload.prototype.render = function render() {\n    var _props = this.props,\n        maxSize = _props.maxSize,\n        readAs = _props.readAs,\n        onLoad = _props.onLoad,\n        onLoadStart = _props.onLoadStart,\n        onLoadEnd = _props.onLoadEnd,\n        onProgress = _props.onProgress,\n        onAbort = _props.onAbort,\n        onError = _props.onError,\n        onSizeError = _props.onSizeError,\n        props = _objectWithoutProperties(_props, ['maxSize', 'readAs', 'onLoad', 'onLoadStart', 'onLoadEnd', 'onProgress', 'onAbort', 'onError', 'onSizeError']);\n\n    return React.createElement(FileInput, _extends({}, props, {\n      onChange: this._handleUpload\n    }));\n  };\n\n  return FileUpload;\n}(PureComponent);\n\nFileUpload.propTypes = {\n  /**\n   * An optional style to apply.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An optional style to apply to the label.\n   */\n  labelStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the label.\n   */\n  labelClassName: PropTypes.string,\n\n  /**\n   * Boolean if the `FileInput` should be styled with the primary color.\n   */\n  primary: PropTypes.bool,\n\n  /**\n   * Boolean if the `FileInput` should be styled with the secondary color.\n   */\n  secondary: PropTypes.bool,\n\n  /**\n   * Boolean if the `FileInput` should be styled as a flat button instead of a\n   * raised button.\n   */\n  flat: PropTypes.bool,\n\n  /**\n   * This should be a comma separated list of Media Types that the `FileInput` can\n   * accept. If this prop is left blank, any file will be accepted.\n   *\n   * The values can either be:\n   * - A file extension\n   * - audio/*\n   * - video/*\n   * - image/*\n   * - any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)\n   */\n  accept: PropTypes.string,\n\n  /**\n   * Boolean if multiple files will be accepted.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * A label to display on the `FileInput`.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The icon children to use for the upload icon.\n   */\n  iconChildren: PropTypes.node,\n\n  /**\n   * The icon className to use for the upload icon.\n   */\n  iconClassName: PropTypes.string,\n\n  /**\n   * An optional max size for the file. If the file is greater than\n   * this limit, the file will not be uploaded.\n   */\n  maxSize: PropTypes.number,\n\n  /**\n   * A required function to call when the `maxSize` prop is set. It will\n   * be given a list of files that were too big.\n   */\n  onSizeError: function onSizeError(props, propName, component) {\n    for (var _len2 = arguments.length, others = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      others[_key2 - 3] = arguments[_key2];\n    }\n\n    if (typeof props.maxSize === 'number') {\n      var _PropTypes$func;\n\n      return (_PropTypes$func = PropTypes.func).isRequired.apply(_PropTypes$func, [props, propName, component].concat(others));\n    }\n\n    return null;\n  },\n\n  /**\n   * You can force the `FileReader` to read the file as a specific type\n   * if you do not trust the *amazing* regex I have for choosing the correct\n   * one.\n   *\n   * ```js\n   * if(type.match(/image|video|audio/)) {\n   *   fr.readAsDataURL(file);\n   * } else if(type.match(/application|model|multipart/)) {\n   *   fr.readAsArrayBuffer(file);\n   * } else {\n   *   fr.readAsText(file);\n   * }\n   * ```\n   *\n   * > `.yml` and `.js` both are considered `application`, so it definitely fails there.\n   *\n   * If this prop is a function, you will be given the file's type, the file object, and\n   * the file reader. You will then need to call `fileReader.readAsYOUR_CORRECT_TYPE(file)`.\n   */\n  readAs: PropTypes.oneOfType([PropTypes.oneOf(['DataURL', 'ArrayBuffer', 'Text']), PropTypes.func]),\n\n  /**\n   * An optional function to call when the `FileUpload` aborts. The current\n   * file and the abort event are given. This might not be the most useful\n   * function to use since you will need to manually call abort yourself anyways.\n   */\n  onAbort: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` errors. The current\n   * file, the error, and the error event are given.\n   *\n   * ```js\n   * onError(file, event.target.error, event);\n   * ```\n   */\n  onError: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` loads. The current\n   * file, the load result, and the load event are given.\n   *\n   * ```js\n   * onLoad(file, event.target.result, event);\n   * ```\n   *\n   * The load result will either be:\n   * - a data URL\n   * - a plain text string\n   * - an array buffer\n   *\n   * depending on what type the file is.\n   */\n  onLoad: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` starts loading. The current\n   * file and the load start event are given.\n   */\n  onLoadStart: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` finishes loading. The\n   * current file and the load end event are given.\n   */\n  onLoadEnd: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` progress. The current\n   * file, upload progress, and the progress event are given. The progress\n   * will be a number between 0 and 100 that has not been rounded.\n   *\n   * ```js\n   * onProgress(file, progress, event);\n   * ```\n   */\n  onProgress: PropTypes.func,\n\n  /**\n   * Boolean if the same file is allowed to be uploaded multiple times. This will basically make the\n   * `value` of the file input always blank.\n   */\n  allowDuplicates: PropTypes.bool,\n\n  /**\n   * An optional function to call when a file selects or unselects a file.\n   * This will be called before any local uploading occurs.\n   *\n   * ```js\n   * onChange(file(s) || null, event);\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * This prop tells mobile browsers that the input would prefer the user to get the image/video from\n   * the camera instead of using the file browser. This will be completely ignored by desktop browsers.\n   *\n   * Providing `'user'` will select the front facing camera while `'environment'` will select the rear facing\n   * camera.\n   *\n   * @see https://developers.google.com/web/fundamentals/media/capturing-images/\n   */\n  capture: PropTypes.oneOf(['user', 'environment']),\n  value: deprecated(PropTypes.string, 'There should\\'t be a reason to set the value manually. Check out {@link #allowDuplicates} instead')\n};\nexport default FileUpload;","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/FileInputs/FileUpload.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","PureComponent","PropTypes","findDOMNode","FileInput","deprecated","omit","FileUpload","_PureComponent","_temp","_this","_ret","_len","args","Array","_key","apply","concat","state","abort","file","fileName","name","reader","querySelector","setState","_uploadFile","_this$props","props","onAbort","onError","onLoad","onLoadStart","onLoadEnd","onProgress","readAs","type","fr","FileReader","onerror","e","error","onabort","onloadstart","onloadend","onload","result","onprogress","lengthComputable","loaded","total","match","readAsDataURL","readAsText","readAsArrayBuffer","_handleUpload","fileList","onChange","_this$props2","maxSize","onSizeError","files","isArray","errorFiles","filter","size","nextState","forEach","fileReader","render","_props","createElement","propTypes","style","object","className","string","labelStyle","labelClassName","primary","bool","secondary","flat","accept","multiple","label","node","iconChildren","iconClassName","number","propName","component","_len2","others","_key2","_PropTypes$func","func","isRequired","oneOfType","oneOf","allowDuplicates","capture"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { findDOMNode } from 'react-dom';\nimport FileInput from './FileInput';\nimport deprecated from 'react-prop-types/lib/deprecated';\n\nimport omit from '../utils/omit';\n\n/**\n * The `FileUpload` component is used to upload files locally This is a wrapper of the `FileInput` component\n * with some additional functionality so any props that are undocumented on `FileUpload` but are present\n * on `FileInput` are correctly provided. If you want to upload files to a server, use\n * [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n * by attaching the `File`.\n *\n * Quick example:\n *\n * ```js\n * function upload(file) {\n *   fetch('/api/images', {\n *     method: 'POST',\n *     body: new FormData().append('file', file),\n *   });\n * }\n * ```\n *\n * An upload can be aborted by calling the `abort(file || fileName)` function. If\n * the file or fileName are omitted, it will *attempt* to abort the current\n * file that is uploading. Unreliable for multi-select.\n *\n * ```js\n * <FileUpload ref=\"upload\" />\n * <Button raised onClick={() => this.refs.upload.abort()} label=\"Abort! Abort!\" />\n * ```\n */\n\nvar FileUpload = function (_PureComponent) {\n  _inherits(FileUpload, _PureComponent);\n\n  function FileUpload() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FileUpload);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = {}, _this.abort = function (file) {\n      var fileName = file;\n      if (!file) {\n        // Attempt to remove first file added...\n        fileName = Object.keys(_this.state)[0];\n      } else if (typeof file.name === 'string') {\n        fileName = file.name;\n      }\n\n      var reader = _this.state[fileName];\n      if (reader) {\n        reader.abort();\n        findDOMNode(_this).querySelector('.md-file-input').value = '';\n\n        _this.setState(omit(_this.state, [fileName]));\n      }\n    }, _this._uploadFile = function (file) {\n      var _this$props = _this.props,\n          onAbort = _this$props.onAbort,\n          onError = _this$props.onError,\n          onLoad = _this$props.onLoad,\n          onLoadStart = _this$props.onLoadStart,\n          onLoadEnd = _this$props.onLoadEnd,\n          onProgress = _this$props.onProgress,\n          readAs = _this$props.readAs;\n      var name = file.name,\n          type = file.type;\n\n\n      var fr = new FileReader();\n      if (onError) {\n        fr.onerror = function (e) {\n          onError(file, e.target.error, e);\n        };\n      }\n\n      if (onAbort) {\n        fr.onabort = function (e) {\n          onAbort(file, e);\n        };\n      }\n\n      if (onLoadStart) {\n        fr.onloadstart = function (e) {\n          onLoadStart(file, e);\n        };\n      }\n\n      if (onLoadEnd) {\n        fr.onloadend = function (e) {\n          onLoadEnd(file, e);\n        };\n      }\n\n      fr.onload = function (e) {\n        if (onLoad) {\n          onLoad(file, e.target.result, e);\n        }\n\n        _this.setState(omit(_this.state, [name]));\n      };\n\n      if (onProgress) {\n        fr.onprogress = function (e) {\n          if (e.lengthComputable) {\n            onProgress(file, e.loaded / e.total * 100, e);\n          }\n        };\n      }\n\n      if (readAs) {\n        if (typeof readAs === 'function') {\n          readAs(type, file, fr);\n        } else {\n          fr['readAs' + readAs](file);\n        }\n      } else if (type.match(/image|video|audio|application\\/pdf/) || name.match(/\\.mkv$/)) {\n        fr.readAsDataURL(file);\n      } else if (type.match(/application\\/json/)) {\n        fr.readAsText(file);\n      } else if (type.match(/application|model|multipart/) || name.match(/(w|e)ar$/)) {\n        fr.readAsArrayBuffer(file);\n      } else {\n        fr.readAsText(file);\n      }\n\n      return fr;\n    }, _this._handleUpload = function (fileList, e) {\n      if (_this.props.onChange) {\n        _this.props.onChange(fileList, e);\n      }\n\n      if (!fileList) {\n        return;\n      }\n      var _this$props2 = _this.props,\n          maxSize = _this$props2.maxSize,\n          onSizeError = _this$props2.onSizeError;\n\n      var files = Array.isArray(fileList) ? fileList : [fileList];\n\n      var errorFiles = [];\n      if (maxSize) {\n        errorFiles = files.filter(function (file) {\n          return file.size > maxSize;\n        });\n        files = files.filter(function (file) {\n          return file.size <= maxSize;\n        });\n      }\n\n      if (errorFiles.length) {\n        onSizeError(errorFiles);\n      }\n\n      if (!files.length) {\n        return;\n      }\n\n      var nextState = {};\n      files.forEach(function (file) {\n        var fileReader = _this._uploadFile(file);\n        nextState[file.name] = fileReader;\n      });\n\n      _this.setState(nextState);\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  /**\n   * Attempts to abort the upload of a file. This function takes an optional `file` or `fileName`\n   * as it's parameter. If the parameter is omitted, it attempts to abort the first file that was\n   * added. If the `onAbort` function was given, it will be called as well.\n   *\n   * @param {Object|string} file - The file or the file name to use to find the\n   *     correct `FileReader`.\n   */\n\n\n  FileUpload.prototype.render = function render() {\n    var _props = this.props,\n        maxSize = _props.maxSize,\n        readAs = _props.readAs,\n        onLoad = _props.onLoad,\n        onLoadStart = _props.onLoadStart,\n        onLoadEnd = _props.onLoadEnd,\n        onProgress = _props.onProgress,\n        onAbort = _props.onAbort,\n        onError = _props.onError,\n        onSizeError = _props.onSizeError,\n        props = _objectWithoutProperties(_props, ['maxSize', 'readAs', 'onLoad', 'onLoadStart', 'onLoadEnd', 'onProgress', 'onAbort', 'onError', 'onSizeError']);\n\n    return React.createElement(FileInput, _extends({}, props, { onChange: this._handleUpload }));\n  };\n\n  return FileUpload;\n}(PureComponent);\n\nFileUpload.propTypes = {\n  /**\n   * An optional style to apply.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply.\n   */\n  className: PropTypes.string,\n\n  /**\n   * An optional style to apply to the label.\n   */\n  labelStyle: PropTypes.object,\n\n  /**\n   * An optional className to apply to the label.\n   */\n  labelClassName: PropTypes.string,\n\n  /**\n   * Boolean if the `FileInput` should be styled with the primary color.\n   */\n  primary: PropTypes.bool,\n\n  /**\n   * Boolean if the `FileInput` should be styled with the secondary color.\n   */\n  secondary: PropTypes.bool,\n\n  /**\n   * Boolean if the `FileInput` should be styled as a flat button instead of a\n   * raised button.\n   */\n  flat: PropTypes.bool,\n\n  /**\n   * This should be a comma separated list of Media Types that the `FileInput` can\n   * accept. If this prop is left blank, any file will be accepted.\n   *\n   * The values can either be:\n   * - A file extension\n   * - audio/*\n   * - video/*\n   * - image/*\n   * - any valid [IANA Media Type](http://www.iana.org/assignments/media-types/media-types.xhtml)\n   */\n  accept: PropTypes.string,\n\n  /**\n   * Boolean if multiple files will be accepted.\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * A label to display on the `FileInput`.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The icon children to use for the upload icon.\n   */\n  iconChildren: PropTypes.node,\n\n  /**\n   * The icon className to use for the upload icon.\n   */\n  iconClassName: PropTypes.string,\n\n  /**\n   * An optional max size for the file. If the file is greater than\n   * this limit, the file will not be uploaded.\n   */\n  maxSize: PropTypes.number,\n\n  /**\n   * A required function to call when the `maxSize` prop is set. It will\n   * be given a list of files that were too big.\n   */\n  onSizeError: function onSizeError(props, propName, component) {\n    for (var _len2 = arguments.length, others = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      others[_key2 - 3] = arguments[_key2];\n    }\n\n    if (typeof props.maxSize === 'number') {\n      var _PropTypes$func;\n\n      return (_PropTypes$func = PropTypes.func).isRequired.apply(_PropTypes$func, [props, propName, component].concat(others));\n    }\n\n    return null;\n  },\n\n  /**\n   * You can force the `FileReader` to read the file as a specific type\n   * if you do not trust the *amazing* regex I have for choosing the correct\n   * one.\n   *\n   * ```js\n   * if(type.match(/image|video|audio/)) {\n   *   fr.readAsDataURL(file);\n   * } else if(type.match(/application|model|multipart/)) {\n   *   fr.readAsArrayBuffer(file);\n   * } else {\n   *   fr.readAsText(file);\n   * }\n   * ```\n   *\n   * > `.yml` and `.js` both are considered `application`, so it definitely fails there.\n   *\n   * If this prop is a function, you will be given the file's type, the file object, and\n   * the file reader. You will then need to call `fileReader.readAsYOUR_CORRECT_TYPE(file)`.\n   */\n  readAs: PropTypes.oneOfType([PropTypes.oneOf(['DataURL', 'ArrayBuffer', 'Text']), PropTypes.func]),\n\n  /**\n   * An optional function to call when the `FileUpload` aborts. The current\n   * file and the abort event are given. This might not be the most useful\n   * function to use since you will need to manually call abort yourself anyways.\n   */\n  onAbort: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` errors. The current\n   * file, the error, and the error event are given.\n   *\n   * ```js\n   * onError(file, event.target.error, event);\n   * ```\n   */\n  onError: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` loads. The current\n   * file, the load result, and the load event are given.\n   *\n   * ```js\n   * onLoad(file, event.target.result, event);\n   * ```\n   *\n   * The load result will either be:\n   * - a data URL\n   * - a plain text string\n   * - an array buffer\n   *\n   * depending on what type the file is.\n   */\n  onLoad: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` starts loading. The current\n   * file and the load start event are given.\n   */\n  onLoadStart: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` finishes loading. The\n   * current file and the load end event are given.\n   */\n  onLoadEnd: PropTypes.func,\n\n  /**\n   * An optional function to call when the `FileUpload` progress. The current\n   * file, upload progress, and the progress event are given. The progress\n   * will be a number between 0 and 100 that has not been rounded.\n   *\n   * ```js\n   * onProgress(file, progress, event);\n   * ```\n   */\n  onProgress: PropTypes.func,\n\n  /**\n   * Boolean if the same file is allowed to be uploaded multiple times. This will basically make the\n   * `value` of the file input always blank.\n   */\n  allowDuplicates: PropTypes.bool,\n\n  /**\n   * An optional function to call when a file selects or unselects a file.\n   * This will be called before any local uploading occurs.\n   *\n   * ```js\n   * onChange(file(s) || null, event);\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * This prop tells mobile browsers that the input would prefer the user to get the image/video from\n   * the camera instead of using the file browser. This will be completely ignored by desktop browsers.\n   *\n   * Providing `'user'` will select the front facing camera while `'environment'` will select the rear facing\n   * camera.\n   *\n   * @see https://developers.google.com/web/fundamentals/media/capturing-images/\n   */\n  capture: PropTypes.oneOf(['user', 'environment']),\n  value: deprecated(PropTypes.string, 'There should\\'t be a reason to set the value manually. Check out {@link #allowDuplicates} instead')\n};\nexport default FileUpload;"]},"metadata":{},"sourceType":"module"}