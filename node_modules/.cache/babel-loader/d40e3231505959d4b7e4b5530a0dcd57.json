{"ast":null,"code":"/** @module utils/NumberUtils/calculateValueDistance */\n\n/**\n * This calculates the distance from a screen x location to a position in some element\n * by comparing the width of the element and the element's page position to the screen\n * x position.\n *\n * If the distance is not _normalized_ the distance will be updated to be a percentage\n * of the element's total width.\n *\n * @param {Number} x - the screen x location.\n * @param {Number} width - the element's width\n * @param {Number} left - the element's page x position.\n * @param {Boolean} normalize - boolean if the distance should be a percentage.\n *\n * @return {Number} the distance from the element's left position to the page x\n *    location.\n */\nfunction calculateDistance(x, width, left, normalize) {\n  var distance = Math.min(width, Math.max(0, x - left));\n  return normalize ? distance : distance / width * 100;\n}\n/**\n * This calculates the new value and distance for a slider. It will compare the page x\n * location of a touch or mouse event to the slider's track page x position. If the\n * final value and distance should be _normalized_, they will be updated to be rounded\n * with the scale and steps in mind.\n *\n * The distance will always be contained within a percentage of 0 - 100 while the\n * value will be contained within the min and max values.\n *\n * @param {Number} x - the page x location of the touch or mouse event.\n * @param {Number} width - the slider's width\n * @param {Number} left - the slider's left position in the page.\n * @param {Number} scale - the total number values included in the slider.\n * @param {Number} step - the amount to increment by.\n * @param {Number} min - the min value for the slider.\n * @param {Number} max - the max value for the slider.\n * @param {Boolean} normalize - boolean if the vaue and distance should be _normalized_.\n *\n * @return {Object} an object with the value and distance.\n */\n\n\nexport default function calculateValueDistance(x, width, left, scale, step, min, max, normalize) {\n  var value = void 0;\n  var distance = calculateDistance(x, width, left, normalize);\n\n  if (normalize) {\n    value = Math.round(distance / (width / scale));\n\n    if (step < 1) {\n      var decimals = String(step).split('.')[1];\n      var corrector = typeof decimals !== 'undefined' && decimals.length > 0 ? Math.pow(10, decimals.length) : 1;\n      var modded = value * corrector % (step * corrector);\n\n      if (modded !== 0 && modded >= step / 2) {\n        value += step - modded;\n      } else if (modded !== 0) {\n        value -= modded;\n      }\n    }\n\n    distance = value / scale * 100;\n    value = value * step + min;\n  } else {\n    value = min + step * Math.round(distance / 100 * scale);\n  }\n\n  return {\n    distance: Math.max(0, Math.min(100, distance)),\n    value: Math.max(min, Math.min(max, value))\n  };\n}","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/utils/NumberUtils/calculateValueDistance.js"],"names":["calculateDistance","x","width","left","normalize","distance","Math","min","max","calculateValueDistance","scale","step","value","round","decimals","String","split","corrector","length","pow","modded"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;AAgBA,SAASA,iBAAT,CAA2BC,CAA3B,EAA8BC,KAA9B,EAAqCC,IAArC,EAA2CC,SAA3C,EAAsD;AACpD,MAAIC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASL,KAAT,EAAgBI,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYP,CAAC,GAAGE,IAAhB,CAAhB,CAAf;AAEA,SAAOC,SAAS,GAAGC,QAAH,GAAcA,QAAQ,GAAGH,KAAX,GAAmB,GAAjD;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAoBA,eAAe,SAASO,sBAAT,CAAgCR,CAAhC,EAAmCC,KAAnC,EAA0CC,IAA1C,EAAgDO,KAAhD,EAAuDC,IAAvD,EAA6DJ,GAA7D,EAAkEC,GAAlE,EAAuEJ,SAAvE,EAAkF;AAC/F,MAAIQ,KAAK,GAAG,KAAK,CAAjB;AACA,MAAIP,QAAQ,GAAGL,iBAAiB,CAACC,CAAD,EAAIC,KAAJ,EAAWC,IAAX,EAAiBC,SAAjB,CAAhC;;AACA,MAAIA,SAAJ,EAAe;AACbQ,IAAAA,KAAK,GAAGN,IAAI,CAACO,KAAL,CAAWR,QAAQ,IAAIH,KAAK,GAAGQ,KAAZ,CAAnB,CAAR;;AACA,QAAIC,IAAI,GAAG,CAAX,EAAc;AACZ,UAAIG,QAAQ,GAAGC,MAAM,CAACJ,IAAD,CAAN,CAAaK,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAf;AACA,UAAIC,SAAS,GAAG,OAAOH,QAAP,KAAoB,WAApB,IAAmCA,QAAQ,CAACI,MAAT,GAAkB,CAArD,GAAyDZ,IAAI,CAACa,GAAL,CAAS,EAAT,EAAaL,QAAQ,CAACI,MAAtB,CAAzD,GAAyF,CAAzG;AAEA,UAAIE,MAAM,GAAGR,KAAK,GAAGK,SAAR,IAAqBN,IAAI,GAAGM,SAA5B,CAAb;;AACA,UAAIG,MAAM,KAAK,CAAX,IAAgBA,MAAM,IAAIT,IAAI,GAAG,CAArC,EAAwC;AACtCC,QAAAA,KAAK,IAAID,IAAI,GAAGS,MAAhB;AACD,OAFD,MAEO,IAAIA,MAAM,KAAK,CAAf,EAAkB;AACvBR,QAAAA,KAAK,IAAIQ,MAAT;AACD;AACF;;AAEDf,IAAAA,QAAQ,GAAGO,KAAK,GAAGF,KAAR,GAAgB,GAA3B;AACAE,IAAAA,KAAK,GAAGA,KAAK,GAAGD,IAAR,GAAeJ,GAAvB;AACD,GAhBD,MAgBO;AACLK,IAAAA,KAAK,GAAGL,GAAG,GAAGI,IAAI,GAAGL,IAAI,CAACO,KAAL,CAAWR,QAAQ,GAAG,GAAX,GAAiBK,KAA5B,CAArB;AACD;;AAED,SAAO;AACLL,IAAAA,QAAQ,EAAEC,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYF,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcF,QAAd,CAAZ,CADL;AAELO,IAAAA,KAAK,EAAEN,IAAI,CAACE,GAAL,CAASD,GAAT,EAAcD,IAAI,CAACC,GAAL,CAASC,GAAT,EAAcI,KAAd,CAAd;AAFF,GAAP;AAID","sourcesContent":["/** @module utils/NumberUtils/calculateValueDistance */\n\n/**\n * This calculates the distance from a screen x location to a position in some element\n * by comparing the width of the element and the element's page position to the screen\n * x position.\n *\n * If the distance is not _normalized_ the distance will be updated to be a percentage\n * of the element's total width.\n *\n * @param {Number} x - the screen x location.\n * @param {Number} width - the element's width\n * @param {Number} left - the element's page x position.\n * @param {Boolean} normalize - boolean if the distance should be a percentage.\n *\n * @return {Number} the distance from the element's left position to the page x\n *    location.\n */\nfunction calculateDistance(x, width, left, normalize) {\n  var distance = Math.min(width, Math.max(0, x - left));\n\n  return normalize ? distance : distance / width * 100;\n}\n\n/**\n * This calculates the new value and distance for a slider. It will compare the page x\n * location of a touch or mouse event to the slider's track page x position. If the\n * final value and distance should be _normalized_, they will be updated to be rounded\n * with the scale and steps in mind.\n *\n * The distance will always be contained within a percentage of 0 - 100 while the\n * value will be contained within the min and max values.\n *\n * @param {Number} x - the page x location of the touch or mouse event.\n * @param {Number} width - the slider's width\n * @param {Number} left - the slider's left position in the page.\n * @param {Number} scale - the total number values included in the slider.\n * @param {Number} step - the amount to increment by.\n * @param {Number} min - the min value for the slider.\n * @param {Number} max - the max value for the slider.\n * @param {Boolean} normalize - boolean if the vaue and distance should be _normalized_.\n *\n * @return {Object} an object with the value and distance.\n */\nexport default function calculateValueDistance(x, width, left, scale, step, min, max, normalize) {\n  var value = void 0;\n  var distance = calculateDistance(x, width, left, normalize);\n  if (normalize) {\n    value = Math.round(distance / (width / scale));\n    if (step < 1) {\n      var decimals = String(step).split('.')[1];\n      var corrector = typeof decimals !== 'undefined' && decimals.length > 0 ? Math.pow(10, decimals.length) : 1;\n\n      var modded = value * corrector % (step * corrector);\n      if (modded !== 0 && modded >= step / 2) {\n        value += step - modded;\n      } else if (modded !== 0) {\n        value -= modded;\n      }\n    }\n\n    distance = value / scale * 100;\n    value = value * step + min;\n  } else {\n    value = min + step * Math.round(distance / 100 * scale);\n  }\n\n  return {\n    distance: Math.max(0, Math.min(100, distance)),\n    value: Math.max(min, Math.min(max, value))\n  };\n}"]},"metadata":{},"sourceType":"module"}