{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n/**\n * The `TileAddon` component is used to render either a `FontIcon` or an `Avatar`\n * next to the `ListTileText` for a `ListItem`.\n */\n\nvar TileAddon = function (_PureComponent) {\n  _inherits(TileAddon, _PureComponent);\n\n  function TileAddon() {\n    _classCallCheck(this, TileAddon);\n\n    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));\n  }\n\n  TileAddon.prototype.render = function render() {\n    var _cn;\n\n    var _props = this.props,\n        icon = _props.icon,\n        avatar = _props.avatar,\n        active = _props.active,\n        activeClassName = _props.activeClassName,\n        style = _props.style,\n        className = _props.className;\n\n    if (!icon && !avatar) {\n      return null;\n    }\n\n    var avatarIcon = false;\n\n    if (avatar) {\n      var avatarChild = React.Children.only(avatar);\n\n      if (avatarChild.props.iconSized) {\n        avatarIcon = true;\n      }\n    }\n\n    return React.createElement('div', {\n      style: style,\n      className: cn('md-tile-addon', (_cn = {\n        'md-tile-addon--icon': icon || avatarIcon,\n        'md-tile-addon--avatar': avatar && !avatarIcon\n      }, _cn[activeClassName] = active, _cn), className)\n    }, icon || avatar);\n  };\n\n  return TileAddon;\n}(PureComponent);\n\nTileAddon.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  active: PropTypes.bool,\n  activeClassName: PropTypes.string,\n  icon: PropTypes.node,\n  avatar: PropTypes.node\n};\nexport default TileAddon;","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/Lists/TileAddon.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","PureComponent","PropTypes","cn","TileAddon","_PureComponent","apply","arguments","render","_cn","_props","props","icon","avatar","active","activeClassName","style","className","avatarIcon","avatarChild","Children","only","iconSized","createElement","propTypes","object","string","bool","node"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\n/**\n * The `TileAddon` component is used to render either a `FontIcon` or an `Avatar`\n * next to the `ListTileText` for a `ListItem`.\n */\n\nvar TileAddon = function (_PureComponent) {\n  _inherits(TileAddon, _PureComponent);\n\n  function TileAddon() {\n    _classCallCheck(this, TileAddon);\n\n    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));\n  }\n\n  TileAddon.prototype.render = function render() {\n    var _cn;\n\n    var _props = this.props,\n        icon = _props.icon,\n        avatar = _props.avatar,\n        active = _props.active,\n        activeClassName = _props.activeClassName,\n        style = _props.style,\n        className = _props.className;\n\n    if (!icon && !avatar) {\n      return null;\n    }\n\n    var avatarIcon = false;\n    if (avatar) {\n      var avatarChild = React.Children.only(avatar);\n      if (avatarChild.props.iconSized) {\n        avatarIcon = true;\n      }\n    }\n    return React.createElement(\n      'div',\n      {\n        style: style,\n        className: cn('md-tile-addon', (_cn = {\n          'md-tile-addon--icon': icon || avatarIcon,\n          'md-tile-addon--avatar': avatar && !avatarIcon\n        }, _cn[activeClassName] = active, _cn), className)\n      },\n      icon || avatar\n    );\n  };\n\n  return TileAddon;\n}(PureComponent);\n\nTileAddon.propTypes = {\n  style: PropTypes.object,\n  className: PropTypes.string,\n  active: PropTypes.bool,\n  activeClassName: PropTypes.string,\n  icon: PropTypes.node,\n  avatar: PropTypes.node\n};\nexport default TileAddon;"]},"metadata":{},"sourceType":"module"}