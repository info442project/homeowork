{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\nimport { SPACE } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport themeColors from '../utils/themeColors';\nimport oneRequiredForA11y from '../utils/PropTypes/oneRequiredForA11y';\nimport capitalizeFirst from '../utils/StringUtils/capitalizeFirst';\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\nimport FontIcon from '../FontIcons/FontIcon';\nimport SwitchTrack from './SwitchTrack';\n/**\n * Prevents a second warning from appearing when using the deprecated or a11y required\n * props by using the `__superSecretProp`.... So secret!\n */\n\nfunction preventDouble(validator) {\n  return function validate(props, propName) {\n    for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      others[_key - 2] = arguments[_key];\n    }\n\n    var err = validator.apply(undefined, [props, propName].concat(others));\n\n    if (err && props.__superSecreteProp) {\n      err = null;\n    }\n\n    return err;\n  };\n}\n/**\n * The `SelectionControl` component is used to render any of the `Radio`, `Checkbox`, or `Switch`\n * selection control type. This component might eventually replace all three since they use this\n * anyways. I am not sure yet though.\n */\n\n\nvar SelectionControl = function (_PureComponent) {\n  _inherits(SelectionControl, _PureComponent);\n\n  function SelectionControl(props) {\n    _classCallCheck(this, SelectionControl);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n\n    _this._setInput = function (input) {\n      _this._input = input;\n    };\n\n    _this._setControl = function (control) {\n      _this._control = control;\n    };\n\n    _this._setContainer = function (container) {\n      _this._container = container;\n    };\n\n    _this._getIcon = function () {\n      var _this$props = _this.props,\n          checkedIcon = _this$props.checkedIcon,\n          uncheckedIcon = _this$props.uncheckedIcon,\n          type = _this$props.type;\n      var checked = getField(_this.props, _this.state, 'checked');\n\n      if (checkedIcon || uncheckedIcon) {\n        return checked ? checkedIcon : uncheckedIcon;\n      }\n\n      var prefix = (checked ? '' : 'un') + 'checked' + capitalizeFirst(type) + 'Icon';\n      var iconClassName = _this.props[prefix + 'ClassName'];\n      var children = _this.props[prefix + 'Children'];\n\n      if (iconClassName || children) {\n        return React.createElement(FontIcon, {\n          iconClassName: iconClassName,\n          inherit: true\n        }, children);\n      }\n\n      var icon = _this.props[prefix];\n      return icon ? React.cloneElement(icon, {\n        inherit: true\n      }) : null;\n    };\n\n    _this._handleKeyDown = function (e) {\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(e);\n      }\n\n      var key = e.which || e.keyCode;\n\n      if (key === SPACE) {\n        _this._input.click();\n      }\n    };\n\n    _this._handleChange = function (e) {\n      var _this$props2 = _this.props,\n          type = _this$props2.type,\n          onChange = _this$props2.onChange;\n      var checked = !getField(_this.props, _this.state, 'checked');\n\n      if (onChange) {\n        onChange(type === 'radio' ? e.target.value : checked, e);\n      }\n\n      if (typeof _this.props.checked === 'undefined') {\n        _this.setState({\n          checked: checked\n        });\n      }\n    };\n\n    _this.state = {};\n\n    if (typeof props.checked === 'undefined') {\n      _this.state.checked = !!props.defaultChecked;\n    }\n\n    return _this;\n  }\n  /**\n   * Gets the current checked value from the selection control. This is used when you have\n   * an uncontrolled selection control and simply need the checked state from a ref callback.\n   *\n   * @return {boolean} the checked state for the selection control.\\\n   */\n\n\n  SelectionControl.prototype._getClassName = function _getClassName(className, props) {\n    return typeof className === 'function' ? className(props, this) : className;\n  };\n\n  SelectionControl.prototype.render = function render() {\n    var _props = this.props,\n        id = _props.id,\n        style = _props.style,\n        className = _props.className,\n        controlClassName = _props.controlClassName,\n        inputClassName = _props.inputClassName,\n        labelClassName = _props.labelClassName,\n        labelTextClassName = _props.labelTextClassName,\n        inline = _props.inline,\n        type = _props.type,\n        name = _props.name,\n        value = _props.value,\n        disabled = _props.disabled,\n        labelBefore = _props.labelBefore,\n        tabIndex = _props.tabIndex,\n        inkDisabled = _props.inkDisabled,\n        disabledInteractions = _props.disabledInteractions,\n        ariaLabel = _props['aria-label'],\n        ariaLabelledBy = _props['aria-labelledby'],\n        ariaDescribedBy = _props['aria-describedby'],\n        propLabel = _props.label,\n        propChildren = _props.checked,\n        onChange = _props.onChange,\n        tooltip = _props.tooltip,\n        checkedCheckboxIcon = _props.checkedCheckboxIcon,\n        uncheckedCheckboxIcon = _props.uncheckedCheckboxIcon,\n        checkedRadioIcon = _props.checkedRadioIcon,\n        uncheckedRadioIcon = _props.uncheckedRadioIcon,\n        __superSecreteProp = _props.__superSecreteProp,\n        checkedIcon = _props.checkedIcon,\n        uncheckedIcon = _props.uncheckedIcon,\n        checkedRadioIconChildren = _props.checkedRadioIconChildren,\n        checkedRadioIconClassName = _props.checkedRadioIconClassName,\n        uncheckedRadioIconChildren = _props.uncheckedRadioIconChildren,\n        uncheckedRadioIconClassName = _props.uncheckedRadioIconClassName,\n        checkedCheckboxIconChildren = _props.checkedCheckboxIconChildren,\n        checkedCheckboxIconClassName = _props.checkedCheckboxIconClassName,\n        uncheckedCheckboxIconChildren = _props.uncheckedCheckboxIconChildren,\n        uncheckedCheckboxIconClassName = _props.uncheckedCheckboxIconClassName,\n        props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'controlClassName', 'inputClassName', 'labelClassName', 'labelTextClassName', 'inline', 'type', 'name', 'value', 'disabled', 'labelBefore', 'tabIndex', 'inkDisabled', 'disabledInteractions', 'aria-label', 'aria-labelledby', 'aria-describedby', 'label', 'checked', 'onChange', 'tooltip', 'checkedCheckboxIcon', 'uncheckedCheckboxIcon', 'checkedRadioIcon', 'uncheckedRadioIcon', '__superSecreteProp', 'checkedIcon', 'uncheckedIcon', 'checkedRadioIconChildren', 'checkedRadioIconClassName', 'uncheckedRadioIconChildren', 'uncheckedRadioIconClassName', 'checkedCheckboxIconChildren', 'checkedCheckboxIconClassName', 'uncheckedCheckboxIconChildren', 'uncheckedCheckboxIconClassName']);\n\n    var checked = getField(this.props, this.state, 'checked');\n    var getClassNameProps = Object.assign({}, this.props, {\n      checked: checked\n    });\n    var isSwitch = type === 'switch';\n    var labelId = this.props.label && id + '-label';\n    var label = this.props.label && React.createElement('span', {\n      id: labelId,\n      className: this._getClassName(labelTextClassName, getClassNameProps)\n    }, this.props.label);\n\n    var classValue = this._getClassName(controlClassName, getClassNameProps);\n\n    var control = void 0;\n\n    if (isSwitch) {\n      control = React.createElement(SwitchTrack, {\n        className: classValue,\n        disabled: disabled,\n        checked: checked,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy || labelId\n      });\n    } else {\n      control = React.createElement(AccessibleFakeInkedButton, {\n        inkDisabled: inkDisabled,\n        disabledInteractions: disabledInteractions,\n        role: type,\n        className: cn('md-selection-control-toggle md-btn md-btn--icon', themeColors({\n          disabled: disabled,\n          hint: !checked,\n          secondary: checked\n        }), classValue),\n        'aria-checked': checked,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy || labelId,\n        'aria-describedby': ariaDescribedBy,\n        tabIndex: tabIndex,\n        disabled: disabled\n      }, tooltip, this._getIcon());\n    }\n\n    return React.createElement('div', _extends({}, props, {\n      style: style,\n      className: cn('md-selection-control-container', {\n        'md-selection-control-container--inline': inline,\n        'md-switch-container': isSwitch\n      }, this._getClassName(className, getClassNameProps)),\n      onKeyDown: this._handleKeyDown\n    }), React.createElement('input', {\n      ref: this._setInput,\n      id: id,\n      type: isSwitch ? 'checkbox' : type,\n      checked: checked,\n      onChange: this._handleChange,\n      disabled: disabled,\n      className: cn('md-selection-control-input', this._getClassName(inputClassName, getClassNameProps)),\n      name: name,\n      value: value,\n      'aria-hidden': true\n    }), React.createElement('label', {\n      htmlFor: id,\n      className: cn('md-selection-control-label', {\n        'md-pointer--hover': !disabled\n      }, themeColors({\n        disabled: disabled,\n        text: !disabled\n      }), this._getClassName(labelClassName, getClassNameProps))\n    }, labelBefore && label, control, !labelBefore && label));\n  };\n\n  _createClass(SelectionControl, [{\n    key: 'checked',\n    get: function get() {\n      return getField(this.props, this.state, 'checked');\n    }\n  }]);\n\n  return SelectionControl;\n}(PureComponent);\n\nSelectionControl.propTypes = {\n  /**\n   * An id to use with the selection control. This is used for accessibility and so that the label\n   * triggers the selection control toggle.\n   */\n  id: preventDouble(isRequiredForA11y(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))),\n\n  /**\n   * An optional label to apply to the checkbox when there is no visible label.\n   */\n  'aria-label': oneRequiredForA11y(PropTypes.string, 'label', 'aria-labelledby'),\n\n  /**\n   * An optional id that points to a label for the selection control when there is no visible label.\n   */\n  'aria-labelledby': PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * An optional id of an element that describes this selection control.\n   * In the case of a fieldset, this should be the id of the fieldset legend which ensures\n   * screen readers provides additional context about the selection control\n   */\n  'aria-describedby': PropTypes.string,\n\n  /**\n   * An optional style to apply to the selection control's container.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the selection control's container.\n   * When a function is specified as prop value its returned value will be used as className.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * An optional className to apply to the selection control.\n   * When a function is specified as prop value its returned value will be used as className.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  controlClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * An optional className to apply to the selection input element.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  inputClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * An optional className to apply to the selection label element.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  labelClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * An optional className to apply to the selection label's text element.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  labelTextClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * The type of selection control to render.\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio', 'switch']).isRequired,\n\n  /**\n   * A label to display with the selection control. This is required for accessibility and triggering\n   * the toggle.\n   */\n  label: PropTypes.node,\n\n  /**\n   * Boolean if the label should appear before the checkbox/radio icon or switch.\n   */\n  labelBefore: PropTypes.bool,\n\n  /**\n   * A name to use for the `SelectionControl`. This is required for accessibility. If the `type`\n   * is a `checkbox` and it is part of a group, it is recommended to make this a string ending\n   * in `[]` so that the value can be found from `document.querySelector('input[name=\"someName[]\"]').value`.\n   */\n  name: preventDouble(isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))),\n\n  /**\n   * Boolean if the `Radio` is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to call when the `SelectionControl` triggers the `change` event. The `onChange`\n   * callback will either include:\n   * - the currently changed radio's value\n   * - the next checked state for the `Switch` or `Checkbox`.\n   *\n   * as the first parameter followed by the change event.\n   *\n   * ```js\n   * // Radio\n   * onChange(changeEvent.target.value, changeEvent);\n   *\n   * // Checkbox or Switch\n   * onChange(changeEvent.target.checked, changeEvent);\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * An optional function to call when the `keydown` event is triggered.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * The value for the `SelectionControl`. It is not required for `Checkbox` and `Switch`,\n   * but it is recommended.\n   */\n  value: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n\n  /**\n   * A boolean if the `SelectionControl` is currently checked. This _really_ makes the `onChange`\n   * prop required, but since there are cases you might want to have the `onChange` listener on a\n   * `fieldset` or something above the component, it is never set to `required`. It will however\n   * prevent updates if there is no change listener.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Boolean if the `Checkbox` or `Switch` are checked by default. This prop is invalid for a\n   * `Radio`.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * Boolean if the `SelectionControl` should be displayed inline instead of a block.\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * The icon to use for a checked `checkbox` selection control.\n   */\n  checkedCheckboxIcon: PropTypes.element,\n\n  /**\n   * The icon to use for an unchecked `checkbox` selection control.\n   */\n  uncheckedCheckboxIcon: PropTypes.element,\n\n  /**\n   * The icon to use for a checked `radio` selection control.\n   */\n  checkedRadioIcon: PropTypes.element,\n\n  /**\n   * The icon to use for an unchecked `radio` selection control.\n   */\n  uncheckedRadioIcon: PropTypes.element,\n\n  /**\n   * An optional tooltip to render with the control. This is only used if you inject the\n   * tooltip manually yourself.\n   *\n   * `const TooltippedSelectionControl = injectTooltip(SelectionControl);`\n   */\n  tooltip: PropTypes.node,\n\n  /**\n   * Boolean if the ink should be disabled for radios or checkboxes.\n   *\n   * @see {@link Inks#inkDisabled}\n   */\n  inkDisabled: PropTypes.bool,\n\n  /**\n   * An optional list of ink interactions that should be disabled.\n   *\n   * @see {@link Inks#disabledInteractions}\n   */\n  disabledInteractions: PropTypes.arrayOf(PropTypes.oneOf(['keyboard', 'touch', 'mouse'])),\n\n  /**\n   * An optional tab index to apply to the selection control.\n   */\n  tabIndex: PropTypes.number,\n  checkedIcon: preventDouble(deprecated(PropTypes.node, 'Use the `checkedCheckboxIconChildren` and `checkedCheckboxIconClassName`  or the ' + '`checkedRadioIconChildren` and `checkedRadioIconClassName` props instead')),\n  uncheckedIcon: preventDouble(deprecated(PropTypes.node, 'Use the `uncheckedCheckboxIconChildren` and `uncheckedCheckboxIconClassName`  or the ' + '`uncheckedRadioIconChildren` and `uncheckedRadioIconClassName` props instead')),\n  checkedCheckboxIconChildren: deprecated(PropTypes.node, 'Use the `checkedCheckboxIcon` prop instead'),\n  checkedCheckboxIconClassName: deprecated(PropTypes.string, 'Use the `checkedCheckboxIcon` prop instead'),\n  uncheckedCheckboxIconChildren: deprecated(PropTypes.node, 'Use the `uncheckedCheckboxIcon` prop instead'),\n  uncheckedCheckboxIconClassName: deprecated(PropTypes.string, 'Use the `uncheckedCheckboxIcon` prop instead'),\n  checkedRadioIconChildren: deprecated(PropTypes.node, 'Use the `checkedRadioIcon` prop instead'),\n  checkedRadioIconClassName: deprecated(PropTypes.string, 'Use the `checkedRadioIcon` prop instead'),\n  uncheckedRadioIconChildren: deprecated(PropTypes.node, 'Use the `uncheckedRadioIcon` prop instead'),\n  uncheckedRadioIconClassName: deprecated(PropTypes.string, 'Use the `uncheckedRadioIcon` prop instead'),\n\n  /* maybe removed once upgrade again? */\n  __superSecreteProp: PropTypes.bool\n};\nSelectionControl.defaultProps = {\n  checkedCheckboxIcon: React.createElement(FontIcon, null, 'check_box'),\n  uncheckedCheckboxIcon: React.createElement(FontIcon, null, 'check_box_outline_blank'),\n  checkedRadioIcon: React.createElement(FontIcon, null, 'radio_button_checked'),\n  uncheckedRadioIcon: React.createElement(FontIcon, null, 'radio_button_unchecked')\n};\nexport default SelectionControl;","map":{"version":3,"sources":["C:/Users/Sky/Desktop/info442/homeowork/node_modules/react-md/es/SelectionControls/SelectionControl.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","_objectWithoutProperties","obj","keys","indexOf","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","__proto__","React","PureComponent","PropTypes","cn","deprecated","isRequiredForA11y","SPACE","getField","themeColors","oneRequiredForA11y","capitalizeFirst","AccessibleFakeInkedButton","FontIcon","SwitchTrack","preventDouble","validator","validate","propName","_len","others","Array","_key","err","apply","undefined","concat","__superSecreteProp","SelectionControl","_PureComponent","_this","_setInput","input","_input","_setControl","control","_control","_setContainer","container","_container","_getIcon","_this$props","checkedIcon","uncheckedIcon","type","checked","state","prefix","iconClassName","children","createElement","inherit","icon","cloneElement","_handleKeyDown","e","onKeyDown","which","keyCode","click","_handleChange","_this$props2","onChange","setState","defaultChecked","_getClassName","className","render","_props","id","style","controlClassName","inputClassName","labelClassName","labelTextClassName","inline","name","disabled","labelBefore","tabIndex","inkDisabled","disabledInteractions","ariaLabel","ariaLabelledBy","ariaDescribedBy","propLabel","label","propChildren","tooltip","checkedCheckboxIcon","uncheckedCheckboxIcon","checkedRadioIcon","uncheckedRadioIcon","checkedRadioIconChildren","checkedRadioIconClassName","uncheckedRadioIconChildren","uncheckedRadioIconClassName","checkedCheckboxIconChildren","checkedCheckboxIconClassName","uncheckedCheckboxIconChildren","uncheckedCheckboxIconClassName","getClassNameProps","isSwitch","labelId","classValue","role","hint","secondary","ref","htmlFor","text","get","propTypes","oneOfType","string","number","object","func","oneOf","isRequired","node","bool","element","arrayOf","defaultProps"],"mappings":"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","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport deprecated from 'react-prop-types/lib/deprecated';\nimport isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';\n\nimport { SPACE } from '../constants/keyCodes';\nimport getField from '../utils/getField';\nimport themeColors from '../utils/themeColors';\nimport oneRequiredForA11y from '../utils/PropTypes/oneRequiredForA11y';\nimport capitalizeFirst from '../utils/StringUtils/capitalizeFirst';\nimport AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';\nimport FontIcon from '../FontIcons/FontIcon';\nimport SwitchTrack from './SwitchTrack';\n\n/**\n * Prevents a second warning from appearing when using the deprecated or a11y required\n * props by using the `__superSecretProp`.... So secret!\n */\nfunction preventDouble(validator) {\n  return function validate(props, propName) {\n    for (var _len = arguments.length, others = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      others[_key - 2] = arguments[_key];\n    }\n\n    var err = validator.apply(undefined, [props, propName].concat(others));\n    if (err && props.__superSecreteProp) {\n      err = null;\n    }\n\n    return err;\n  };\n}\n\n/**\n * The `SelectionControl` component is used to render any of the `Radio`, `Checkbox`, or `Switch`\n * selection control type. This component might eventually replace all three since they use this\n * anyways. I am not sure yet though.\n */\n\nvar SelectionControl = function (_PureComponent) {\n  _inherits(SelectionControl, _PureComponent);\n\n  function SelectionControl(props) {\n    _classCallCheck(this, SelectionControl);\n\n    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));\n\n    _this._setInput = function (input) {\n      _this._input = input;\n    };\n\n    _this._setControl = function (control) {\n      _this._control = control;\n    };\n\n    _this._setContainer = function (container) {\n      _this._container = container;\n    };\n\n    _this._getIcon = function () {\n      var _this$props = _this.props,\n          checkedIcon = _this$props.checkedIcon,\n          uncheckedIcon = _this$props.uncheckedIcon,\n          type = _this$props.type;\n\n      var checked = getField(_this.props, _this.state, 'checked');\n      if (checkedIcon || uncheckedIcon) {\n        return checked ? checkedIcon : uncheckedIcon;\n      }\n\n      var prefix = (checked ? '' : 'un') + 'checked' + capitalizeFirst(type) + 'Icon';\n      var iconClassName = _this.props[prefix + 'ClassName'];\n      var children = _this.props[prefix + 'Children'];\n\n      if (iconClassName || children) {\n        return React.createElement(\n          FontIcon,\n          { iconClassName: iconClassName, inherit: true },\n          children\n        );\n      }\n\n      var icon = _this.props[prefix];\n      return icon ? React.cloneElement(icon, { inherit: true }) : null;\n    };\n\n    _this._handleKeyDown = function (e) {\n      if (_this.props.onKeyDown) {\n        _this.props.onKeyDown(e);\n      }\n\n      var key = e.which || e.keyCode;\n      if (key === SPACE) {\n        _this._input.click();\n      }\n    };\n\n    _this._handleChange = function (e) {\n      var _this$props2 = _this.props,\n          type = _this$props2.type,\n          onChange = _this$props2.onChange;\n\n      var checked = !getField(_this.props, _this.state, 'checked');\n      if (onChange) {\n        onChange(type === 'radio' ? e.target.value : checked, e);\n      }\n\n      if (typeof _this.props.checked === 'undefined') {\n        _this.setState({ checked: checked });\n      }\n    };\n\n    _this.state = {};\n    if (typeof props.checked === 'undefined') {\n      _this.state.checked = !!props.defaultChecked;\n    }\n    return _this;\n  }\n\n  /**\n   * Gets the current checked value from the selection control. This is used when you have\n   * an uncontrolled selection control and simply need the checked state from a ref callback.\n   *\n   * @return {boolean} the checked state for the selection control.\\\n   */\n\n\n  SelectionControl.prototype._getClassName = function _getClassName(className, props) {\n    return typeof className === 'function' ? className(props, this) : className;\n  };\n\n  SelectionControl.prototype.render = function render() {\n    var _props = this.props,\n        id = _props.id,\n        style = _props.style,\n        className = _props.className,\n        controlClassName = _props.controlClassName,\n        inputClassName = _props.inputClassName,\n        labelClassName = _props.labelClassName,\n        labelTextClassName = _props.labelTextClassName,\n        inline = _props.inline,\n        type = _props.type,\n        name = _props.name,\n        value = _props.value,\n        disabled = _props.disabled,\n        labelBefore = _props.labelBefore,\n        tabIndex = _props.tabIndex,\n        inkDisabled = _props.inkDisabled,\n        disabledInteractions = _props.disabledInteractions,\n        ariaLabel = _props['aria-label'],\n        ariaLabelledBy = _props['aria-labelledby'],\n        ariaDescribedBy = _props['aria-describedby'],\n        propLabel = _props.label,\n        propChildren = _props.checked,\n        onChange = _props.onChange,\n        tooltip = _props.tooltip,\n        checkedCheckboxIcon = _props.checkedCheckboxIcon,\n        uncheckedCheckboxIcon = _props.uncheckedCheckboxIcon,\n        checkedRadioIcon = _props.checkedRadioIcon,\n        uncheckedRadioIcon = _props.uncheckedRadioIcon,\n        __superSecreteProp = _props.__superSecreteProp,\n        checkedIcon = _props.checkedIcon,\n        uncheckedIcon = _props.uncheckedIcon,\n        checkedRadioIconChildren = _props.checkedRadioIconChildren,\n        checkedRadioIconClassName = _props.checkedRadioIconClassName,\n        uncheckedRadioIconChildren = _props.uncheckedRadioIconChildren,\n        uncheckedRadioIconClassName = _props.uncheckedRadioIconClassName,\n        checkedCheckboxIconChildren = _props.checkedCheckboxIconChildren,\n        checkedCheckboxIconClassName = _props.checkedCheckboxIconClassName,\n        uncheckedCheckboxIconChildren = _props.uncheckedCheckboxIconChildren,\n        uncheckedCheckboxIconClassName = _props.uncheckedCheckboxIconClassName,\n        props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'controlClassName', 'inputClassName', 'labelClassName', 'labelTextClassName', 'inline', 'type', 'name', 'value', 'disabled', 'labelBefore', 'tabIndex', 'inkDisabled', 'disabledInteractions', 'aria-label', 'aria-labelledby', 'aria-describedby', 'label', 'checked', 'onChange', 'tooltip', 'checkedCheckboxIcon', 'uncheckedCheckboxIcon', 'checkedRadioIcon', 'uncheckedRadioIcon', '__superSecreteProp', 'checkedIcon', 'uncheckedIcon', 'checkedRadioIconChildren', 'checkedRadioIconClassName', 'uncheckedRadioIconChildren', 'uncheckedRadioIconClassName', 'checkedCheckboxIconChildren', 'checkedCheckboxIconClassName', 'uncheckedCheckboxIconChildren', 'uncheckedCheckboxIconClassName']);\n\n    var checked = getField(this.props, this.state, 'checked');\n    var getClassNameProps = Object.assign({}, this.props, { checked: checked });\n    var isSwitch = type === 'switch';\n    var labelId = this.props.label && id + '-label';\n    var label = this.props.label && React.createElement(\n      'span',\n      {\n        id: labelId,\n        className: this._getClassName(labelTextClassName, getClassNameProps)\n      },\n      this.props.label\n    );\n\n    var classValue = this._getClassName(controlClassName, getClassNameProps);\n    var control = void 0;\n    if (isSwitch) {\n      control = React.createElement(SwitchTrack, {\n        className: classValue,\n        disabled: disabled,\n        checked: checked,\n        'aria-label': ariaLabel,\n        'aria-labelledby': ariaLabelledBy || labelId\n      });\n    } else {\n      control = React.createElement(\n        AccessibleFakeInkedButton,\n        {\n          inkDisabled: inkDisabled,\n          disabledInteractions: disabledInteractions,\n          role: type,\n          className: cn('md-selection-control-toggle md-btn md-btn--icon', themeColors({\n            disabled: disabled,\n            hint: !checked,\n            secondary: checked\n          }), classValue),\n          'aria-checked': checked,\n          'aria-label': ariaLabel,\n          'aria-labelledby': ariaLabelledBy || labelId,\n          'aria-describedby': ariaDescribedBy,\n          tabIndex: tabIndex,\n          disabled: disabled\n        },\n        tooltip,\n        this._getIcon()\n      );\n    }\n\n    return React.createElement(\n      'div',\n      _extends({}, props, {\n        style: style,\n        className: cn('md-selection-control-container', {\n          'md-selection-control-container--inline': inline,\n          'md-switch-container': isSwitch\n        }, this._getClassName(className, getClassNameProps)),\n        onKeyDown: this._handleKeyDown\n      }),\n      React.createElement('input', {\n        ref: this._setInput,\n        id: id,\n        type: isSwitch ? 'checkbox' : type,\n        checked: checked,\n        onChange: this._handleChange,\n        disabled: disabled,\n        className: cn('md-selection-control-input', this._getClassName(inputClassName, getClassNameProps)),\n        name: name,\n        value: value,\n        'aria-hidden': true\n      }),\n      React.createElement(\n        'label',\n        {\n          htmlFor: id,\n          className: cn('md-selection-control-label', {\n            'md-pointer--hover': !disabled\n          }, themeColors({ disabled: disabled, text: !disabled }), this._getClassName(labelClassName, getClassNameProps))\n        },\n        labelBefore && label,\n        control,\n        !labelBefore && label\n      )\n    );\n  };\n\n  _createClass(SelectionControl, [{\n    key: 'checked',\n    get: function get() {\n      return getField(this.props, this.state, 'checked');\n    }\n  }]);\n\n  return SelectionControl;\n}(PureComponent);\n\nSelectionControl.propTypes = {\n  /**\n   * An id to use with the selection control. This is used for accessibility and so that the label\n   * triggers the selection control toggle.\n   */\n  id: preventDouble(isRequiredForA11y(PropTypes.oneOfType([PropTypes.string, PropTypes.number]))),\n\n  /**\n   * An optional label to apply to the checkbox when there is no visible label.\n   */\n  'aria-label': oneRequiredForA11y(PropTypes.string, 'label', 'aria-labelledby'),\n\n  /**\n   * An optional id that points to a label for the selection control when there is no visible label.\n   */\n  'aria-labelledby': PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * An optional id of an element that describes this selection control.\n   * In the case of a fieldset, this should be the id of the fieldset legend which ensures\n   * screen readers provides additional context about the selection control\n   */\n  'aria-describedby': PropTypes.string,\n\n  /**\n   * An optional style to apply to the selection control's container.\n   */\n  style: PropTypes.object,\n\n  /**\n   * An optional className to apply to the selection control's container.\n   * When a function is specified as prop value its returned value will be used as className.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  className: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * An optional className to apply to the selection control.\n   * When a function is specified as prop value its returned value will be used as className.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  controlClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * An optional className to apply to the selection input element.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  inputClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * An optional className to apply to the selection label element.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  labelClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * An optional className to apply to the selection label's text element.\n   * The following parameters will be passed into the function:\n   * - component's props (by default value from state is used for `checked` prop)\n   * - reference to component\n   */\n  labelTextClassName: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n  /**\n   * The type of selection control to render.\n   */\n  type: PropTypes.oneOf(['checkbox', 'radio', 'switch']).isRequired,\n\n  /**\n   * A label to display with the selection control. This is required for accessibility and triggering\n   * the toggle.\n   */\n  label: PropTypes.node,\n\n  /**\n   * Boolean if the label should appear before the checkbox/radio icon or switch.\n   */\n  labelBefore: PropTypes.bool,\n\n  /**\n   * A name to use for the `SelectionControl`. This is required for accessibility. If the `type`\n   * is a `checkbox` and it is part of a group, it is recommended to make this a string ending\n   * in `[]` so that the value can be found from `document.querySelector('input[name=\"someName[]\"]').value`.\n   */\n  name: preventDouble(isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string]))),\n\n  /**\n   * Boolean if the `Radio` is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * A function to call when the `SelectionControl` triggers the `change` event. The `onChange`\n   * callback will either include:\n   * - the currently changed radio's value\n   * - the next checked state for the `Switch` or `Checkbox`.\n   *\n   * as the first parameter followed by the change event.\n   *\n   * ```js\n   * // Radio\n   * onChange(changeEvent.target.value, changeEvent);\n   *\n   * // Checkbox or Switch\n   * onChange(changeEvent.target.checked, changeEvent);\n   * ```\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * An optional function to call when the `keydown` event is triggered.\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * The value for the `SelectionControl`. It is not required for `Checkbox` and `Switch`,\n   * but it is recommended.\n   */\n  value: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n\n  /**\n   * A boolean if the `SelectionControl` is currently checked. This _really_ makes the `onChange`\n   * prop required, but since there are cases you might want to have the `onChange` listener on a\n   * `fieldset` or something above the component, it is never set to `required`. It will however\n   * prevent updates if there is no change listener.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * Boolean if the `Checkbox` or `Switch` are checked by default. This prop is invalid for a\n   * `Radio`.\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * Boolean if the `SelectionControl` should be displayed inline instead of a block.\n   */\n  inline: PropTypes.bool,\n\n  /**\n   * The icon to use for a checked `checkbox` selection control.\n   */\n  checkedCheckboxIcon: PropTypes.element,\n\n  /**\n   * The icon to use for an unchecked `checkbox` selection control.\n   */\n  uncheckedCheckboxIcon: PropTypes.element,\n\n  /**\n   * The icon to use for a checked `radio` selection control.\n   */\n  checkedRadioIcon: PropTypes.element,\n\n  /**\n   * The icon to use for an unchecked `radio` selection control.\n   */\n  uncheckedRadioIcon: PropTypes.element,\n\n  /**\n   * An optional tooltip to render with the control. This is only used if you inject the\n   * tooltip manually yourself.\n   *\n   * `const TooltippedSelectionControl = injectTooltip(SelectionControl);`\n   */\n  tooltip: PropTypes.node,\n\n  /**\n   * Boolean if the ink should be disabled for radios or checkboxes.\n   *\n   * @see {@link Inks#inkDisabled}\n   */\n  inkDisabled: PropTypes.bool,\n\n  /**\n   * An optional list of ink interactions that should be disabled.\n   *\n   * @see {@link Inks#disabledInteractions}\n   */\n  disabledInteractions: PropTypes.arrayOf(PropTypes.oneOf(['keyboard', 'touch', 'mouse'])),\n\n  /**\n   * An optional tab index to apply to the selection control.\n   */\n  tabIndex: PropTypes.number,\n\n  checkedIcon: preventDouble(deprecated(PropTypes.node, 'Use the `checkedCheckboxIconChildren` and `checkedCheckboxIconClassName`  or the ' + '`checkedRadioIconChildren` and `checkedRadioIconClassName` props instead')),\n  uncheckedIcon: preventDouble(deprecated(PropTypes.node, 'Use the `uncheckedCheckboxIconChildren` and `uncheckedCheckboxIconClassName`  or the ' + '`uncheckedRadioIconChildren` and `uncheckedRadioIconClassName` props instead')),\n  checkedCheckboxIconChildren: deprecated(PropTypes.node, 'Use the `checkedCheckboxIcon` prop instead'),\n  checkedCheckboxIconClassName: deprecated(PropTypes.string, 'Use the `checkedCheckboxIcon` prop instead'),\n  uncheckedCheckboxIconChildren: deprecated(PropTypes.node, 'Use the `uncheckedCheckboxIcon` prop instead'),\n  uncheckedCheckboxIconClassName: deprecated(PropTypes.string, 'Use the `uncheckedCheckboxIcon` prop instead'),\n  checkedRadioIconChildren: deprecated(PropTypes.node, 'Use the `checkedRadioIcon` prop instead'),\n  checkedRadioIconClassName: deprecated(PropTypes.string, 'Use the `checkedRadioIcon` prop instead'),\n  uncheckedRadioIconChildren: deprecated(PropTypes.node, 'Use the `uncheckedRadioIcon` prop instead'),\n  uncheckedRadioIconClassName: deprecated(PropTypes.string, 'Use the `uncheckedRadioIcon` prop instead'),\n\n  /* maybe removed once upgrade again? */\n  __superSecreteProp: PropTypes.bool\n};\nSelectionControl.defaultProps = {\n  checkedCheckboxIcon: React.createElement(\n    FontIcon,\n    null,\n    'check_box'\n  ),\n  uncheckedCheckboxIcon: React.createElement(\n    FontIcon,\n    null,\n    'check_box_outline_blank'\n  ),\n  checkedRadioIcon: React.createElement(\n    FontIcon,\n    null,\n    'radio_button_checked'\n  ),\n  uncheckedRadioIcon: React.createElement(\n    FontIcon,\n    null,\n    'radio_button_unchecked'\n  )\n};\nexport default SelectionControl;"]},"metadata":{},"sourceType":"module"}